### 文件结构

```
chat/
├── config/
├── db.js
├── mailer.js
├── markdown.js
├── public/
│   ├── config/
│   ├── download-manager.js
│   ├── forgot-password.html
│   ├── index.html
│   ├── login.html
│   ├── presence.js
│   ├── register.html
│   ├── settings.html
│   └── theme.js
├── server.js
├── storage.js
└── uploads/
```

### 文件内容



---
# db.js

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const dataDir = path.join(__dirname, 'data');
const storePath = path.join(dataDir, 'store.json');
const MAX_CUSTOM_STICKERS = 60;

if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

const defaultStore = {
  users: [],
  messages: [],
  files: [],
  nextUserId: 1,
  nextMessageId: 1,
  nextFileId: 1
};

let store = loadStore();
let saveTimer = null;

function loadStore() {
  try {
    const raw = fs.readFileSync(storePath, 'utf8');
    const parsed = JSON.parse(raw);
    const normalizedUsers = Array.isArray(parsed.users)
      ? parsed.users.map(normalizeUser)
      : [];
    return {
      ...defaultStore,
      ...parsed,
      users: normalizedUsers,
      messages: Array.isArray(parsed.messages) ? parsed.messages : [],
      files: Array.isArray(parsed.files)
        ? parsed.files.map(normalizeFile).filter(Boolean)
        : [],
      nextUserId: Number.isInteger(parsed.nextUserId) ? parsed.nextUserId : 1,
      nextMessageId: Number.isInteger(parsed.nextMessageId)
        ? parsed.nextMessageId
        : 1,
      nextFileId: Number.isInteger(parsed.nextFileId) ? parsed.nextFileId : 1
    };
  } catch {
    return { ...defaultStore };
  }
}

function normalizeUser(raw) {
  if (!raw || typeof raw !== 'object') {
    return {
      id: store ? store.nextUserId++ : 0,
      email: '',
      password_hash: '',
      display_name: '',
      avatar_source: 'gravatar',
      avatar_url: null,
      is_verified: 0,
      verification_token: null,
      verification_expires: null,
      reset_code_hash: null,
      reset_code_expires: null,
      created_at: Date.now(),
      updated_at: Date.now(),
      custom_stickers: []
    };
  }
  const stickers = Array.isArray(raw.custom_stickers)
    ? raw.custom_stickers.map(normalizeSticker).filter(Boolean)
    : [];
  return {
    id: raw.id,
    email: raw.email,
    password_hash: raw.password_hash,
    display_name: raw.display_name,
    avatar_source: raw.avatar_source || 'gravatar',
    avatar_url: raw.avatar_url || null,
    is_verified: raw.is_verified ? 1 : 0,
    verification_token: raw.verification_token || null,
    verification_expires: raw.verification_expires || null,
    reset_code_hash: raw.reset_code_hash || null,
    reset_code_expires: raw.reset_code_expires || null,
    created_at: Number.isFinite(raw.created_at) ? raw.created_at : Date.now(),
    updated_at: Number.isFinite(raw.updated_at) ? raw.updated_at : Date.now(),
    custom_stickers: stickers
  };
}

function normalizeSticker(raw) {
  if (!raw || typeof raw !== 'object') return null;
  const description =
    typeof raw.description === 'string'
      ? raw.description.trim().slice(0, 120)
      : '';
  const preview =
    typeof raw.preview_url === 'string' ? raw.preview_url.trim() : '';
  const image =
    typeof raw.image_url === 'string' ? raw.image_url.trim() : '';
  if (!preview || !image) return null;
  return {
    id:
      typeof raw.id === 'string' && raw.id.trim()
        ? raw.id.trim()
        : crypto.randomBytes(8).toString('hex'),
    description,
    preview_url: preview,
    image_url: image,
    created_at: Number.isFinite(raw.created_at) ? raw.created_at : Date.now()
  };
}

function normalizeFile(raw) {
  if (!raw || typeof raw !== 'object') return null;
  const code =
    typeof raw.code === 'string' ? raw.code.trim().toUpperCase() : null;
  const objectKey =
    typeof raw.object_key === 'string' ? raw.object_key.trim() : null;
  const fileName =
    typeof raw.file_name === 'string'
      ? raw.file_name.trim().slice(0, 260)
      : '';
  if (!code || !objectKey || !fileName) {
    return null;
  }
  return {
    id: Number.isInteger(raw.id) ? raw.id : store.nextFileId++,
    user_id: raw.user_id,
    code,
    object_key: objectKey,
    file_name: fileName,
    size: Number.isFinite(raw.size) ? raw.size : 0,
    content_type: typeof raw.content_type === 'string' ? raw.content_type : 'application/octet-stream',
    created_at: Number.isFinite(raw.created_at) ? raw.created_at : Date.now()
  };
}

function scheduleSave() {
  if (saveTimer) return;
  saveTimer = setTimeout(() => {
    saveTimer = null;
    fs.promises
      .writeFile(storePath, JSON.stringify(store, null, 2), 'utf8')
      .catch(err => console.error('[db] failed to persist store:', err));
  }, 50);
}

function cloneSticker(sticker) {
  return {
    id: sticker.id,
    description: sticker.description,
    preview_url: sticker.preview_url,
    image_url: sticker.image_url,
    created_at: sticker.created_at
  };
}

function cloneFile(file) {
  if (!file) return null;
  return {
    id: file.id,
    user_id: file.user_id,
    code: file.code,
    object_key: file.object_key,
    file_name: file.file_name,
    size: file.size,
    content_type: file.content_type,
    created_at: file.created_at
  };
}

function cloneUser(user) {
  if (!user) return null;
  return {
    ...user,
    custom_stickers: Array.isArray(user.custom_stickers)
      ? user.custom_stickers.map(cloneSticker)
      : []
  };
}

function createUser(data) {
  const timestamp = Date.now();
  const user = {
    id: store.nextUserId++,
    email: data.email,
    password_hash: data.password_hash,
    display_name: data.display_name,
    avatar_source: data.avatar_source || 'gravatar',
    avatar_url: data.avatar_url || null,
    is_verified: data.is_verified ? 1 : 0,
    verification_token: data.verification_token || null,
    verification_expires: data.verification_expires || null,
    reset_code_hash: data.reset_code_hash || null,
    reset_code_expires: data.reset_code_expires || null,
    created_at: timestamp,
    updated_at: timestamp,
    custom_stickers: Array.isArray(data.custom_stickers)
      ? data.custom_stickers.map(normalizeSticker).filter(Boolean)
      : []
  };
  store.users.push(user);
  scheduleSave();
  return cloneUser(user);
}

function getUserByEmail(email) {
  return cloneUser(store.users.find(u => u.email === email));
}

function getUserById(id) {
  return cloneUser(store.users.find(u => u.id === id));
}

function updateUserProfile({ id, displayName, avatarSource, avatarUrl }) {
  const user = store.users.find(u => u.id === id);
  if (!user) return { changes: 0 };
  user.display_name = displayName;
  user.avatar_source = avatarSource || 'gravatar';
  user.avatar_url = avatarUrl || null;
  user.updated_at = Date.now();
  scheduleSave();
  return { changes: 1 };
}

function updateUserVerification({ id, isVerified, token, expires }) {
  const user = store.users.find(u => u.id === id);
  if (!user) return { changes: 0 };
  user.is_verified = isVerified ? 1 : 0;
  user.verification_token = token || null;
  user.verification_expires = expires || null;
  user.updated_at = Date.now();
  scheduleSave();
  return { changes: 1 };
}

function updateUserPassword({ id, passwordHash }) {
  const user = store.users.find(u => u.id === id);
  if (!user) return { changes: 0 };
  user.password_hash = passwordHash;
  user.updated_at = Date.now();
  scheduleSave();
  return { changes: 1 };
}

function setPasswordResetCode({ id, codeHash, expires }) {
  const user = store.users.find(u => u.id === id);
  if (!user) return { changes: 0 };
  user.reset_code_hash = codeHash;
  user.reset_code_expires = expires;
  user.updated_at = Date.now();
  scheduleSave();
  return { changes: 1 };
}

function clearPasswordResetCode(id) {
  const user = store.users.find(u => u.id === id);
  if (!user) return { changes: 0 };
  user.reset_code_hash = null;
  user.reset_code_expires = null;
  user.updated_at = Date.now();
  scheduleSave();
  return { changes: 1 };
}

function verifyUserByToken(token) {
  const user = store.users.find(u => u.verification_token === token);
  if (!user) {
    return { success: false, reason: 'not_found' };
  }
  if (user.is_verified) {
    return { success: true, already: true, user: cloneUser(user) };
  }
  if (user.verification_expires && user.verification_expires < Date.now()) {
    return { success: false, reason: 'expired', user: cloneUser(user) };
  }
  user.is_verified = 1;
  user.verification_token = null;
  user.verification_expires = null;
  user.updated_at = Date.now();
  scheduleSave();
  return { success: true, user: cloneUser(user) };
}

function saveMessage(userId, content, createdAt) {
  const message = {
    id: store.nextMessageId++,
    user_id: userId,
    content,
    created_at: createdAt
  };
  store.messages.push(message);
  scheduleSave();
  return { ...message };
}

function getUserByDisplayName(name) {
  const value = String(name || '').trim().toLowerCase();
  if (!value) return null;
  const match = store.users.find(u => {
    const display = String(u.display_name || '').trim().toLowerCase();
    return display === value;
  });
  return cloneUser(match);
}

function getMessagesPage(limit, beforeId) {
  const take = Math.max(0, Number(limit) || 0);
  if (!take) return [];
  let filtered = store.messages;
  if (Number.isInteger(beforeId)) {
    filtered = filtered.filter(msg => msg.id < beforeId);
  }
  const slice = filtered.slice(-take);
  return slice
    .map(msg => {
      const user = store.users.find(u => u.id === msg.user_id);
      if (!user) return null;
      return {
        id: msg.id,
        user_id: msg.user_id,
        content: msg.content,
        created_at: msg.created_at,
        display_name: user.display_name,
        email: user.email,
        avatar_source: user.avatar_source,
        avatar_url: user.avatar_url
      };
    })
    .filter(Boolean);
}

function getRecentMessages(limit) {
  return getMessagesPage(limit);
}

function getUserStickers(userId) {
  const user = store.users.find(u => u.id === userId);
  if (!user || !Array.isArray(user.custom_stickers)) return [];
  return user.custom_stickers.map(cloneSticker);
}

function addUserSticker({ id, description, previewUrl, imageUrl }) {
  const user = store.users.find(u => u.id === id);
  if (!user) return { success: false, reason: 'not_found' };
  if (!Array.isArray(user.custom_stickers)) {
    user.custom_stickers = [];
  }
  if (user.custom_stickers.length >= MAX_CUSTOM_STICKERS) {
    return { success: false, reason: 'limit' };
  }
  const sticker = {
    id: crypto.randomBytes(8).toString('hex'),
    description,
    preview_url: previewUrl,
    image_url: imageUrl,
    created_at: Date.now()
  };
  user.custom_stickers.push(sticker);
  user.updated_at = Date.now();
  scheduleSave();
  return {
    success: true,
    sticker: cloneSticker(sticker),
    stickers: user.custom_stickers.map(cloneSticker)
  };
}

function removeUserSticker({ id, stickerId }) {
  const user = store.users.find(u => u.id === id);
  if (!user || !Array.isArray(user.custom_stickers)) {
    return { success: false, reason: 'not_found' };
  }
  const index = user.custom_stickers.findIndex(st => st.id === stickerId);
  if (index === -1) {
    return { success: false, reason: 'not_found' };
  }
  user.custom_stickers.splice(index, 1);
  user.updated_at = Date.now();
  scheduleSave();
  return { success: true };
}

function saveFileRecord({ userId, code, objectKey, fileName, size, contentType }) {
  const record = {
    id: store.nextFileId++,
    user_id: userId,
    code: String(code || '').trim().toUpperCase(),
    object_key: objectKey,
    file_name: fileName,
    size: size || 0,
    content_type: contentType || 'application/octet-stream',
    created_at: Date.now()
  };
  store.files.push(record);
  scheduleSave();
  return cloneFile(record);
}

function getFileByCode(code) {
  const normalized = String(code || '').trim().toUpperCase();
  if (!normalized) return null;
  return cloneFile(store.files.find(file => file.code === normalized));
}

function getFilesByUser(userId) {
  return store.files
    .filter(file => file.user_id === userId)
    .sort((a, b) => b.created_at - a.created_at)
    .map(cloneFile);
}

module.exports = {
  createUser,
  getUserByEmail,
  getUserById,
  updateUserProfile,
  updateUserVerification,
  updateUserPassword,
  setPasswordResetCode,
  clearPasswordResetCode,
  verifyUserByToken,
  saveMessage,
  getUserByDisplayName,
  getMessagesPage,
  getRecentMessages,
  getUserStickers,
  addUserSticker,
  removeUserSticker,
  saveFileRecord,
  getFileByCode,
  getFilesByUser
};


---
# mailer.js

const nodemailer = require('nodemailer');

const SMTP_USER = 'yhgs@ylfcat.top';
const SMTP_APP_PASSWORD =
  process.env.SMTP_APP_PASSWORD || 'pk57Y5OZuanG4PF9';

let transporter;

function getTransporter() {
  if (!transporter) {
    transporter = nodemailer.createTransport({
      host: 'smtp.feishu.cn',
      port: 465,
      secure: true,
      auth: {
        user: SMTP_USER,
        pass: SMTP_APP_PASSWORD
      }
    });
  }
  return transporter;
}

async function sendMail(options) {
  if (!SMTP_APP_PASSWORD || SMTP_APP_PASSWORD.includes('REPLACE_WITH_FEISHU_APP_PASSWORD')) {
    console.warn('[mailer] SMTP app password is not configured; skipped sending email.');
    return;
  }
  await getTransporter().sendMail(options);
}

async function sendVerificationEmail(to, token, displayName) {
  if (!token || !to) return;

  const link = `https://frp.ylfcat.icu/verify?token=${token}`;
  const safeName = displayName || '朋友';
  const subject = '验证你的漫游聊天室账号';

  const textContent = [    `你好，${safeName}：`,    '',    '感谢注册漫游聊天室，为了保证账号安全，请点击以下链接完成邮箱验证：',    link,    '',    '如果不是你本人操作，可以忽略这封邮件。',    '',    '—— 漫游聊天室'  ].join('\n');

  const htmlContent = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>${subject}</title>
</head>
<body style="font-family: Arial, 'Microsoft YaHei', sans-serif; background:#f4f4f8; margin:0; padding:32px;">
  <table width="100%" cellpadding="0" cellspacing="0" style="max-width:560px; margin:0 auto; background:#ffffff; border-radius:16px; overflow:hidden; box-shadow:0 24px 48px rgba(15,23,42,0.12);">
    <tr>
      <td style="background:linear-gradient(135deg,#2563eb,#7c3aed); color:#ffffff; padding:28px 32px; font-size:20px; font-weight:600;">
        漫游聊天室 · 邮箱验证
      </td>
    </tr>
    <tr>
      <td style="padding:32px;">
        <p style="margin:0 0 16px 0; font-size:16px; color:#0f172a;">你好，${safeName}：</p>
        <p style="margin:0 0 16px 0; color:#475569; line-height:1.6;">
          感谢注册漫游聊天室。为了激活你的账号并参与聊天，请在 24 小时内点击下方按钮完成邮箱验证。
        </p>
        <p style="margin:24px 0;">
          <a href="${link}" style="display:inline-block; padding:14px 26px; border-radius:999px; color:#ffffff; background:linear-gradient(135deg,#2563eb,#7c3aed); font-weight:600; text-decoration:none;">
            完成邮箱验证
          </a>
        </p>
        <p style="margin:0; color:#94a3b8; font-size:13px;">
          如果按钮无法点击，请复制如下链接到浏览器打开：<br>
          <span style="word-break:break-all;">${link}</span>
        </p>
      </td>
    </tr>
    <tr>
      <td style="padding:24px 32px; background:#f8fafc; color:#94a3b8; font-size:12px;">
        本邮件由系统自动发送，请勿直接回复。
      </td>
    </tr>
  </table>
</body>
</html>`.trim();

  await sendMail({
    from: `"漫游聊天室" <${SMTP_USER}>`,
    to,
    subject,
    text: textContent,
    html: htmlContent
  });
}

async function sendPasswordResetEmail(to, displayName, code) {
  if (!code || !to) return;

  const safeName = displayName || '朋友';
  const subject = '重置你的漫游聊天室密码';

  const textContent = [    `你好，${safeName}：`,    '',    '我们收到了你重置密码的请求，请在页面输入以下验证码完成操作：',    '',    `验证码：${code}`,    '',    '验证码有效期 15 分钟。如果不是你本人操作，请忽略。'  ].join('\n');

  const htmlContent = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>${subject}</title>
</head>
<body style="font-family: Arial, 'Microsoft YaHei', sans-serif; background:#f4f4f8; margin:0; padding:32px;">
  <table width="100%" cellpadding="0" cellspacing="0" style="max-width:520px; margin:0 auto; background:#ffffff; border-radius:16px; overflow:hidden; box-shadow:0 24px 48px rgba(15,23,42,0.12);">
    <tr>
      <td style="background:linear-gradient(135deg,#2563eb,#7c3aed); color:#ffffff; padding:26px 30px; font-size:20px; font-weight:600;">
        漫游聊天室 · 密码重置
      </td>
    </tr>
    <tr>
      <td style="padding:28px 30px;">
        <p style="margin:0 0 18px 0; font-size:16px; color:#0f172a;">你好，${safeName}：</p>
        <p style="margin:0 0 18px 0; color:#475569; line-height:1.6;">
          我们收到了你重置密码的请求，请在重置页面输入下方验证码。验证码有效期为 15 分钟。
        </p>
        <p style="margin:24px 0; text-align:center;">
          <span style="display:inline-block; font-size:28px; letter-spacing:0.35em; padding:14px 26px; border-radius:14px; background:rgba(37,99,235,0.1); color:#1d4ed8; font-weight:700;">
            ${code}
          </span>
        </p>
        <p style="margin:0; color:#94a3b8; font-size:13px;">
          如果你没有请求重置密码，可以忽略这封邮件。
        </p>
      </td>
    </tr>
  </table>
</body>
</html>`.trim();

  await sendMail({
    from: `"漫游聊天室" <${SMTP_USER}>`,
    to,
    subject,
    text: textContent,
    html: htmlContent
  });
}

module.exports = {
  sendVerificationEmail,
  sendPasswordResetEmail,
  SMTP_USER
};


---
# markdown.js

const { JSDOM } = require('jsdom');
const createDOMPurify = require('dompurify');
const MarkdownIt = require('markdown-it');
const markdownItKatex = require('markdown-it-katex');

const md = new MarkdownIt({
  html: false,
  linkify: true,
  typographer: true,
  breaks: true
});

md.use(markdownItKatex, {
  throwOnError: false,
  output: 'html'
});

md.core.ruler.after('inline', 'file-card', state => {
  const isValidFileCode = value => /^[A-Za-z0-9]{4,64}$/.test(value || '');
  const isValidHttpUrl = value => /^https?:\/\//i.test(value || '');

  const createCardToken = (payload, kind) => {
    const token = new state.Token('html_inline', '', 0);
    token.content = renderFileCardHTML(payload, kind);
    return token;
  };

  state.tokens.forEach(blockToken => {
    if (blockToken.type !== 'inline' || !blockToken.children) return;

    const children = blockToken.children;
    for (let i = 0; i < children.length; i += 1) {
      const token = children[i];

      if (token.type === 'link_open') {
        const textToken = children[i + 1];
        const closeToken = children[i + 2];
        if (
          textToken &&
          textToken.type === 'text' &&
          textToken.content.trim().toLowerCase() === 'file' &&
          closeToken &&
          closeToken.type === 'link_close'
        ) {
          const href = (token.attrGet('href') || '').trim();
          if (!href) continue;

          if (isValidFileCode(href)) {
            const cardToken = createCardToken(href.toUpperCase(), 'code');
            children.splice(i, 3, cardToken);
            i -= 1;
          } else if (isValidHttpUrl(href)) {
            const cardToken = createCardToken(href, 'url');
            children.splice(i, 3, cardToken);
            i -= 1;
          }
        }
      } else if (token.type === 'image') {
        const alt = (token.content || '').trim().toLowerCase();
        const src = (token.attrGet('src') || '').trim();
        if (alt !== 'file' || !src) continue;

        if (isValidFileCode(src)) {
          const cardToken = createCardToken(src.toUpperCase(), 'code');
          children.splice(i, 1, cardToken);
          i -= 1;
        } else if (isValidHttpUrl(src)) {
          const cardToken = createCardToken(src, 'url');
          children.splice(i, 1, cardToken);
          i -= 1;
        }
      }
    }
  });
});

const window = new JSDOM('').window;
const DOMPurify = createDOMPurify(window);

DOMPurify.addHook('uponSanitizeAttribute', (node, data) => {
  if (
    data.attrName === 'style' &&
    typeof node.closest === 'function' &&
    node.closest('.katex')
  ) {
    data.keepAttr = true;
  }
});

const purifyConfig = {
  ALLOW_DATA_ATTR: true,
  ALLOW_DATA_URLS: true,
  ALLOWED_URI_REGEXP:
    /^(?:(?:https?|ftp|mailto|tel|data:image\/(?:gif|png|apng|webp|jpe?g);base64,))/i,
  ADD_ATTR: [
    'aria-hidden',
    'focusable',
    'tabindex',
    'encoding',
    'data-user-id',
    'data-file-code',
    'data-file-state',
    'data-file-url'
  ],
  ALLOWED_ATTR: [
    'class',
    'id',
    'style',
    'href',
    'title',
    'rel',
    'target',
    'aria-hidden',
    'tabindex',
    'encoding',
    'data-user-id',
    'data-file-code',
    'data-file-state',
    'data-file-url',
    'src',
    'alt',
    'srcset',
    'sizes',
    'loading',
    'decoding',
    'referrerpolicy',
    'type',
    'disabled'
  ]
};

function renderMarkdown(source, mentionMap) {
  const text = typeof source === 'string' ? source : '';
  const rendered = md.render(text);
  const sanitized = DOMPurify.sanitize(rendered, purifyConfig).trim();

  if (!sanitized) {
    return sanitized;
  }

  const dom = new JSDOM(`<body>${sanitized}</body>`);
  const { document, NodeFilter } = dom.window;

  document.querySelectorAll('img').forEach(img => {
    if (!img.hasAttribute('loading')) {
      img.setAttribute('loading', 'lazy');
    }
    if (!img.hasAttribute('decoding')) {
      img.setAttribute('decoding', 'async');
    }
    if (!img.hasAttribute('referrerpolicy')) {
      img.setAttribute('referrerpolicy', 'no-referrer');
    }

    const altRaw = (img.getAttribute('alt') || '').trim();
    const altNormalized = altRaw.replace(/^:|:$/g, '').toLowerCase();
    if (
      altNormalized &&
      (altNormalized === 'emoji' ||
        (altRaw.startsWith(':') && altRaw.endsWith(':')))
    ) {
      img.classList.add('emoji-inline');
      img.setAttribute('role', 'img');
      img.setAttribute('aria-label', altNormalized);
      img.setAttribute('alt', '');
    }
  });

  transformFileTokens(document);

  if (!mentionMap || mentionMap.size === 0) {
    return document.body.innerHTML.trim();
  }

  const walker = document.createTreeWalker(
    document.body,
    NodeFilter.SHOW_TEXT
  );
  const mentionRegex = /@([^\s@]+)(?=\s|$)/g;

  while (walker.nextNode()) {
    const node = walker.currentNode;
    const textContent = node.textContent;
    let lastIndex = 0;
    const fragments = [];
    let match;

    while ((match = mentionRegex.exec(textContent)) !== null) {
      const label = match[1];
      const userId = mentionMap.get(label);
      if (!userId) continue;

      if (match.index > lastIndex) {
        fragments.push(
          document.createTextNode(textContent.slice(lastIndex, match.index))
        );
      }

      const span = document.createElement('span');
      span.className = 'mention';
      span.dataset.userId = String(userId);
      span.textContent = `@${label}`;
      fragments.push(span);

      lastIndex = match.index + match[0].length;
    }

    if (fragments.length) {
      if (lastIndex < textContent.length) {
        fragments.push(
          document.createTextNode(textContent.slice(lastIndex))
        );
      }
      const parent = node.parentNode;
      fragments.forEach(fragment => parent.insertBefore(fragment, node));
      parent.removeChild(node);
    }
  }

  return document.body.innerHTML.trim();
}

function transformFileTokens(document) {
  if (!document || !document.body) return;

  const anchors = Array.from(document.querySelectorAll('a'));
  anchors.forEach(anchor => {
    const label = (anchor.textContent || '').trim().toLowerCase();
    const href = (anchor.getAttribute('href') || '').trim();
    if (label !== 'file') return;
    if (!href) return;

    if (/^[A-Za-z0-9]{4,64}$/.test(href)) {
      const card = createFileCard(document, href.toUpperCase(), 'code');
      anchor.replaceWith(card);
    } else if (/^https?:\/\//i.test(href)) {
      const card = createFileCard(document, href, 'url');
      anchor.replaceWith(card);
    }
  });

  const images = Array.from(document.querySelectorAll('img'));
  images.forEach(img => {
    const alt = (img.getAttribute('alt') || '').trim().toLowerCase();
    const src = (img.getAttribute('src') || '').trim();
    if (alt !== 'file') return;
    if (!src) return;

    if (/^[A-Za-z0-9]{4,64}$/.test(src)) {
      const card = createFileCard(document, src.toUpperCase(), 'code');
      img.replaceWith(card);
    } else if (/^https?:\/\//i.test(src)) {
      const card = createFileCard(document, src, 'url');
      img.replaceWith(card);
    }
  });
}

function renderFileCardHTML(value, kind) {
  const isUrl = kind === 'url';
  const props = isUrl
    ? `data-file-url="${value}"`
    : `data-file-code="${value}"`;
  const label = isUrl ? '外部链接' : `文件编码 ${value}`;
  const info = isUrl
    ? '这是一个外部直链资源，可直接下载。'
    : '正在加载文件信息…';

  return [
    `<div class="file-card" ${props} data-file-state="idle">`,
    '  <div class="file-card-preview" aria-hidden="true">FILE</div>',
    '  <div class="file-card-meta">',
    `    <div class="file-card-name">${label}</div>`,
    `    <div class="file-card-info">${info}</div>`,
    '  </div>',
    '  <div class="file-card-actions">',
    '    <button type="button" class="file-card-download">下载</button>',
    '  </div>',
    '</div>'
  ].join('');
}

function createFileCard(document, value, kind) {
  const wrapper = document.createElement('div');
  wrapper.innerHTML = renderFileCardHTML(value, kind);
  return wrapper.firstChild;
}

module.exports = {
  renderMarkdown
};


---
# server.js

const path = require('path');
const fs = require('fs');
const crypto = require('crypto');
const http = require('http');
const express = require('express');
const session = require('express-session');
const FileStore = require('session-file-store')(session);
const multer = require('multer');
const bcrypt = require('bcryptjs');
const { Server } = require('socket.io');

const db = require('./db');
const { renderMarkdown } = require('./markdown');
const { sendVerificationEmail, sendPasswordResetEmail } = require('./mailer');
const {
  isConfigured: isStorageConfigured,
  uploadObject,
  createPresignedUrl
} = require('./storage');

const HISTORY_PAGE_SIZE = 40;
const MAX_MESSAGE_LENGTH = 5000;
const MAX_NAME_LENGTH = 32;
const PASSWORD_MIN_LENGTH = 8;
const VERIFICATION_TOKEN_TTL = 1000 * 60 * 60 * 24;
const RESET_CODE_TTL = 1000 * 60 * 15;
const MAX_FILE_UPLOAD_SIZE = 200 * 1024 * 1024;

const FILE_CODE_ALPHABET = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const dataDir = path.join(__dirname, 'data');
const uploadsDir = path.join(__dirname, 'uploads');
const sessionsDir = path.join(dataDir, 'sessions');
const katexPackageDir = path.dirname(require.resolve('katex/package.json'));
const katexDistDir = path.join(katexPackageDir, 'dist');

if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}
if (!fs.existsSync(sessionsDir)) {
  fs.mkdirSync(sessionsDir, { recursive: true });
}

const sessionMiddleware = session({
  store: new FileStore({
    path: sessionsDir,
    retries: 0
  }),
  secret: process.env.SESSION_SECRET || 'change-this-session-secret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 1000 * 60 * 60 * 24 * 7,
    sameSite: 'lax',
    secure: false
  }
});

const storage = multer.diskStorage({
  destination: uploadsDir,
  filename: (req, file, cb) => {
    const decodedName = decodeOriginalName(file.originalname);
    const ext = path.extname(decodedName || '').toLowerCase() || '.png';
    const prefix = req.session && req.session.userId ? `u${req.session.userId}` : 'guest';
    const unique = crypto.randomBytes(6).toString('hex');
    cb(null, `${Date.now()}-${prefix}-${unique}${ext}`);
  }
});

const avatarUpload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024
  },
  fileFilter: (req, file, cb) => {
    if (/^image\/(png|jpe?g|gif|webp)$/i.test(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('仅支持 PNG、JPG、GIF 或 WebP 格式的图片'));
    }
  }
});

const fileUpload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: MAX_FILE_UPLOAD_SIZE,
    files: 1
  }
});

app.use(sessionMiddleware);
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use('/uploads', express.static(uploadsDir, { maxAge: '7d' }));
app.use('/vendor/katex', express.static(katexDistDir, { maxAge: '30d' }));
app.use(express.static(path.join(__dirname, 'public')));

const connectedUsers = new Map();
const userSockets = new Map();
const disconnectTimers = new Map();

io.use((socket, next) => {
  sessionMiddleware(socket.request, socket.request.res || {}, next);
});

io.on('connection', socket => {
  const userId = socket.request.session && socket.request.session.userId;
  if (!userId) {
    socket.emit('auth-required');
    socket.disconnect(true);
    return;
  }

  const user = db.getUserById(userId);
  if (!user) {
    socket.emit('auth-required');
    socket.disconnect(true);
    return;
  }

  const mode = parseConnectionMode(socket.handshake);
  socket.data.userId = user.id;
  socket.data.mode = mode;
  connectedUsers.set(socket.id, user.id);

  const hadPendingDeparture = disconnectTimers.has(user.id);
  if (hadPendingDeparture) {
    clearTimeout(disconnectTimers.get(user.id));
    disconnectTimers.delete(user.id);
  }

  let socketsForUser = userSockets.get(user.id);
  if (!socketsForUser) {
    socketsForUser = new Set();
    userSockets.set(user.id, socketsForUser);
  }
  const firstConnection = socketsForUser.size === 0 && !hadPendingDeparture;
  socketsForUser.add(socket.id);

  const userPayload = mapUserToClient(user);

  if (mode === 'presence') {
    socket.emit('presence-init', {
      self: userPayload,
      roster: buildRoster(),
      online: userSockets.size
    });
  } else {
    const initialRows = db.getMessagesPage(HISTORY_PAGE_SIZE);
    const historyPayload = initialRows.map(row => {
      const entry = formatMessagePayload(row, null);
      entry.mentions = [];
      return entry;
    });

    socket.emit('chat-init', {
      self: userPayload,
      history: historyPayload,
      historyDone: historyPayload.length < HISTORY_PAGE_SIZE,
      online: userSockets.size,
      roster: buildRoster()
    });
  }

  if (firstConnection) {
    socket.broadcast.emit('system-message', `${user.display_name} 加入了聊天`);
    io.emit('roster-update', buildRoster());
  }

  io.emit('online-count', userSockets.size);

  socket.on('chat-message', raw => {
    if (typeof raw !== 'string') return;
    const trimmed = raw.trim();
    if (!trimmed) return;

    if (trimmed.length > MAX_MESSAGE_LENGTH) {
      socket.emit('system-message', '消息长度不能超过 5000 个字符。');
      return;
    }

    const freshUser = db.getUserById(socket.data.userId);
    if (!freshUser) {
      socket.emit('auth-required');
      socket.disconnect(true);
      return;
    }
    if (!freshUser.is_verified) {
      socket.emit('system-message', '邮箱尚未验证，暂时无法发送消息。请在邮箱中完成验证后刷新页面。');
      return;
    }

    const mentions = extractMentions(trimmed, freshUser.id);
    const createdAt = Date.now();
    const saved = db.saveMessage(freshUser.id, trimmed, createdAt);

    const payload = formatMessagePayload(
      {
        id: saved.id,
        user_id: freshUser.id,
        content: trimmed,
        created_at: createdAt,
        display_name: freshUser.display_name,
        email: freshUser.email,
        avatar_source: freshUser.avatar_source,
        avatar_url: freshUser.avatar_url
      },
      mentions.map
    );
    payload.mentions = mentions.ids;

    io.emit('chat-message', payload);

    mentions.ids.forEach(id => {
      const socketsSet = userSockets.get(id);
      if (!socketsSet) return;
      socketsSet.forEach(sid => {
        io.to(sid).emit('mention', {
          from: payload.author,
          text: payload.text,
          html: payload.html,
          time: payload.time
        });
      });
    });
  });

  socket.on('history-request', params => {
    if (!params || typeof params !== 'object') return;
    const beforeId = Number(params.beforeId);
    if (!Number.isInteger(beforeId) || beforeId <= 0) return;

    const rows = db.getMessagesPage(HISTORY_PAGE_SIZE, beforeId);
    if (!rows.length) {
      socket.emit('history-chunk', { messages: [], done: true, oldestId: beforeId });
      return;
    }

    const chunk = rows.map(row => {
      const entry = formatMessagePayload(row, null);
      entry.mentions = [];
      return entry;
    });

    socket.emit('history-chunk', {
      messages: chunk,
      done: rows.length < HISTORY_PAGE_SIZE,
      oldestId: chunk[0].id
    });
  });

  socket.on('disconnect', () => {
    connectedUsers.delete(socket.id);

    const socketsForUser = userSockets.get(user.id);
    if (socketsForUser) {
      socketsForUser.delete(socket.id);
      if (socketsForUser.size === 0) {
        scheduleDeparture(user.id);
      }
    }
  });
});

app.post('/api/auth/register', avatarUpload.single('avatarFile'), async (req, res, next) => {
  try {
    const email = normalizeEmail(req.body.email);
    const password = String(req.body.password || '');
    const passwordConfirm = String(req.body.passwordConfirm || '');
    const displayName = sanitizeDisplayName(req.body.displayName || '');
    let avatarSource = String(req.body.avatarSource || 'gravatar').toLowerCase();
    const avatarUrlInput = String(req.body.avatarUrl || '').trim();

    if (!email || !validateEmail(email)) {
      cleanupUploadedFile(req.file);
      return res.status(422).json({ message: '邮箱格式不正确' });
    }
    if (password.length < PASSWORD_MIN_LENGTH) {
      cleanupUploadedFile(req.file);
      return res
        .status(422)
        .json({ message: `密码至少需要 ${PASSWORD_MIN_LENGTH} 个字符` });
    }
    if (passwordConfirm && password !== passwordConfirm) {
      cleanupUploadedFile(req.file);
      return res.status(422).json({ message: '两次密码输入不一致' });
    }
    if (!displayName) {
      cleanupUploadedFile(req.file);
      return res.status(422).json({ message: '请填写昵称' });
    }

    const existing = db.getUserByEmail(email);
    if (existing) {
      cleanupUploadedFile(req.file);
      return res.status(409).json({ message: '该邮箱已注册，请直接登录' });
    }

    let storedAvatarUrl = null;
    if (avatarSource === 'url') {
      if (!avatarUrlInput || !validateHttpUrl(avatarUrlInput)) {
        cleanupUploadedFile(req.file);
        return res.status(422).json({ message: '头像链接无效，请使用 http(s) 链接' });
      }
      storedAvatarUrl = avatarUrlInput;
    } else if (avatarSource === 'upload') {
      if (!req.file) {
        return res.status(422).json({ message: '请上传一张头像图片' });
      }
      storedAvatarUrl = `/uploads/${req.file.filename}`;
    } else {
      avatarSource = 'gravatar';
    }

    if (avatarSource !== 'upload' && req.file) {
      cleanupUploadedFile(req.file);
    }

    const passwordHash = await bcrypt.hash(password, 12);
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const verificationExpires = Date.now() + VERIFICATION_TOKEN_TTL;

    const user = db.createUser({
      email,
      password_hash: passwordHash,
      display_name: displayName,
      avatar_source: avatarSource,
      avatar_url: storedAvatarUrl,
      is_verified: false,
      verification_token: verificationToken,
      verification_expires: verificationExpires
    });

    try {
      await sendVerificationEmail(user.email, verificationToken, displayName);
    } catch (mailError) {
      console.error('[mailer] Failed to send verification email:', mailError);
    }

    res
      .status(201)
      .json({ success: true, message: '注册成功，验证邮件已发送，请查收邮箱完成验证。' });
  } catch (error) {
    cleanupUploadedFile(req.file);
    next(error);
  }
});

app.post('/api/auth/login', async (req, res, next) => {
  try {
    const email = normalizeEmail(req.body.email);
    const password = String(req.body.password || '');

    if (!email || !validateEmail(email) || !password) {
      return res.status(422).json({ message: '请输入有效的邮箱和密码' });
    }

    const user = db.getUserByEmail(email);
    if (!user) {
      return res.status(401).json({ message: '邮箱或密码错误' });
    }

    const match = await bcrypt.compare(password, user.password_hash);
    if (!match) {
      return res.status(401).json({ message: '邮箱或密码错误' });
    }

    req.session.userId = user.id;
    res.json({ success: true, user: mapUserToClient(user), roster: buildRoster() });
  } catch (error) {
    next(error);
  }
});

app.post('/api/auth/logout', (req, res) => {
  req.session.destroy(() => {
    res.json({ success: true });
  });
});

app.get('/api/auth/session', (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.json({ authenticated: false });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.json({ authenticated: false });
  }
  res.json({
    authenticated: true,
    user: mapUserToClient(user),
    roster: buildRoster()
  });
});

app.post('/api/auth/resend-verification', async (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }
  if (user.is_verified) {
    return res.status(400).json({ message: '邮箱已验证，无需重发' });
  }

  const verificationToken = crypto.randomBytes(32).toString('hex');
  const verificationExpires = Date.now() + VERIFICATION_TOKEN_TTL;
  db.updateUserVerification({
    id: user.id,
    isVerified: false,
    token: verificationToken,
    expires: verificationExpires
  });

  try {
    await sendVerificationEmail(user.email, verificationToken, user.display_name);
  } catch (mailError) {
    console.error('[mailer] Failed to resend verification email:', mailError);
  }

  res.json({ success: true, message: '验证邮件已重新发送，请查收邮箱。' });
});

app.post('/api/auth/forgot-password', async (req, res) => {
  const email = normalizeEmail(req.body.email);
  if (!email || !validateEmail(email)) {
    return res.status(422).json({ message: '请输入有效的邮箱地址' });
  }

  const user = db.getUserByEmail(email);
  if (!user) {
    return res.json({ success: true });
  }

  const code = generateResetCode();
  const codeHash = await bcrypt.hash(code, 12);
  const expires = Date.now() + RESET_CODE_TTL;
  db.setPasswordResetCode({ id: user.id, codeHash, expires });

  try {
    await sendPasswordResetEmail(user.email, user.display_name, code);
  } catch (error) {
    console.error('[mailer] Failed to send reset email:', error);
  }

  res.json({ success: true });
});

app.post('/api/auth/reset-password', async (req, res) => {
  const email = normalizeEmail(req.body.email);
  const code = String(req.body.code || '').trim();
  const password = String(req.body.password || '');

  if (!email || !validateEmail(email)) {
    return res.status(422).json({ message: '邮箱格式不正确' });
  }
  if (!code || code.length !== 6) {
    return res.status(422).json({ message: '验证码格式不正确' });
  }
  if (password.length < PASSWORD_MIN_LENGTH) {
    return res
      .status(422)
      .json({ message: `密码至少需要 ${PASSWORD_MIN_LENGTH} 个字符` });
  }

  const user = db.getUserByEmail(email);
  if (!user || !user.reset_code_hash || !user.reset_code_expires) {
    return res.status(400).json({ message: '验证码无效或已过期，请重新获取' });
  }
  if (user.reset_code_expires < Date.now()) {
    db.clearPasswordResetCode(user.id);
    return res.status(400).json({ message: '验证码已过期，请重新获取' });
  }

  const match = await bcrypt.compare(code, user.reset_code_hash);
  if (!match) {
    return res.status(400).json({ message: '验证码不正确，请重新输入' });
  }

  const passwordHash = await bcrypt.hash(password, 12);
  db.updateUserPassword({ id: user.id, passwordHash });
  db.clearPasswordResetCode(user.id);

  res.json({ success: true, message: '密码已更新，请使用新密码登录。' });
});

app.post('/api/users/me', avatarUpload.single('avatarFile'), (req, res, next) => {
  const userId = req.session.userId;
  if (!userId) {
    cleanupUploadedFile(req.file);
    return res.status(401).json({ message: '未登录' });
  }

  const user = db.getUserById(userId);
  if (!user) {
    cleanupUploadedFile(req.file);
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }

  try {
    const displayName = sanitizeDisplayName(req.body.displayName || user.display_name);
    let avatarSource = String(req.body.avatarSource || user.avatar_source).toLowerCase();
    const avatarUrlInput = String(req.body.avatarUrl || '').trim();

    if (!displayName) {
      cleanupUploadedFile(req.file);
      return res.status(422).json({ message: '昵称不能为空' });
    }

    let nextAvatarUrl = user.avatar_url;

    if (avatarSource === 'url') {
      if (!avatarUrlInput || !validateHttpUrl(avatarUrlInput)) {
        cleanupUploadedFile(req.file);
        return res.status(422).json({ message: '头像链接无效' });
      }
      nextAvatarUrl = avatarUrlInput;
      if (user.avatar_source === 'upload') {
        cleanupStoredAvatar(user.avatar_url);
      }
      if (req.file) {
        cleanupUploadedFile(req.file);
      }
    } else if (avatarSource === 'upload') {
      if (req.file) {
        nextAvatarUrl = `/uploads/${req.file.filename}`;
        if (user.avatar_source === 'upload') {
          cleanupStoredAvatar(user.avatar_url);
        }
      } else if (user.avatar_source === 'upload' && user.avatar_url) {
        nextAvatarUrl = user.avatar_url;
      } else {
        return res.status(422).json({ message: '请上传头像图片' });
      }
    } else {
      avatarSource = 'gravatar';
      nextAvatarUrl = null;
      if (user.avatar_source === 'upload') {
        cleanupStoredAvatar(user.avatar_url);
      }
      if (req.file) {
        cleanupUploadedFile(req.file);
      }
    }

    db.updateUserProfile({
      id: user.id,
      displayName,
      avatarSource,
      avatarUrl: nextAvatarUrl
    });

    const updatedUser = db.getUserById(user.id);
    res.json({ success: true, user: mapUserToClient(updatedUser), roster: buildRoster() });
  } catch (error) {
    cleanupUploadedFile(req.file);
    next(error);
  }
});

app.post('/api/users/me/password', async (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }

  const oldPassword = String(req.body.oldPassword || '');
  const newPassword = String(req.body.newPassword || '');
  const confirm = String(req.body.confirmPassword || '');

  if (!oldPassword || !newPassword || !confirm) {
    return res.status(422).json({ message: '请完整填写旧密码和新密码' });
  }
  if (newPassword.length < PASSWORD_MIN_LENGTH) {
    return res
      .status(422)
      .json({ message: `新密码至少需要 ${PASSWORD_MIN_LENGTH} 个字符` });
  }
  if (newPassword !== confirm) {
    return res.status(422).json({ message: '两次输入的新密码不一致' });
  }

  const match = await bcrypt.compare(oldPassword, user.password_hash);
  if (!match) {
    return res.status(401).json({ message: '旧密码不正确' });
  }

  const passwordHash = await bcrypt.hash(newPassword, 12);
  db.updateUserPassword({ id: user.id, passwordHash });

  res.json({ success: true, message: '密码已更新，请使用新密码重新登录。' });
});

app.get('/api/stickers', (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }
  const stickers = db.getUserStickers(user.id).map(formatStickerForClient);
  res.json({ stickers });
});

app.post('/api/stickers', (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }

  const description = String(req.body.description || '').trim().slice(0, 120);
  const previewUrl = String(req.body.previewUrl || '').trim();
  const imageUrl = String(req.body.imageUrl || '').trim();

  if (!description) {
    return res.status(422).json({ message: '请填写描述' });
  }
  if (!previewUrl || !validateHttpUrl(previewUrl)) {
    return res.status(422).json({ message: '预览图链接无效' });
  }
  if (!imageUrl || !validateHttpUrl(imageUrl)) {
    return res.status(422).json({ message: '实际图链接无效' });
  }

  const result = db.addUserSticker({
    id: user.id,
    description,
    previewUrl,
    imageUrl
  });

  if (!result.success) {
    if (result.reason === 'limit') {
      return res
        .status(409)
        .json({ message: '收藏表情数量已达上限，请先删除一些再添加。' });
    }
    return res.status(500).json({ message: '保存失败，请稍后再试。' });
  }

  res
    .status(201)
    .json({
      success: true,
      sticker: formatStickerForClient(result.sticker),
      stickers: result.stickers.map(formatStickerForClient)
    });
});

app.delete('/api/stickers/:id', (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }
  const stickerId = String(req.params.id || '').trim();
  if (!stickerId) {
    return res.status(400).json({ message: '表情不存在' });
  }
  const result = db.removeUserSticker({ id: user.id, stickerId });
  if (!result.success) {
    return res.status(404).json({ message: '表情不存在' });
  }
  res.status(204).end();
});

app.post('/api/files/upload', fileUpload.single('file'), async (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }
  if (!req.file) {
    return res.status(422).json({ message: '请选择要上传的文件。' });
  }
  if (!isStorageConfigured()) {
    return res.status(503).json({ message: '文件存储尚未配置，请联系管理员。' });
  }

  const decodedName = decodeOriginalName(req.file.originalname);
  const originalName = sanitizeFileName(decodedName || '未命名文件');
  const code = generateFileCode();
  const objectKey = buildObjectKey(user.id, code, originalName);
  const contentDisposition = buildContentDisposition(originalName);

  try {
    await uploadObject({
      key: objectKey,
      body: req.file.buffer,
      contentType: req.file.mimetype || 'application/octet-stream',
      contentDisposition
    });

    const record = db.saveFileRecord({
      userId: user.id,
      code,
      objectKey,
      fileName: originalName,
      size: req.file.buffer.length,
      contentType: req.file.mimetype || 'application/octet-stream'
    });

    res.status(201).json({
      success: true,
      file: formatFileForClient(record, user.display_name),
      message: '文件上传成功。'
    });
  } catch (error) {
    console.error('[files] upload failed', error);
    res.status(500).json({ message: '文件上传失败，请稍后再试。' });
  }
});

app.get('/api/files/me', (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const user = db.getUserById(userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: '未登录' });
  }
  const records = db.getFilesByUser(user.id).map(record =>
    formatFileForClient(record, user.display_name)
  );
  res.json({ files: records });
});

app.get('/api/files/:code', (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  const code = String(req.params.code || '').trim().toUpperCase();
  if (!code) {
    return res.status(400).json({ message: '文件编码无效。' });
  }
  const record = db.getFileByCode(code);
  if (!record) {
    return res.status(404).json({ message: '文件不存在或已删除。' });
  }
  const owner = db.getUserById(record.user_id);
  res.json({
    success: true,
    file: formatFileForClient(record, owner ? owner.display_name : '未知用户')
  });
});

app.get('/api/files/:code/presign', async (req, res) => {
  const userId = req.session.userId;
  if (!userId) {
    return res.status(401).json({ message: '未登录' });
  }
  if (!isStorageConfigured()) {
    return res.status(503).json({ message: '文件存储尚未配置。' });
  }
  const code = String(req.params.code || '').trim().toUpperCase();
  if (!code) {
    return res.status(400).json({ message: '文件编码无效。' });
  }
  const record = db.getFileByCode(code);
  if (!record) {
    return res.status(404).json({ message: '文件不存在或已删除。' });
  }
  try {
    const link = await createPresignedUrl(record.object_key, 600);
    res.json({
      success: true,
      url: link.url,
      expiresIn: link.expiresIn,
      fileName: record.file_name,
      size: record.size,
      contentType: record.content_type
    });
  } catch (error) {
    console.error('[files] presign failed', error);
    res.status(500).json({ message: '获取下载链接失败，请稍后再试。' });
  }
});

app.get('/verify', (req, res) => {
  const token = String(req.query.token || '').trim();
  if (!token) {
    return res.status(400).send(renderVerificationPage('验证链接无效，请重新请求邮件。', false));
  }

  const result = db.verifyUserByToken(token);
  if (!result.success) {
    if (result.reason === 'expired') {
      return res
        .status(410)
        .send(renderVerificationPage('验证链接已过期，请重新请求验证邮件。', false));
    }
    return res
      .status(404)
      .send(renderVerificationPage('验证链接不存在或已失效。', false));
  }

  if (result.user) {
    req.session.userId = result.user.id;
  }

  const message = result.already
    ? '该邮箱已完成验证，可以直接登录。'
    : '邮箱验证成功，现在可以回到聊天室畅聊了。';
  res.send(renderVerificationPage(message, true));
});

app.use((err, req, res, next) => {
  console.error(err);
  if (err instanceof multer.MulterError) {
    return res.status(400).json({ message: err.message });
  }
  res.status(500).json({ message: '服务器开小差了，请稍后再试。' });
});

const PORT = process.env.PORT || 1145;
server.listen(PORT, () => {
  console.log(`Chat server listening on http://localhost:${PORT}`);
});

function normalizeEmail(value) {
  return String(value || '').trim().toLowerCase();
}

function validateEmail(value) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
}

function validateHttpUrl(value) {
  if (!value || value.length > 1024) return false;
  try {
    const url = new URL(value);
    return url.protocol === 'http:' || url.protocol === 'https:';
  } catch {
    return false;
  }
}

function sanitizeDisplayName(name) {
  return String(name || '').trim().slice(0, MAX_NAME_LENGTH);
}

function mapUserToClient(user) {
  return {
    id: user.id,
    email: user.email,
    displayName: user.display_name,
    avatarSource: user.avatar_source,
    avatarUrl: buildAvatarUrl(user),
    isVerified: Boolean(user.is_verified)
  };
}

function formatMessagePayload(row, mentionMap) {
  const text = typeof row.content === 'string' ? row.content : '';
  return {
    id: row.id,
    userId: row.user_id,
    author: row.display_name,
    avatarUrl: buildAvatarUrl(row),
    text,
    html: renderMarkdown(text, mentionMap),
    time: new Date(row.created_at).toISOString()
  };
}

function buildAvatarUrl(user) {
  if (user.avatar_source === 'url' && user.avatar_url) {
    return user.avatar_url;
  }
  if (user.avatar_source === 'upload' && user.avatar_url) {
    return user.avatar_url;
  }
  const hash = crypto
    .createHash('md5')
    .update(String(user.email || '').trim().toLowerCase())
    .digest('hex');
  return `https://cravatar.cn/avatar/${hash}?s=160&d=identicon`;
}

function cleanupUploadedFile(file) {
  if (!file || !file.path) return;
  fs.promises.unlink(file.path).catch(() => {});
}

function cleanupStoredAvatar(storedUrl) {
  if (!storedUrl || !storedUrl.startsWith('/uploads/')) return;
  const fileName = path.basename(storedUrl);
  const filePath = path.join(uploadsDir, fileName);
  fs.promises.unlink(filePath).catch(() => {});
}

function renderVerificationPage(message, success) {
  const title = success ? '验证成功' : '验证失败';
  const accent = success
    ? 'linear-gradient(135deg,#10b981,#14b8a6)'
    : 'linear-gradient(135deg,#f97316,#ef4444)';
  const icon = success ? '✅' : '⚠️';
  return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>${title} · 漫游聊天室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      font-family: "Noto Sans SC","PingFang SC","Microsoft YaHei",Arial,sans-serif;
      background:
        radial-gradient(120% 120% at 15% -10%, rgba(37,99,235,0.18), transparent 60%),
        radial-gradient(120% 120% at 80% 0%, rgba(124,58,237,0.24), transparent 55%),
        #eef2ff;
      margin: 0;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 32px 20px;
      color: #0f172a;
    }
    .card {
      width: min(480px, 100%);
      background: rgba(255,255,255,0.92);
      border-radius: 28px;
      box-shadow:
        0 32px 70px rgba(15,23,42,0.18),
        0 16px 30px rgba(79,70,229,0.12);
      backdrop-filter: blur(18px);
      overflow: hidden;
    }
    .banner {
      padding: 36px 40px;
      background: ${accent};
      color: #ffffff;
      font-size: 22px;
      font-weight: 600;
      letter-spacing: 0.04em;
    }
    .content {
      padding: 36px 40px 40px;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    .emoji {
      font-size: 48px;
    }
    .message {
      font-size: 16px;
      line-height: 1.7;
      color: #334155;
    }
    .actions {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
    }
    a.button {
      padding: 12px 20px;
      border-radius: 999px;
      text-decoration: none;
      color: #fff;
      font-weight: 600;
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      box-shadow: 0 16px 32px rgba(79,70,229,0.28);
    }
    a.secondary {
      background: rgba(15,23,42,0.08);
      color: #0f172a;
      box-shadow: none;
    }
  </style>
</head>
<body>
  <div class="card">
    <div class="banner">${title}</div>
    <div class="content">
      <div class="emoji">${icon}</div>
      <div class="message">${message}</div>
      <div class="actions">
        <a class="button" href="/">进入聊天室</a>
        <a class="button secondary" href="/login.html">返回登录</a>
      </div>
    </div>
  </div>
</body>
</html>`.trim();
}

function buildRoster() {
  return Array.from(userSockets.keys())
    .map(id => db.getUserById(id))
    .filter(Boolean)
    .map(mapUserToClient)
    .sort((a, b) => {
      const nameA = (a.displayName || '').toLowerCase();
      const nameB = (b.displayName || '').toLowerCase();
      return nameA.localeCompare(nameB, 'zh-Hans');
    });
}

function extractMentions(text, senderId) {
  const regex = /@([^\s@]+)(?=\s|$)/g;
  const ids = [];
  const map = new Map();
  let match;

  while ((match = regex.exec(text)) !== null) {
    const name = match[1];
    const user = db.getUserByDisplayName(name);
    if (user && user.id !== senderId && !map.has(name)) {
      map.set(name, user.id);
      ids.push(user.id);
    }
  }

  return { ids, map };
}

function parseConnectionMode(handshake) {
  const raw =
    (handshake.auth && handshake.auth.mode) ||
    (handshake.query && handshake.query.mode) ||
    '';
  return String(raw || '')
    .trim()
    .toLowerCase() === 'presence'
    ? 'presence'
    : 'chat';
}

function scheduleDeparture(userId) {
  if (disconnectTimers.has(userId)) return;
  const timer = setTimeout(() => {
    disconnectTimers.delete(userId);
    const socketsForUser = userSockets.get(userId);
    if (socketsForUser && socketsForUser.size > 0) {
      return;
    }
    userSockets.delete(userId);
    const latest = db.getUserById(userId);
    if (latest) {
      io.emit('system-message', `${latest.display_name} 离开了聊天`);
    }
    io.emit('roster-update', buildRoster());
    io.emit('online-count', userSockets.size);
  }, 3500);
  disconnectTimers.set(userId, timer);
}

function generateResetCode() {
  return crypto.randomInt(0, 1000000).toString().padStart(6, '0');
}

function formatStickerForClient(sticker) {
  return {
    id: sticker.id,
    description: sticker.description,
    previewUrl: sticker.preview_url,
    imageUrl: sticker.image_url,
    createdAt: sticker.created_at
  };
}

function generateFileCode() {
  let attempts = 0;
  do {
    let code = '';
    for (let i = 0; i < 8; i += 1) {
      const idx = crypto.randomInt(0, FILE_CODE_ALPHABET.length);
      code += FILE_CODE_ALPHABET[idx];
    }
    if (!db.getFileByCode(code)) {
      return code;
    }
    attempts += 1;
  } while (attempts < 5);
  const fallback = crypto.randomBytes(6).toString('hex').toUpperCase();
  return fallback.slice(0, 8);
}
function decodeOriginalName(name) {
  const value = typeof name === 'string' ? name : '';
  if (!value) return '';
  try {
    return Buffer.from(value, 'latin1').toString('utf8');
  } catch {
    return value;
  }
}
function sanitizeFileName(name) {
  const normalized = String(name || 'file').trim();
  const replaced = normalized
    .replace(/[/\\?%*:|"<>]/g, '_')
    .replace(/\s+/g, '_')
    .slice(0, 200);
  return replaced || 'file';
}

function buildObjectKey(userId, code, fileName) {
  const ext = path.extname(fileName);
  const stem = path.basename(fileName, ext);
  const safeStem = stem.replace(/[^a-zA-Z0-9\-_]/g, '_').slice(0, 80) || 'file';
  const safeExt = ext.replace(/[^a-zA-Z0-9.]/g, '');
  const timestamp = Date.now();
  return `files/${userId}/${code}-${timestamp}-${safeStem}${safeExt}`;
}

function buildContentDisposition(fileName) {
  const asciiName = fileName.replace(/[^ -~]/g, '_').replace(/"/g, '');
  const encoded = encodeURIComponent(fileName).replace(/['()]/g, escape).replace(/\*/g, '%2A');
  return `attachment; filename="${asciiName}"; filename*=UTF-8''${encoded}`;
}

function formatFileExtension(name) {
  const ext = path.extname(name || '').toLowerCase().replace('.', '');
  if (!ext) return null;
  return ext;
}

function formatFileForClient(record, displayName) {
  return {
    code: record.code,
    fileName: record.file_name,
    size: record.size,
    contentType: record.content_type,
    createdAt: record.created_at,
    uploader: displayName || null,
    extension: formatFileExtension(record.file_name)
  };
}


---
# storage.js

const fs = require('fs');
const path = require('path');
const {
  S3Client,
  PutObjectCommand,
  GetObjectCommand
} = require('@aws-sdk/client-s3');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');

let clientCache = null;
let configCache = null;
let configLoaded = false;

function readConfigFile() {
  if (configLoaded) {
    return configCache;
  }
  configLoaded = true;
  const configPath = path.join(__dirname, 'config', 'r2.json');
  try {
    const raw = fs.readFileSync(configPath, 'utf8');
    configCache = JSON.parse(raw);
  } catch {
    configCache = null;
  }
  return configCache;
}

function resolveConfig() {
  const fileConfig = readConfigFile() || {};
  const accountId =
    process.env.R2_ACCOUNT_ID || process.env.CF_R2_ACCOUNT_ID || fileConfig.accountId || '';
  const accessKeyId =
    process.env.R2_ACCESS_KEY_ID || process.env.CF_R2_ACCESS_KEY_ID || fileConfig.accessKeyId || '';
  const secretAccessKey =
    process.env.R2_SECRET_ACCESS_KEY ||
    process.env.CF_R2_SECRET_ACCESS_KEY ||
    fileConfig.secretAccessKey ||
    '';
  const bucket = process.env.R2_BUCKET || fileConfig.bucket || '';
  const publicBaseUrl = process.env.R2_PUBLIC_BASE_URL || fileConfig.publicBaseUrl || '';

  return { accountId, accessKeyId, secretAccessKey, bucket, publicBaseUrl };
}

function isConfigured() {
  const cfg = resolveConfig();
  return Boolean(cfg.accountId && cfg.accessKeyId && cfg.secretAccessKey && cfg.bucket);
}

function getClient() {
  if (!isConfigured()) {
    return null;
  }
  if (clientCache) {
    return clientCache;
  }
  const cfg = resolveConfig();
  clientCache = {
    client: new S3Client({
      region: 'auto',
      endpoint: `https://${cfg.accountId}.r2.cloudflarestorage.com`,
      credentials: {
        accessKeyId: cfg.accessKeyId,
        secretAccessKey: cfg.secretAccessKey
      }
    }),
    bucket: cfg.bucket,
    publicBaseUrl: cfg.publicBaseUrl || ''
  };
  return clientCache;
}

async function uploadObject({ key, body, contentType, contentDisposition }) {
  const ctx = getClient();
  if (!ctx) {
    throw new Error(
      'R2 对象存储未配置，请在 config/r2.json 或环境变量中填写账号、密钥和桶名。'
    );
  }
  const command = new PutObjectCommand({
    Bucket: ctx.bucket,
    Key: key,
    Body: body,
    ContentType: contentType || 'application/octet-stream',
    ContentDisposition: contentDisposition || undefined,
    CacheControl: 'max-age=31536000, immutable'
  });
  await ctx.client.send(command);
  return { key };
}

async function createPresignedUrl(key, expiresIn = 3600) {
  const ctx = getClient();
  if (!ctx) {
    throw new Error('R2 对象存储未配置。');
  }
  const command = new GetObjectCommand({
    Bucket: ctx.bucket,
    Key: key
  });
  const url = await getSignedUrl(ctx.client, command, { expiresIn });
  return { url, expiresIn };
}

module.exports = {
  isConfigured,
  uploadObject,
  createPresignedUrl
};


---
# public\download-manager.js

(() => {
  const STORAGE_KEY = 'chat-download-settings';
  const DEFAULTS = {
    enabled: true,
    concurrency: 4,
    chunkSize: 2 * 1024 * 1024
  };
  let cache = null;

  function parseSettings(raw) {
    if (!raw) return { ...DEFAULTS };
    try {
      const parsed = JSON.parse(raw);
      return {
        enabled: typeof parsed.enabled === 'boolean' ? parsed.enabled : DEFAULTS.enabled,
        concurrency: clamp(
          Number(parsed.concurrency) || DEFAULTS.concurrency,
          1,
          8
        ),
        chunkSize: clamp(
          Number(parsed.chunkSize) || DEFAULTS.chunkSize,
          128 * 1024,
          8 * 1024 * 1024
        )
      };
    } catch {
      return { ...DEFAULTS };
    }
  }

  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  function load() {
    if (cache) return { ...cache };
    const raw = typeof localStorage !== 'undefined' ? localStorage.getItem(STORAGE_KEY) : null;
    cache = parseSettings(raw);
    return { ...cache };
  }

  function save(next) {
    cache = {
      ...load(),
      ...next
    };
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(cache));
    } catch {
      /* ignore */
    }
    window.dispatchEvent(new CustomEvent('downloadsettingschange', { detail: { ...cache } }));
    return { ...cache };
  }

  function formatBytes(bytes) {
    const value = Number(bytes);
    if (!Number.isFinite(value)) return '未知大小';
    if (value < 1024) return `${value} B`;
    const units = ['KB', 'MB', 'GB', 'TB'];
    let idx = -1;
    let result = value;
    do {
      result /= 1024;
      idx += 1;
    } while (result >= 1024 && idx < units.length - 1);
    return `${result.toFixed(result >= 100 ? 0 : result >= 10 ? 1 : 2)} ${units[idx]}`;
  }

  class HighSpeedDownloader {
    constructor(options) {
      const settings = load();
      this.url = options.url;
      this.size = Number(options.size) || 0;
      this.fileName = options.fileName || 'download.bin';
      this.contentType = options.contentType || 'application/octet-stream';
      this.concurrency = clamp(
        Number(options.concurrency) || settings.concurrency || 4,
        1,
        8
      );
      this.chunkSize = clamp(
        Number(options.chunkSize) || settings.chunkSize || DEFAULTS.chunkSize,
        128 * 1024,
        8 * 1024 * 1024
      );
      this.onProgress = typeof options.onProgress === 'function' ? options.onProgress : () => {};
      this.controller = new AbortController();
      this.retryCount = 3;
      this.baseRetryDelay = 600;
    }

    static isSupported() {
      return typeof fetch === 'function' && typeof Blob !== 'undefined';
    }

    static async downloadFromSignedUrl(meta) {
      const settings = load();
      const downloader = new HighSpeedDownloader({
        url: meta.url,
        size: meta.size,
        fileName: meta.fileName,
        contentType: meta.contentType,
        concurrency: settings.concurrency,
        chunkSize: settings.chunkSize
      });
      return downloader.start();
    }

    static async downloadFromUrl(url, options = {}) {
      const settings = load();
      const downloader = new HighSpeedDownloader({
        url,
        size: options.size || 0,
        fileName: options.fileName || deriveFileName(url),
        contentType: options.contentType,
        concurrency: settings.concurrency,
        chunkSize: settings.chunkSize
      });
      return downloader.start();
    }

    async start() {
      if (!HighSpeedDownloader.isSupported()) {
        throw new Error('当前环境不支持 fetch / Blob，无法使用高速下载。');
      }
      const size = await this.ensureSize();
      if (!size || size < this.chunkSize || this.concurrency === 1) {
        return this.singleFetch();
      }
      return this.multiFetch(size);
    }

    async ensureSize() {
      if (this.size > 0) return this.size;
      try {
        const res = await fetch(this.url, {
          method: 'HEAD',
          signal: this.controller.signal
        });
        if (!res.ok) return 0;
        const len = res.headers.get('content-length');
        const parsed = Number(len);
        this.contentType =
          this.contentType || res.headers.get('content-type') || 'application/octet-stream';
        if (Number.isFinite(parsed) && parsed > 0) {
          this.size = parsed;
          return parsed;
        }
      } catch {
        /* ignore */
      }
      return 0;
    }

    async singleFetch() {
      const res = await fetch(this.url, {
        method: 'GET',
        signal: this.controller.signal
      });
      if (!res.ok) {
        throw new Error(`下载失败：HTTP ${res.status}`);
      }
      const blob = await res.blob();
      const finalBlob =
        this.contentType && this.contentType !== blob.type
          ? new Blob([blob], { type: this.contentType })
          : blob;
      triggerDownload(finalBlob, this.fileName);
      return true;
    }

    async multiFetch(size) {
      const totalChunks = Math.ceil(size / this.chunkSize);
      const ranges = [];
      for (let i = 0; i < totalChunks; i += 1) {
        const start = i * this.chunkSize;
        const end = Math.min(size - 1, start + this.chunkSize - 1);
        ranges.push({ index: i, start, end });
      }
      const results = new Array(totalChunks);
      let completed = 0;

      const queue = ranges.slice();
      const workers = new Array(Math.min(this.concurrency, totalChunks))
        .fill(null)
        .map(() =>
          this.spawnWorker(queue, results, () => {
            completed += 1;
            this.onProgress({
              completed,
              total: totalChunks,
              percent: Math.min(100, Math.round((completed / totalChunks) * 100))
            });
          })
        );

      await Promise.all(workers);

      const blob = new Blob(results, { type: this.contentType });
      triggerDownload(blob, this.fileName);
      return true;
    }

    async spawnWorker(queue, results, report) {
      while (queue.length) {
        const task = queue.shift();
        if (!task) break;
        const buffer = await this.fetchRangeWithRetry(task.start, task.end);
        results[task.index] = buffer;
        report();
      }
    }

    async fetchRangeWithRetry(start, end, attempt = 1) {
      try {
        return await this.fetchRange(start, end);
      } catch (error) {
        if (attempt >= this.retryCount) {
          throw error;
        }
        const delay = this.baseRetryDelay * attempt;
        await new Promise(resolve => setTimeout(resolve, delay));
        return this.fetchRangeWithRetry(start, end, attempt + 1);
      }
    }

    async fetchRange(start, end) {
      const res = await fetch(this.url, {
        method: 'GET',
        headers: { Range: `bytes=${start}-${end}` },
        signal: this.controller.signal
      });

      if (res.status === 206) {
        const buf = await res.arrayBuffer();
        if (buf.byteLength === end - start + 1) return buf;
        throw new Error('服务器返回的分片长度不匹配。');
      }

      if (res.ok && res.status === 200) {
        const buf = await res.arrayBuffer();
        if (buf.byteLength === end - start + 1) return buf;
      }

      throw new Error(`服务器不支持 Range 请求或分片响应异常（HTTP ${res.status}）。`);
    }

    cancel() {
      this.controller.abort();
    }
  }

  function deriveFileName(url) {
    try {
      const parsed = new URL(url);
      const base = parsed.pathname.split('/').pop() || 'download.bin';
      return decodeURIComponent(base);
    } catch {
      return 'download.bin';
    }
  }

  function triggerDownload(blob, fileName) {
    const url = URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = fileName;
    anchor.rel = 'noopener';
    anchor.style.display = 'none';
    document.body.appendChild(anchor);
    anchor.click();
    document.body.removeChild(anchor);
    URL.revokeObjectURL(url);
  }

  window.DownloadSettings = {
    get: load,
    set: save,
    formatBytes
  };

  window.HighSpeedDownloader = HighSpeedDownloader;
})();


---
# public\forgot-password.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>找回密码 · 漫游聊天室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    (function () {
      try {
        var stored = localStorage.getItem('chat-theme');
        var theme = stored === 'dark' || stored === 'light'
          ? stored
          : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.dataset.theme = theme;
      } catch (e) {
        document.documentElement.dataset.theme = 'light';
      }
    })();
  </script>
  <style>
    :root {
      color-scheme: light dark;
      font-family: "Noto Sans SC","PingFang SC","Microsoft YaHei","Helvetica Neue",Arial,sans-serif;
      --bg: linear-gradient(180deg,#eef2ff,#f5f3ff);
      --bg-accent1: rgba(37,99,235,0.18);
      --bg-accent2: rgba(124,58,237,0.2);
      --card-bg: rgba(255,255,255,0.92);
      --card-shadow1: rgba(15,23,42,0.16);
      --card-shadow2: rgba(79,70,229,0.1);
      --text: #0f172a;
      --text-muted: #475569;
      --step-active: linear-gradient(135deg,#2563eb,#7c3aed);
      --step-muted: rgba(148,163,184,0.28);
      --input-bg: rgba(255,255,255,0.86);
      --input-border: rgba(148,163,184,0.4);
      --button-bg: linear-gradient(135deg,#2563eb,#7c3aed);
      --button-shadow1: rgba(79,70,229,0.32);
      --button-shadow2: rgba(37,99,235,0.18);
    }
    :root[data-theme="dark"] {
      --bg: linear-gradient(180deg,#0f172a,#111827);
      --bg-accent1: rgba(56,189,248,0.12);
      --bg-accent2: rgba(139,92,246,0.12);
      --card-bg: rgba(15,23,42,0.85);
      --card-shadow1: rgba(8,145,178,0.24);
      --card-shadow2: rgba(59,130,246,0.18);
      --text: #e2e8f0;
      --text-muted: #94a3b8;
      --step-muted: rgba(59,130,246,0.35);
      --input-bg: rgba(30,41,59,0.78);
      --input-border: rgba(148,163,184,0.35);
      --button-shadow1: rgba(59,130,246,0.42);
      --button-shadow2: rgba(30,64,175,0.35);
    }
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: clamp(1.6rem, 4vw, 3.4rem);
      background:
        radial-gradient(120% 120% at 20% -10%, var(--bg-accent1), transparent 55%),
        radial-gradient(120% 120% at 82% 0%, var(--bg-accent2), transparent 60%),
        var(--bg);
      color: var(--text);
      transition: background 0.3s ease, color 0.3s ease;
    }
    .card {
      width: min(620px, 100%);
      background: var(--card-bg);
      border-radius: 32px;
      box-shadow:
        0 32px 72px var(--card-shadow1),
        0 18px 36px var(--card-shadow2);
      backdrop-filter: blur(24px);
      padding: clamp(2rem, 4vw, 3rem);
      display: flex;
      flex-direction: column;
      gap: clamp(1.6rem, 3vw, 2.4rem);
      transition: background 0.3s ease, box-shadow 0.3s ease;
    }
    header h1 {
      font-size: clamp(1.9rem, 3vw, 2.2rem);
      font-weight: 700;
      letter-spacing: 0.03em;
    }
    header p {
      margin-top: 0.5rem;
      color: var(--text-muted);
      line-height: 1.6;
    }
    .steps {
      display: flex;
      gap: 1.1rem;
      flex-wrap: wrap;
    }
    .step {
      flex: 1;
      min-width: 140px;
      display: flex;
      align-items: center;
      gap: 0.7rem;
      padding: 0.75rem 1rem;
      border-radius: 18px;
      background: var(--step-muted);
      color: rgba(15,23,42,0.65);
      font-weight: 600;
    }
    :root[data-theme="dark"] .step {
      color: rgba(226,232,240,0.7);
    }
    .step.active {
      background: var(--step-active);
      color: #ffffff;
      box-shadow: 0 16px 32px rgba(79,70,229,0.35);
    }
    .step span {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 28px;
      height: 28px;
      border-radius: 50%;
      background: rgba(255,255,255,0.35);
      color: #1d4ed8;
    }
    .step.active span {
      background: rgba(255,255,255,0.2);
      color: #ffffff;
    }
    form {
      display: grid;
      gap: 1.4rem;
    }
    label {
      display: flex;
      flex-direction: column;
      gap: 0.55rem;
      font-weight: 600;
      color: var(--text);
      font-size: 1rem;
    }
    input[type="email"],
    input[type="text"],
    input[type="password"] {
      width: 100%;
      padding: 0.95rem 1.15rem;
      border-radius: 18px;
      border: 1px solid var(--input-border);
      background: var(--input-bg);
      font: inherit;
      color: var(--text);
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }
    input:focus {
      outline: none;
      border-color: rgba(79,70,229,0.9);
      box-shadow: 0 0 0 4px rgba(79,70,229,0.18);
      background: rgba(255,255,255,0.97);
    }
    :root[data-theme="dark"] input:focus {
      background: rgba(15,23,42,0.9);
    }
    .code-field {
      display: flex;
      gap: 0.8rem;
    }
    .code-field button {
      white-space: nowrap;
    }
    .actions {
      display: flex;
      flex-direction: column;
      gap: 1.1rem;
      margin-top: 0.4rem;
    }
    button {
      border: none;
      cursor: pointer;
    }
    button.primary {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.95rem 1.4rem;
      border-radius: 999px;
      background: var(--button-bg);
      color: #ffffff;
      font-weight: 600;
      font-size: 1rem;
      box-shadow:
        0 18px 34px var(--button-shadow1),
        0 12px 24px var(--button-shadow2);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    button.primary:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow:
        0 22px 40px rgba(79,70,229,0.38),
        0 14px 28px rgba(37,99,235,0.24);
    }
    button.primary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
    }
    button.secondary {
      background: none;
      color: #2563eb;
      font-weight: 600;
      text-decoration: none;
    }
    button.secondary:hover {
      text-decoration: underline;
    }
    .message {
      display: none;
      padding: 0.85rem 1rem;
      border-radius: 16px;
      font-size: 0.95rem;
      line-height: 1.5;
    }
    .message.show {
      display: block;
    }
    .message.error {
      background: rgba(248,113,113,0.12);
      color: #b91c1c;
      border: 1px solid rgba(239,68,68,0.25);
    }
    .message.success {
      background: rgba(34,197,94,0.12);
      color: #047857;
      border: 1px solid rgba(16,185,129,0.2);
    }
    @media (max-width: 520px) {
      .code-field {
        flex-direction: column;
        align-items: stretch;
      }
    }
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
  </style>
</head>
<body>
  <div class="card">
    <header>
      <h1>找回密码</h1>
      <p>输入注册邮箱获取验证码，再输入验证码和新密码完成重置。</p>
    </header>

    <div class="steps">
      <div class="step active" id="step-email">
        <span>1</span>
        输入邮箱
      </div>
      <div class="step" id="step-reset">
        <span>2</span>
        验证码与新密码
      </div>
    </div>

    <div id="message" class="message" role="alert"></div>

    <form id="email-form">
      <label>
        注册邮箱
        <input type="email" name="email" id="email-input" required placeholder="you@example.com" autocomplete="email">
      </label>
      <div class="actions">
        <button type="submit" class="primary" id="email-submit">发送验证码</button>
        <button type="button" class="secondary" id="back-login-email">返回登录</button>
      </div>
    </form>

    <form id="reset-form" style="display:none;">
      <label>
        验证码
        <div class="code-field">
          <input type="text" name="code" id="code-input" required maxlength="6" inputmode="numeric" pattern="[0-9]{6}" placeholder="请输入六位验证码">
          <button type="button" class="primary" id="resend-btn" style="padding:0.85rem 1rem;">重新发送</button>
        </div>
      </label>

      <label>
        新密码
        <input type="password" name="password" id="password-input" required minlength="8" autocomplete="new-password" placeholder="至少 8 个字符">
      </label>

      <label>
        确认新密码
        <input type="password" name="confirm" id="confirm-input" required minlength="8" autocomplete="new-password" placeholder="再次输入新密码">
      </label>

      <div class="actions">
        <button type="submit" class="primary" id="reset-submit">重置密码</button>
        <button type="button" class="secondary" id="back-login-reset">返回登录</button>
      </div>
    </form>
  </div>

  <script src="/theme.js"></script>
  <script>
    Theme.init();
  </script>
  <script>
    const emailForm = document.getElementById('email-form');
    const resetForm = document.getElementById('reset-form');
    const messageEl = document.getElementById('message');
    const stepEmail = document.getElementById('step-email');
    const stepReset = document.getElementById('step-reset');
    const emailInput = document.getElementById('email-input');
    const codeInput = document.getElementById('code-input');
    const passwordInput = document.getElementById('password-input');
    const confirmInput = document.getElementById('confirm-input');
    const emailSubmit = document.getElementById('email-submit');
    const resetSubmit = document.getElementById('reset-submit');
    const resendBtn = document.getElementById('resend-btn');
    const backLoginEmail = document.getElementById('back-login-email');
    const backLoginReset = document.getElementById('back-login-reset');

    let currentEmail = '';
    let cooldown = 0;
    let timer = null;

    backLoginEmail.addEventListener('click', () => {
      window.location.replace('/login.html');
    });

    backLoginReset.addEventListener('click', () => {
      window.location.replace('/login.html');
    });

    emailForm.addEventListener('submit', async event => {
      event.preventDefault();
      hideMessage();

      const email = emailInput.value.trim().toLowerCase();
      if (!email) {
        return showMessage('请输入注册邮箱。', 'error');
      }

      try {
        setEmailSubmitting(true);
        const res = await fetch('/api/auth/forgot-password', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ email })
        });
        const data = await res.json();

        if (!res.ok || !data.success) {
          showMessage(data.message || '发送失败，请稍后再试。', 'error');
          setEmailSubmitting(false);
          return;
        }

        currentEmail = email;
        showMessage('验证码已发送到邮箱，请在 15 分钟内完成验证。', 'success');
        stepEmail.classList.remove('active');
        stepReset.classList.add('active');
        emailForm.style.display = 'none';
        resetForm.style.display = 'grid';
        startCooldown();
        setEmailSubmitting(false);
      } catch (error) {
        console.error(error);
        showMessage('服务器开小差了，请稍后再试。', 'error');
        setEmailSubmitting(false);
      }
    });

    resetForm.addEventListener('submit', async event => {
      event.preventDefault();
      hideMessage();

      const code = codeInput.value.trim();
      const password = passwordInput.value.trim();
      const confirm = confirmInput.value.trim();

      if (!code || code.length !== 6 || !/^[0-9]+$/.test(code)) {
        return showMessage('请输入 6 位数字验证码。', 'error');
      }
      if (!password || password.length < 8) {
        return showMessage('新密码至少需要 8 个字符。', 'error');
      }
      if (password !== confirm) {
        return showMessage('两次输入的新密码不一致。', 'error');
      }

      try {
        setResetSubmitting(true);
        const res = await fetch('/api/auth/reset-password', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ email: currentEmail, code, password })
        });
        const data = await res.json();

        if (!res.ok || !data.success) {
          showMessage(data.message || '重置失败，请稍后再试。', 'error');
          setResetSubmitting(false);
          return;
        }

        showMessage('密码已重置，请使用新密码登录。', 'success');
        setResetSubmitting(false);
        setTimeout(() => window.location.replace('/login.html'), 1200);
      } catch (error) {
        console.error(error);
        showMessage('服务器开小差了，请稍后再试。', 'error');
        setResetSubmitting(false);
      }
    });

    resendBtn.addEventListener('click', () => {
      if (cooldown > 0 || !currentEmail) return;
      startCooldown();
      fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ email: currentEmail })
      })
        .then(res => res.json())
        .then(data => {
          if (!data.success) {
            showMessage(data.message || '发送失败，请稍后再试。', 'error');
          } else {
            showMessage('验证码已重新发送，请查收邮箱。', 'success');
          }
        })
        .catch(() => {
          showMessage('发送失败，请稍后再试。', 'error');
        });
    });

    function startCooldown() {
      cooldown = 60;
      updateResend();
      if (timer) clearInterval(timer);
      timer = setInterval(() => {
        cooldown -= 1;
        if (cooldown <= 0) {
          clearInterval(timer);
          cooldown = 0;
        }
        updateResend();
      }, 1000);
    }

    function updateResend() {
      resendBtn.disabled = cooldown > 0;
      resendBtn.textContent = cooldown > 0 ? `重新发送 (${cooldown}s)` : '重新发送';
    }

    function showMessage(text, type) {
      messageEl.textContent = text;
      messageEl.className = `message show ${type}`;
    }

    function hideMessage() {
      messageEl.textContent = '';
      messageEl.className = 'message';
    }

    function setEmailSubmitting(active) {
      emailSubmit.disabled = active;
      emailSubmit.textContent = active ? '发送中…' : '发送验证码';
    }

    function setResetSubmitting(active) {
      resetSubmit.disabled = active;
      resetSubmit.textContent = active ? '提交中…' : '重置密码';
    }
  </script>
</body>
</html>


---
# public\index.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>漫游聊天室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    (function () {
      try {
        var stored = localStorage.getItem('chat-theme');
        var theme = stored === 'dark' || stored === 'light'
          ? stored
          : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.dataset.theme = theme;
      } catch (e) {
        document.documentElement.dataset.theme = 'light';
      }
    })();
  </script>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css"
    integrity="sha384-EkMgJtPUE2KXllzN3PI5F4FbtjVfxzFH4DpTYshUldM6V0F9NBfG6B+Jd0LBX9t3"
    crossorigin="anonymous"
  >
  <style>
    :root {
      color-scheme: light dark;
      font-family: "Noto Sans SC","PingFang SC","Microsoft YaHei","Helvetica Neue",Arial,sans-serif;
      --bg: linear-gradient(180deg,#eef2ff,#f5f3ff);
      --bg-accent1: rgba(37,99,235,0.18);
      --bg-accent2: rgba(124,58,237,0.22);
      --text: #0f172a;
      --text-muted: #64748b;
      --card-bg: rgba(255,255,255,0.9);
      --card-shadow1: rgba(15,23,42,0.18);
      --card-shadow2: rgba(79,70,229,0.12);
      --bubble-bg: rgba(255,255,255,0.86);
      --bubble-text: #0f172a;
      --bubble-shadow: rgba(15,23,42,0.16);
      --bubble-self-bg: linear-gradient(135deg,#2563eb,#7c3aed 90%);
      --bubble-self-text: #ffffff;
      --bubble-self-shadow: rgba(59,130,246,0.35);
      --form-bg: rgba(15,23,42,0.05);
      --form-border: rgba(15,23,42,0.08);
      --textarea-bg: rgba(255,255,255,0.82);
      --textarea-text: #111827;
      --textarea-border: rgba(148,163,184,0.38);
      --mention-bg: rgba(59,130,246,0.18);
      --mention-text: #1d4ed8;
      --code-bg: rgba(15,23,42,0.08);
      --code-text: #1f2937;
      --mark-bg: rgba(246,189,96,0.3);
      --header-bg: linear-gradient(135deg, rgba(37,99,235,0.95), rgba(124,58,237,0.92));
      --header-text: #ffffff;
      --banner-bg: rgba(15,23,42,0.04);
      --banner-border: rgba(15,23,42,0.06);
      --banner-text: #1f2937;
      --banner-muted: #475569;
      --input-disabled-bg: rgba(15,23,42,0.08);
      --input-disabled-text: rgba(15,23,42,0.4);
      --tool-bg: rgba(37,99,235,0.1);
      --tool-text: #1d4ed8;
      --popover-bg: rgba(255,255,255,0.9);
      --popover-border: rgba(148,163,184,0.25);
      --popover-shadow1: rgba(15,23,42,0.16);
      --popover-shadow2: rgba(79,70,229,0.18);
      --dialog-bg: rgba(255,255,255,0.92);
      --dialog-shadow1: rgba(15,23,42,0.28);
      --dialog-shadow2: rgba(79,70,229,0.18);
      --emoji-columns: 11;
      --sticker-columns: 6;
    }
    :root[data-theme="dark"] {
      --bg: linear-gradient(180deg,#0f172a,#111827);
      --bg-accent1: rgba(56,189,248,0.12);
      --bg-accent2: rgba(139,92,246,0.12);
      --text: #e2e8f0;
      --text-muted: #94a3b8;
      --card-bg: rgba(15,23,42,0.82);
      --card-shadow1: rgba(8,145,178,0.24);
      --card-shadow2: rgba(59,130,246,0.22);
      --bubble-bg: rgba(30,41,59,0.82);
      --bubble-text: #e2e8f0;
      --bubble-shadow: transparent;
      --bubble-self-bg: linear-gradient(135deg,#1d4ed8,#7c3aed 90%);
      --bubble-self-text: #f8fafc;
      --bubble-self-shadow: transparent;
      --form-bg: rgba(15,23,42,0.52);
      --form-border: rgba(148,163,184,0.18);
      --textarea-bg: rgba(15,23,42,0.7);
      --textarea-text: #f8fafc;
      --textarea-border: rgba(100,116,139,0.65);
      --mention-bg: rgba(37,99,235,0.45);
      --mention-text: #bfdbfe;
      --code-bg: rgba(15,118,110,0.28);
      --code-text: #f8fafc;
      --mark-bg: rgba(250,204,21,0.32);
      --header-bg: linear-gradient(135deg, rgba(37,99,235,0.6), rgba(124,58,237,0.58));
      --header-text: #f8fafc;
      --banner-bg: rgba(148,163,184,0.12);
      --banner-border: rgba(148,163,184,0.18);
      --banner-text: #e2e8f0;
      --banner-muted: #cbd5f5;
      --input-disabled-bg: rgba(148,163,184,0.18);
      --input-disabled-text: rgba(148,163,184,0.55);
      --tool-bg: rgba(37,99,235,0.25);
      --tool-text: #bfdbfe;
      --popover-bg: rgba(30,41,59,0.88);
      --popover-border: rgba(148,163,184,0.24);
      --popover-shadow1: rgba(8,145,178,0.28);
      --popover-shadow2: rgba(59,130,246,0.24);
      --dialog-bg: rgba(15,23,42,0.92);
      --dialog-shadow1: rgba(8,145,178,0.32);
      --dialog-shadow2: rgba(59,130,246,0.26);
    }
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    .bubble img {
      max-width: 100%;
      height: auto;
      display: block;
    }
    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: clamp(1.2rem, 4vw, 3rem);
      background:
        radial-gradient(120% 120% at 15% -10%, var(--bg-accent1), transparent 60%),
        radial-gradient(120% 120% at 85% 0%, var(--bg-accent2), transparent 55%),
        var(--bg);
      color: var(--text);
      transition: background 0.3s ease, color 0.3s ease;
    }
    .page {
      width: min(1024px, 100%);
    }
    .bubble pre {
      margin: 0.7rem 0;
      padding: 0.8rem 1rem;
      border-radius: 14px;
      background: var(--code-bg);
      border: 1px solid rgba(148,163,184,0.18);
      overflow-x: auto;
      font-size: 0.93em;
      line-height: 1.45;
    }
    .message.self .bubble pre {
      background: rgba(255,255,255,0.1);
      border-color: rgba(255,255,255,0.15);
    }
    .bubble .mention {
      display: inline-flex;
      align-items: center;
      padding: 0.1rem 0.45rem;
      margin: 0 0.05rem;
      border-radius: 999px;
      background: var(--mention-bg);
      color: var(--mention-text);
      font-weight: 600;
    }
    .message.self .bubble .mention {
      background: rgba(255,255,255,0.25);
      color: #fff;
    }
    .mention-popover {
      position: absolute;
      z-index: 9999;
      min-width: 220px;
      max-height: 240px;
      overflow-y: auto;
      padding: 0.4rem;
      border-radius: 16px;
      background: var(--card-bg);
      box-shadow:
        0 18px 42px var(--card-shadow1),
        0 10px 20px var(--card-shadow2);
      border: 1px solid rgba(148,163,184,0.25);
      display: none;
    }
    .mention-popover ul {
      list-style: none;
      padding: 0;
      margin: 0;
      display: grid;
      gap: 0.35rem;
    }
    .mention-popover button {
      width: 100%;
      text-align: left;
      border: none;
      background: rgba(37,99,235,0.08);
      color: var(--text);
      padding: 0.55rem 0.75rem;
      border-radius: 12px;
      font: inherit;
      cursor: pointer;
    }
    .mention-popover button.is-active {
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #fff;
      box-shadow: 0 12px 24px rgba(79,70,229,0.18);
    }
    .chat-card {
      display: flex;
      flex-direction: column;
      height: clamp(560px, 88vh, 760px);
      background: var(--card-bg);
      border-radius: 32px;
      box-shadow:
        0 32px 70px var(--card-shadow1),
        0 16px 30px var(--card-shadow2);
      backdrop-filter: blur(24px);
      overflow: hidden;
      transition: background 0.3s ease, box-shadow 0.3s ease;
    }
    .chat-header {
      padding: clamp(1.2rem, 3vw, 2rem);
      background: var(--header-bg);
      color: var(--header-text);
      position: relative;
      display: grid;
      gap: clamp(0.6rem, 2vw, 1.2rem);
    }
    .chat-header::after {
      content: "";
      position: absolute;
      inset: -60% -40% auto auto;
      width: clamp(220px, 40vw, 360px);
      height: clamp(220px, 40vw, 360px);
      background: radial-gradient(circle, rgba(255,255,255,0.28), transparent 70%);
      opacity: 0.7;
      pointer-events: none;
    }
    .header-row {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .brand {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      font-size: clamp(1.3rem, 3vw, 1.7rem);
      font-weight: 600;
      letter-spacing: 0.04em;
    }
    .brand-icon {
      width: 18px;
      height: 18px;
      border-radius: 999px;
      background: rgba(255,255,255,0.8);
      box-shadow:
        0 0 0 8px rgba(255,255,255,0.18),
        0 10px 24px rgba(15,23,42,0.3);
    }
    .header-meta {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      flex-wrap: wrap;
      font-size: 0.92rem;
      letter-spacing: 0.04em;
      color: rgba(255,255,255,0.85);
    }
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      flex-wrap: wrap;
    }
    .user-chip {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.4rem 0.8rem 0.4rem 0.4rem;
      border-radius: 999px;
      background: rgba(15,23,42,0.2);
      backdrop-filter: blur(6px);
    }
    .user-chip img {
      width: 38px;
      height: 38px;
      border-radius: 50%;
      object-fit: cover;
      box-shadow: 0 12px 24px rgba(15,23,42,0.28);
    }
    .user-info {
      display: flex;
      flex-direction: column;
      line-height: 1.1;
    }
    .user-info span {
      font-weight: 600;
      font-size: 1rem;
      color: var(--header-text);
    }
    .user-info button {
      background: none;
      border: none;
      color: rgba(255,255,255,0.78);
      font-size: 0.82rem;
      text-decoration: underline;
      cursor: pointer;
      padding: 0;
    }
    .logout-button {
      border: none;
      background: rgba(15,23,42,0.3);
      color: var(--header-text);
      font-weight: 600;
      padding: 0.55rem 1.3rem;
      border-radius: 999px;
      cursor: pointer;
      transition: background 0.2s ease, transform 0.2s ease;
    }
    .logout-button:hover {
      background: rgba(15,23,42,0.42);
      transform: translateY(-1px);
    }
    .verification-banner {
      padding: 0.9rem clamp(1.1rem, 3vw, 1.6rem);
      background: var(--banner-bg);
      border-bottom: 1px solid var(--banner-border);
    }
    .verification-banner .banner-body {
      display: flex;
      align-items: center;
      gap: 0.9rem;
      color: var(--banner-text);
      flex-wrap: wrap;
    }
    .verification-banner .icon {
      width: 42px;
      height: 42px;
      display: grid;
      place-items: center;
      font-size: 1.5rem;
      border-radius: 16px;
      background: rgba(37,99,235,0.12);
    }
    .verification-banner strong {
      font-size: 1rem;
      display: block;
      margin-bottom: 0.2rem;
    }
    .verification-banner p {
      margin: 0;
      font-size: 0.92rem;
      color: var(--banner-muted);
    }
    .verification-actions {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin-left: auto;
      flex-wrap: wrap;
    }
    .banner-link,
    .banner-button {
      color: #2563eb;
      font-weight: 600;
      text-decoration: none;
      border: none;
      background: none;
      cursor: pointer;
      padding: 0.35rem 0.6rem;
      border-radius: 999px;
    }
    .banner-button {
      background: rgba(37,99,235,0.14);
      color: #1d4ed8;
      transition: background 0.2s ease;
    }
    .banner-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    .banner-button:hover:not(:disabled) {
      background: rgba(37,99,235,0.22);
    }
    .messages {
      flex: 1;
      padding: clamp(1rem, 3vw, 1.8rem);
      display: flex;
      flex-direction: column;
      gap: 1.05rem;
      overflow-y: auto;
      list-style: none;
      background: linear-gradient(180deg, rgba(255,255,255,0.6), rgba(255,255,255,0.32));
    }
    :root[data-theme="dark"] .messages {
      background: linear-gradient(180deg, rgba(30,41,59,0.75), rgba(17,24,39,0.72));
    }
    .messages::-webkit-scrollbar {
      width: 10px;
    }
    .messages::-webkit-scrollbar-thumb {
      background: rgba(148,163,184,0.45);
      border-radius: 99px;
    }
    .message {
      display: flex;
      align-items: flex-start;
      gap: 0.9rem;
      animation: message-in 0.2s ease forwards;
    }
    .message.system {
      justify-content: center;
      color: var(--text-muted);
      font-style: italic;
    }
    .message.system .bubble {
      background: rgba(255,255,255,0.52);
      box-shadow: none;
      font-style: italic;
      color: #4338ca;
    }
    :root[data-theme="dark"] .message.system .bubble {
      background: rgba(37,99,235,0.35);
      color: #e0f2fe;
    }
    .message.system .avatar,
    .message.system .body .meta {
      display: none;
    }
    .message.self {
      flex-direction: row-reverse;
    }
    .message .avatar {
      width: 46px;
      height: 46px;
      border-radius: 16px;
      background: rgba(15,23,42,0.06);
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 14px 28px rgba(15,23,42,0.18);
      overflow: hidden;
    }
    :root[data-theme="dark"] .message .avatar {
      background: rgba(30,41,59,0.8);
      box-shadow: 0 14px 32px rgba(14,165,233,0.18);
    }
    .message .avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .message .body {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
      max-width: min(75vw, 560px);
    }
    .message.self .body {
      align-self: flex-end;
      align-items: flex-end;
    }
    .message .meta {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      font-size: 0.78rem;
      color: var(--text-muted);
    }
    .message.self .meta {
      flex-direction: row-reverse;
      color: rgba(191,219,254,0.9);
    }
    .message .bubble {
      padding: 0.82rem 1.05rem;
      border-radius: 20px 20px 20px 8px;
      background: var(--bubble-bg);
      color: var(--bubble-text);
      line-height: 1.48;
      box-shadow: 0 16px 32px var(--bubble-shadow);
      overflow-wrap: break-word;
      text-align: left;
      position: relative;
      z-index: 0;
      overflow: hidden;
      display: inline-block;
      max-width: 100%;
      transition: background 0.3s ease, color 0.3s ease;
    }
    .message .bubble::before {
      content: "";
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: inherit;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      pointer-events: none;
      z-index: -1;
    }
    .message .bubble img.emoji-inline {
      width: 1.35em;
      height: 1.35em;
      max-width: none;
      min-width: 1em;
      min-height: 1em;
      display: inline-block;
      vertical-align: -0.2em;
      margin: 0 0.12em;
      object-fit: contain;
    }
    .message .body {
      align-items: flex-start;
    }
    .message.self .bubble {
      border-radius: 20px 20px 8px 20px;
      background: var(--bubble-self-bg);
      color: var(--bubble-self-text);
      box-shadow: 0 18px 36px var(--bubble-self-shadow);
    }
    .message.mention-hit .bubble {
      box-shadow:
        0 0 0 3px rgba(59,130,246,0.22),
        0 20px 40px rgba(59,130,246,0.25);
    }
    .message.self.mention-hit .bubble {
      box-shadow:
        0 0 0 3px rgba(255,255,255,0.28),
        0 24px 44px rgba(96,165,250,0.35);
    }
    .bubble > * {
      margin-bottom: 0.55rem;
    }
    .bubble > *:last-child {
      margin-bottom: 0;
    }
    .bubble p {
      margin: 0;
    }
    .bubble a {
      color: #2563eb;
      text-decoration: underline;
      word-break: break-all;
    }
    :root[data-theme="dark"] .bubble a {
      color: #a5b4fc;
    }
    .message.self .bubble a {
      color: #bfdbfe;
    }
    .bubble code {
      font-family: "Fira Code","JetBrains Mono",Consolas,Monaco,"Courier New",monospace;
      padding: 0.15rem 0.4rem;
      border-radius: 6px;
      background: var(--code-bg);
      color: var(--code-text);
      font-size: 0.92em;
    }
    .message.self .bubble code {
      background: rgba(255,255,255,0.22);
      color: #f8fafc;
    }
    .bubble blockquote {
      margin: 0.65rem 0;
      padding-left: 1rem;
      border-left: 3px solid rgba(79,70,229,0.4);
      color: var(--text-muted);
      font-style: italic;
    }
    .bubble ul,
    .bubble ol {
      margin: 0.6rem 0;
      padding-left: 1.4rem;
      display: grid;
      gap: 0.3rem;
    }
    .bubble hr {
      border: none;
      border-top: 1px dashed rgba(148,163,184,0.4);
      margin: 0.85rem 0;
    }
    .bubble table {
      border-collapse: collapse;
      width: 100%;
      margin: 0.7rem 0;
      font-size: 0.95em;
    }
    .bubble th,
    .bubble td {
      border: 1px solid rgba(148,163,184,0.3);
      padding: 0.45rem 0.75rem;
      text-align: left;
    }
    .bubble th {
      background: rgba(99,102,241,0.12);
    }
    :root[data-theme="dark"] .bubble th {
      background: rgba(79,70,229,0.28);
    }
    .message.self .bubble table {
      border-color: rgba(255,255,255,0.28);
    }
    .message.self .bubble th {
      background: rgba(255,255,255,0.16);
    }
    .bubble mark {
      background: var(--mark-bg);
      color: inherit;
      padding: 0.05rem 0.2rem;
      border-radius: 4px;
    }
    .bubble .katex {
      font-size: 1.05em;
    }
    .katex-html {
      display: none;
    }
    .katex-display {
      margin: 0.65rem 0;
      overflow: auto hidden;
    }
    .composer-tools {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      padding: 0.6rem clamp(1rem, 3vw, 1.6rem);
      border-top: 1px solid rgba(148,163,184,0.18);
      border-bottom: 1px solid rgba(148,163,184,0.18);
      background: rgba(15,23,42,0.02);
      flex-wrap: wrap;
    }
    .tool-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.4rem;
      padding: 0.45rem 0.9rem;
      border-radius: 999px;
      border: none;
      background: var(--tool-bg);
      color: var(--tool-text);
      font-weight: 600;
      font-size: 0.92rem;
      cursor: pointer;
      transition: transform 0.15s ease, box-shadow 0.15s ease, filter 0.15s ease;
      backdrop-filter: blur(10px);
    }
    .tool-button:hover {
      transform: translateY(-1px);
      box-shadow: 0 10px 20px rgba(37,99,235,0.15);
    }
    .tool-button:focus-visible {
      outline: 2px solid rgba(37,99,235,0.5);
      outline-offset: 2px;
    }
    .emoji-popover,
    .sticker-popover {
      position: fixed;
      z-index: 10000;
      padding: 0.85rem;
      border-radius: 18px;
      background: var(--popover-bg);
      border: 1px solid var(--popover-border);
      box-shadow:
        0 22px 48px var(--popover-shadow1),
        0 12px 30px var(--popover-shadow2);
      backdrop-filter: blur(18px);
      max-height: clamp(260px, 60vh, 420px);
      overflow-y: auto;
      display: none;
    }
    .emoji-popover[hidden],
    .sticker-popover[hidden] {
      display: none !important;
    }
    .emoji-section {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 0.8rem;
    }
    .emoji-section:last-child {
      margin-bottom: 0;
    }
    .emoji-section-title {
      font-size: 0.8rem;
      font-weight: 700;
      letter-spacing: 0.08em;
      color: var(--text-muted);
      text-transform: uppercase;
    }
    .emoji-grid {
      display: grid;
      grid-template-columns: repeat(var(--emoji-columns), minmax(28px, 1fr));
      gap: 0.4rem;
    }
    .emoji-option {
      width: 100%;
      max-width: 24px;
      max-height: 24px;
      aspect-ratio: 1 / 1;
      border: none;
      border-radius: 12px;
      background: rgba(37,99,235,0.08);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: transform 0.15s ease, box-shadow 0.15s ease;
    }
    .emoji-option:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 22px rgba(37,99,235,0.2);
      background: rgba(37,99,235,0.18);
    }
    .emoji-option img {
      width: 100%;
      max-width: 24px;
      max-height: 24px;
      height: 100%;
      object-fit: contain;
    }
    .sticker-grid {
      display: grid;
      grid-template-columns: repeat(var(--sticker-columns), minmax(108px, 1fr));
      gap: 0.65rem;
      max-width: clamp(320px, 42vw, 480px);
    }
    .sticker-thumb {
      position: relative;
      border-radius: 18px;
      padding: 0.35rem;
      background: rgba(37,99,235,0.08);
      border: 1px solid rgba(148,163,184,0.25);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: transform 0.15s ease, box-shadow 0.15s ease;
    }
    .sticker-thumb:hover {
      transform: translateY(-2px);
      box-shadow: 0 14px 26px rgba(37,99,235,0.18);
      background: rgba(37,99,235,0.16);
    }
    .sticker-thumb img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      border-radius: 12px;
    }
    .sticker-thumb.add {
      border: 2px dashed rgba(37,99,235,0.45);
      background: transparent;
      color: rgba(37,99,235,0.65);
      font-size: 1.4rem;
      font-weight: 700;
    }
    .sticker-thumb.add:hover {
      transform: none;
      box-shadow: none;
      background: rgba(37,99,235,0.08);
    }
    .sticker-empty {
      grid-column: 1 / -1;
      text-align: center;
      font-size: 0.9rem;
      color: var(--text-muted);
      padding: 0.6rem 0;
    }
    .sticker-modal,
    .file-upload-modal,
    .file-code-modal {
      position: fixed;
      inset: 0;
      background: rgba(15,23,42,0.45);
      backdrop-filter: blur(12px);
      display: flex;
      z-index: 10001;
      align-items: center;
      justify-content: center;
      padding: 1.5rem;
    }
    .sticker-modal[hidden],
    .file-upload-modal[hidden],
    .file-code-modal[hidden] {
      display: none !important;
    }
    .sticker-dialog,
    .file-upload-dialog,
    .file-code-dialog {
      width: min(420px, 100%);
      background: var(--dialog-bg);
      border-radius: 24px;
      padding: 1.8rem;
      box-shadow:
        0 40px 80px var(--dialog-shadow1),
        0 22px 40px var(--dialog-shadow2);
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .sticker-dialog h3,
    .file-upload-dialog h3,
    .file-code-dialog h3 {
      font-size: 1.3rem;
      font-weight: 700;
      margin-bottom: 0.4rem;
      color: var(--text);
    }
    .dialog-field {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }
    .dialog-field label {
      display: flex;
      flex-direction: column;
      gap: 0.45rem;
      font-weight: 600;
      color: var(--text);
      font-size: 0.95rem;
    }
    .dialog-field input {
      width: 100%;
      padding: 0.85rem 1rem;
      border-radius: 14px;
      border: 1px solid rgba(148,163,184,0.35);
      background: rgba(255,255,255,0.92);
      font: inherit;
      color: var(--text);
    }
    :root[data-theme="dark"] .dialog-field input {
      background: rgba(30,41,59,0.72);
      color: var(--text);
      border-color: rgba(148,163,184,0.32);
    }
    .dialog-field input:focus-visible {
      outline: 2px solid rgba(79,70,229,0.45);
      outline-offset: 1px;
    }
    .dialog-message {
      min-height: 1.2rem;
      font-size: 0.85rem;
      color: #ef4444;
    }
    .dialog-actions {
      display: flex;
      justify-content: flex-end;
      align-items: center;
      gap: 0.8rem;
      margin-top: 0.6rem;
    }
    .dialog-actions button {
      border: none;
      border-radius: 999px;
      padding: 0.6rem 1.3rem;
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.15s ease, box-shadow 0.15s ease, filter 0.15s ease;
    }
    .dialog-actions button[type="submit"] {
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #fff;
      box-shadow: 0 16px 30px rgba(59,130,246,0.28);
    }
    .dialog-actions button[type="submit"]:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow: 0 20px 36px rgba(59,130,246,0.35);
    }
    .dialog-actions button.secondary {
      background: rgba(148,163,184,0.18);
      color: var(--text);
    }
    .dialog-actions button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    .chat-card form#form {
      display: flex;
      gap: 0.8rem;
      padding: clamp(0.9rem, 2.8vw, 1.6rem);
      background: var(--form-bg);
      border-top: 1px solid var(--form-border);
      align-items: flex-end;
      position: relative;
      flex-wrap: nowrap;
    }
    textarea {
      flex: 1;
      min-height: 52px;
      max-height: 180px;
      resize: none;
      padding: 0.95rem 1.05rem;
      border-radius: 18px;
      border: 1px solid var(--textarea-border);
      background: var(--textarea-bg);
      box-shadow: inset 0 2px 4px rgba(15,23,42,0.08);
      font: inherit;
      line-height: 1.6;
      color: var(--textarea-text);
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: rgba(148,163,184,0.55) transparent;
    }
    textarea:disabled {
      background: var(--input-disabled-bg);
      color: var(--input-disabled-text);
    }
    textarea::-webkit-scrollbar {
      width: 8px;
    }
    textarea::-webkit-scrollbar-track {
      background: transparent;
    }
    textarea::-webkit-scrollbar-thumb {
      background: linear-gradient(180deg,#cbd5f5,#94a3b8);
      border-radius: 999px;
    }
    textarea::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(180deg,#a5b4fc,#64748b);
    }
    :root[data-theme="dark"] textarea::-webkit-scrollbar-thumb {
      background: linear-gradient(180deg,#475569,#334155);
    }
    button {
      border: none;
      cursor: pointer;
    }
    #send {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.4rem;
      min-width: 110px;
      padding: 0.9rem 1.4rem;
      border-radius: 999px;
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #ffffff;
      font-weight: 600;
      font-size: 0.95rem;
      box-shadow:
        0 16px 32px rgba(79,70,229,0.35),
        0 10px 20px rgba(37,99,235,0.24);
      transition: transform 0.2s ease, box-shadow 0.2s ease, filter 0.2s ease;
    }
    #send:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow:
        0 20px 40px rgba(79,70,229,0.42),
        0 12px 24px rgba(37,99,235,0.25);
    }
    #send:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
    }
    @keyframes message-in {
      from {
        transform: translateY(10px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }
    .file-card {
      display: grid;
      grid-template-columns: 64px 1fr auto;
      gap: 0.9rem;
      align-items: center;
      padding: 0.8rem 1rem;
      border-radius: 18px;
      background: rgba(37,99,235,0.06);
      border: 1px solid rgba(148,163,184,0.25);
      margin-top: 0.8rem;
    }
    .file-card[data-file-state="loading"] {
      opacity: 0.85;
    }
    .file-card[data-file-state="error"] {
      border-color: rgba(248,113,113,0.4);
      background: rgba(248,113,113,0.1);
    }
    .file-card-preview {
      width: 64px;
      height: 64px;
      border-radius: 16px;
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      display: grid;
      place-items: center;
      color: #fff;
      font-weight: 700;
      font-size: 0.9rem;
      letter-spacing: 0.1em;
    }
    .file-card-meta {
      display: flex;
      flex-direction: column;
      gap: 0.35rem;
    }
    .file-card-name {
      font-weight: 700;
      color: var(--text);
      word-break: break-all;
    }
    .file-card-info {
      font-size: 0.88rem;
      color: var(--text-muted);
    }
    .file-card-actions {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }
    .file-card-download {
      border-radius: 999px;
      padding: 0.55rem 1.1rem;
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #fff;
      font-weight: 600;
      font-size: 0.9rem;
      box-shadow: 0 12px 24px rgba(79,70,229,0.25);
    }
    .file-card-download:disabled {
      opacity: 0.65;
      cursor: wait;
      box-shadow: none;
    }
    .file-upload-dialog input[type="file"] {
      padding: 0.75rem;
      border-radius: 14px;
      border: 1px dashed rgba(79,70,229,0.35);
      background: rgba(255,255,255,0.92);
      font: inherit;
      color: var(--text);
    }
    .file-upload-hint {
      font-size: 0.88rem;
      color: var(--text-muted);
    }
    .file-upload-name {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      font-size: 0.9rem;
      color: var(--text);
    }
    .file-code-dialog pre {
      font-family: "Fira Code","JetBrains Mono",Consolas,monospace;
      font-size: 1.4rem;
      background: rgba(37,99,235,0.08);
      border-radius: 14px;
      padding: 0.8rem 1.1rem;
      text-align: center;
      letter-spacing: 0.35em;
    }
    .file-code-actions {
      display: flex;
      gap: 0.8rem;
      justify-content: flex-end;
    }
    .file-code-actions button {
      border-radius: 999px;
      padding: 0.6rem 1.3rem;
      font-weight: 600;
    }
    .file-code-actions .primary {
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #fff;
      box-shadow: 0 16px 30px rgba(79,70,229,0.28);
    }
    .file-code-actions .secondary {
      background: rgba(148,163,184,0.18);
      color: var(--text);
    }
    @media (max-width: 820px) {
      body {
        padding: 1rem;
      }
      .chat-card {
        height: calc(100vh - 1.8rem);
        border-radius: 26px;
      }
      .chat-header {
        border-radius: 26px 26px 0 0;
      }
      .header-row {
        flex-direction: column;
        align-items: flex-start;
      }
      .header-actions {
        width: 100%;
        justify-content: space-between;
      }
      .user-chip {
        order: 1;
      }
      .logout-button {
        order: 2;
      }
      .header-meta {
        flex-direction: row;
        width: 100%;
        justify-content: space-between;
      }
      .messages {
        padding: 1rem;
      }
      .message .body {
        max-width: 86vw;
      }
      form {
        flex-direction: row;
        align-items: center;
        flex-wrap: nowrap;
      }
      textarea {
        min-height: 48px;
      }
      #send {
        min-width: auto;
        padding: 0.75rem 1.1rem;
      }
    }
    @media (max-width: 720px) {
      :root {
        --emoji-columns: 8;
        --sticker-columns: 4;
      }
      .emoji-popover,
      .sticker-popover {
        max-width: calc(100vw - 2rem);
      }
      .file-card {
        grid-template-columns: 56px 1fr;
        grid-template-areas:
          "preview meta"
          "actions actions";
      }
      .file-card-preview {
        grid-area: preview;
        width: 56px;
        height: 56px;
      }
      .file-card-meta {
        grid-area: meta;
      }
      .file-card-actions {
        grid-area: actions;
        flex-direction: row;
        justify-content: flex-end;
      }
    }
    @media (max-width: 540px) {
      :root {
        --emoji-columns: 6;
        --sticker-columns: 3;
      }
      .brand {
        display: none;
      }
      .header-row {
        flex-direction: column;
        gap: 0.6rem;
      }
      .header-actions {
        width: 100%;
        flex-wrap: nowrap;
        justify-content: space-between;
      }
      .user-chip {
        flex: 1;
        min-width: 0;
      }
      .logout-button {
        flex-shrink: 0;
      }
      .header-meta {
        width: 100%;
        justify-content: space-between;
        gap: 0.4rem;
      }
      form {
        gap: 0.6rem;
      }
      textarea {
        font-size: 0.95rem;
      }
      .sticker-grid {
        min-width: calc(100vw - 3.5rem);
      }
    }
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
  </style>
</head>
<body>
  <div class="page">
    <div class="chat-card" role="application">
      <header class="chat-header">
        <div class="header-row">
          <div class="brand">
            <span class="brand-icon" aria-hidden="true"></span>
            漫游聊天室
          </div>
          <div class="header-actions">
            <div class="user-chip" id="user-chip">
              <img id="user-avatar" src="https://cravatar.cn/avatar?d=identicon" alt="用户头像">
              <div class="user-info">
                <span id="user-name">访客</span>
                <button id="settings-link" type="button">个人设置</button>
              </div>
            </div>
            <button id="logout-btn" type="button" class="logout-button">退出</button>
          </div>
        </div>
        <div class="header-meta">
          <div class="online" id="online-count">在线 0 人</div>
          <div id="header-email" class="header-email"></div>
        </div>
      </header>
      <div class="verification-banner" id="verification-banner" hidden>
        <div class="banner-body">
          <div class="icon" aria-hidden="true">📬</div>
          <div>
            <strong>邮箱未验证</strong>
            <p>已向 <span id="user-email"></span> 发送验证邮件，验证完成后即可发言。</p>
          </div>
          <div class="verification-actions">
            <button class="banner-button" id="resend-btn" type="button">重新发送</button>
            <a class="banner-link" href="/settings.html">个人设置</a>
          </div>
        </div>
      </div>
      <ul class="messages" id="messages" aria-live="polite"></ul>
      <div class="composer-tools" id="composer-tools">
        <button type="button" class="tool-button" id="emoji-btn" aria-haspopup="true" aria-expanded="false">表情</button>
        <button type="button" class="tool-button" id="sticker-btn" aria-haspopup="true" aria-expanded="false">收藏表情</button>
        <button type="button" class="tool-button" id="file-upload-btn" aria-haspopup="dialog">文件上传</button>
      </div>
      <form id="form" autocomplete="off">
        <textarea
          id="input"
          placeholder=""
          disabled
        ></textarea>
        <div id="mention-popover" class="mention-popover" role="listbox" aria-hidden="true">
          <ul id="mention-list"></ul>
        </div>
        <button type="submit" id="send" disabled>
          <span>发送</span>
        </button>
      </form>
    </div>
  </div>

  <div id="emoji-popover" class="emoji-popover" hidden>
    <div class="emoji-section" id="emoji-recent-section" hidden>
      <div class="emoji-section-title">最近表情</div>
      <div class="emoji-grid" id="emoji-recent"></div>
    </div>
    <div class="emoji-section">
      <div的 class="emoji-section-title">全部表情</div>
      <div class="emoji-grid" id="emoji-all"></div>
    </div>
  </div>

  <div id="sticker-popover" class="sticker-popover" hidden>
    <div class="sticker-grid" id="sticker-grid"></div>
    <div class="sticker-empty" id="sticker-empty" hidden>暂未添加收藏表情，点击 “+” 新建。</div>
  </div>

  <div id="sticker-modal" class="sticker-modal" hidden>
    <form id="sticker-form" class="sticker-dialog" novalidate>
      <h3>添加收藏表情</h3>
      <div class="dialog-field">
        <label>
          描述
          <input type="text" name="description" maxlength="120" required placeholder="给表情写个描述">
        </label>
        <label>
          预览图链接
          <input type="url" name="previewUrl" required placeholder="https://example.com/preview.png">
        </label>
        <label>
          实际图链接
          <input type="url" name="imageUrl" required placeholder="https://example.com/image.gif">
        </label>
      </div>
      <div class="dialog-message" id="sticker-form-message"></div>
      <div class="dialog-actions">
        <button type="button" class="secondary" id="sticker-cancel">取消</button>
        <button type="submit" id="sticker-submit">保存</button>
      </div>
    </form>
  </div>

  <div id="file-upload-modal" class="file-upload-modal" hidden>
    <form id="file-upload-form" class="file-upload-dialog" novalidate>
      <h3>上传文件</h3>
      <div class="dialog-field">
        <label>
          选择文件
          <input type="file" id="file-upload-input" name="file" required>
        </label>
        <div class="file-upload-hint">
          文件会上传到 R2 存储，最大 200 MB。上传后会返回一个 8 位编码用于分享。
        </div>
        <div id="file-upload-filename" class="file-upload-name" hidden></div>
      </div>
      <div class="dialog-message" id="file-upload-message"></div>
      <div class="dialog-actions">
        <button type="button" class="secondary" id="file-upload-cancel">取消</button>
        <button type="submit" id="file-upload-submit">上传</button>
      </div>
    </form>
  </div>

  <div id="file-code-modal" class="file-code-modal" hidden>
    <div class="file-code-dialog">
      <h3>上传完成</h3>
      <p>已生成文件编码，可在消息中输入 <code>[file](编码)</code> 分享。</p>
      <pre id="file-code-label">--------</pre>
      <div class="file-code-actions">
        <button type="button" class="secondary" id="file-code-close">关闭</button>
        <button type="button" class="primary" id="file-code-copy">复制编码</button>
      </div>
    </div>
  </div>

  <script src="/theme.js"></script>
  <script src="/download-manager.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    Theme.init();
  </script>
  <script>
    const socket = io({ autoConnect: false, withCredentials: true });

    const messageIds = new Set();
    const historyState = {
      oldestMessageId: null,
      loading: false,
      complete: false
    };

    const state = {
      user: null,
      online: 0,
      unread: 0,
      ready: false,
      resendCooldown: 0,
      resendTimer: null,
      customStickers: []
    };

    const fileMetadataCache = new Map();
    const fileMetadataPending = new Map();

    const EMOJI_CONFIG_URL = '/config/emojis.json';
    const RECENT_EMOJI_STORAGE = 'chat-recent-emojis';
    const RECENT_EMOJI_LIMIT = 22;
    const EMOJI_CACHE_KEY = 'chat-emoji-cache';
    const EMOJI_CACHE_TTL = 1000 * 60 * 60 * 24;

    let emojiCatalog = [];
    let emojiMap = new Map();
    let recentEmojiUsage = loadRecentEmojiUsage();

    const messagesEl = document.getElementById('messages');
    const formEl = document.getElementById('form');
    const inputEl = document.getElementById('input');
    const sendBtn = document.getElementById('send');
    const onlineEl = document.getElementById('online-count');
    const headerEmailEl = document.getElementById('header-email');
    const verificationBanner = document.getElementById('verification-banner');
    const userEmailEl = document.getElementById('user-email');
    const userNameEl = document.getElementById('user-name');
    const userAvatarEl = document.getElementById('user-avatar');
    const logoutBtn = document.getElementById('logout-btn');
    const settingsLink = document.getElementById('settings-link');
    const resendBtn = document.getElementById('resend-btn');

    const emojiBtn = document.getElementById('emoji-btn');
    const stickerBtn = document.getElementById('sticker-btn');
    const fileUploadBtn = document.getElementById('file-upload-btn');
    const emojiPopover = document.getElementById('emoji-popover');
    const emojiRecentSection = document.getElementById('emoji-recent-section');
    const emojiRecentGrid = document.getElementById('emoji-recent');
    const emojiAllGrid = document.getElementById('emoji-all');

    const stickerPopover = document.getElementById('sticker-popover');
    const stickerGrid = document.getElementById('sticker-grid');
    const stickerEmpty = document.getElementById('sticker-empty');
    const stickerModal = document.getElementById('sticker-modal');
    const stickerForm = document.getElementById('sticker-form');
    const stickerFormMessage = document.getElementById('sticker-form-message');
    const stickerCancel = document.getElementById('sticker-cancel');
    const stickerSubmit = document.getElementById('sticker-submit');

    const fileUploadModal = document.getElementById('file-upload-modal');
    const fileUploadForm = document.getElementById('file-upload-form');
    const fileUploadInput = document.getElementById('file-upload-input');
    const fileUploadCancel = document.getElementById('file-upload-cancel');
    const fileUploadSubmit = document.getElementById('file-upload-submit');
    const fileUploadMessage = document.getElementById('file-upload-message');
    const fileUploadFilename = document.getElementById('file-upload-filename');

    const fileCodeModal = document.getElementById('file-code-modal');
    const fileCodeLabel = document.getElementById('file-code-label');
    const fileCodeClose = document.getElementById('file-code-close');
    const fileCodeCopy = document.getElementById('file-code-copy');

    const mentionPopover = document.getElementById('mention-popover');
    const mentionList = document.getElementById('mention-list');
    document.body.appendChild(mentionPopover);

    const longPlaceholder = '支持 Markdown 与 LaTeX，按 Enter 发送，Shift+Enter 换行';
    const shortPlaceholder = '支持 Markdown';
    const narrowMedia = window.matchMedia('(max-width: 540px)');
    
    function updatePlaceholder() {
      inputEl.placeholder = narrowMedia.matches ? shortPlaceholder : longPlaceholder;
    }
    if (narrowMedia.addEventListener) {
      narrowMedia.addEventListener('change', updatePlaceholder);
    } else {
      narrowMedia.addListener(updatePlaceholder);
    }
    window.addEventListener('resize', updatePlaceholder);
    updatePlaceholder();

    const longPressMs = 500;
    let longPressTimer = null;
    let roster = [];
    let mentionState = {
      active: false,
      query: '',
      caret: 0,
      selection: null
    };
    let lastSelection = { start: 0, end: 0 };

    async function bootstrap() {
      const res = await fetch('/api/auth/session', { credentials: 'include' });
      const data = await res.json();
      if (!data.authenticated) {
        window.location.href = '/login.html';
        return;
      }
      state.user = data.user;
      roster = Array.isArray(data.roster) ? data.roster : [];
      applyUser();
      socket.connect();
    }

    bootstrap();

    socket.on('roster-update', list => {
      if (!Array.isArray(list)) return;
      roster = list;
      if (state.user) {
        const me = roster.find(u => u.id === state.user.id);
        if (me) state.user = { ...state.user, ...me };
        applyUser();
      }
      if (mentionState.active) {
        if (
          mentionState.selection != null &&
          mentionState.selection >= filteredRoster().length
        ) {
          mentionState.selection = 0;
        }
        renderMentionPopover();
      }
    });

    socket.on('chat-init', payload => {
      state.ready = true;
      state.user = payload.self;
      roster = Array.isArray(payload.roster) ? payload.roster : roster;
      applyUser();
      updateOnline(payload.online);

      historyState.loading = false;
      messageIds.clear();
      messagesEl.innerHTML = '';

      const history = Array.isArray(payload.history) ? payload.history : [];
      historyState.complete = Boolean(payload.historyDone) || history.length === 0;

      history.forEach(msg => appendMessage(msg, { skipScroll: true }));

      if (history.length) {
        const firstId = Number(history[0].id);
        historyState.oldestMessageId = Number.isFinite(firstId) ? firstId : null;
      } else {
        historyState.oldestMessageId = null;
      }

      requestAnimationFrame(() => {
        forceScrollToBottom();
        hydrateFileCards(messagesEl);
      });
    });

    socket.on('auth-required', () => {
      window.location.href = '/login.html';
    });

    socket.on('chat-message', message => {
      updateRosterFromPayload(message);
      appendMessage(message);
      if (state.user && message.userId !== state.user.id && document.hidden) {
        state.unread += 1;
        updateTitle();
      }
    });

    socket.on('mention', payload => {
      showMentionNotification(payload);
    });

    socket.on('system-message', text => {
      appendSystemMessage(text);
      if (document.hidden) {
        state.unread += 1;
        updateTitle();
      }
    });

    socket.on('online-count', count => {
      updateOnline(count);
    });

    socket.on('history-chunk', payload => {
      historyState.loading = false;
      if (!payload) return;

      const chunk = Array.isArray(payload.messages) ? payload.messages : [];
      if (chunk.length) {
        prependMessages(chunk);
      }

      if (payload.done) {
        historyState.complete = true;
      }
    });

    formEl.addEventListener('submit', event => {
      event.preventDefault();
      if (!state.user || !state.user.isVerified) return;
      const value = inputEl.value.trim();
      if (!value) return;
      socket.emit('chat-message', value);
      inputEl.value = '';
      lastSelection = { start: 0, end: 0 };
      autoResizeTextarea();
      hideMentionPopover();
      updateSendState();
    });

    messagesEl.addEventListener('scroll', handleHistoryScroll, { passive: true });

    messagesEl.addEventListener('touchstart', event => {
      const avatar = event.target.closest('.avatar');
      if (!avatar) return;
      longPressTimer = setTimeout(() => {
        const li = avatar.closest('.message');
        if (!li) return;
        const author = li.querySelector('.author');
        if (author) {
          insertMention(author.textContent);
        }
      }, longPressMs);
    }, { passive: true });

    messagesEl.addEventListener('touchend', () => {
      clearTimeout(longPressTimer);
    });

    messagesEl.addEventListener('mousedown', event => {
      const avatar = event.target.closest('.avatar');
      if (!avatar) return;
      longPressTimer = setTimeout(() => {
        const li = avatar.closest('.message');
        if (!li) return;
        const author = li.querySelector('.author');
        if (author) {
          insertMention(author.textContent);
        }
      }, longPressMs);
    });

    messagesEl.addEventListener('mouseup', () => clearTimeout(longPressTimer));
    messagesEl.addEventListener('mouseleave', () => clearTimeout(longPressTimer));

    inputEl.addEventListener('input', () => {
      autoResizeTextarea();
      handleMentionInput();
      updateSendState();
      recordSelection();
    });
    inputEl.addEventListener('click', () => {
      handleMentionInput(true);
      recordSelection();
    });
    inputEl.addEventListener('keyup', recordSelection);
    inputEl.addEventListener('select', recordSelection);
    inputEl.addEventListener('blur', () => {
      recordSelection();
    });

    inputEl.addEventListener('keydown', event => {
      if (mentionState.active) {
        if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
          event.preventDefault();
          moveMentionSelection(event.key === 'ArrowDown' ? 1 : -1);
          return;
        }
        if (event.key === 'Enter') {
          event.preventDefault();
          if (mentionState.selection != null) {
            const selected = filteredRoster()[mentionState.selection];
            if (selected) {
              insertMention(selected.displayName);
            }
          } else {
            pickMentionFromQuery();
          }
          return;
        }
        if (event.key === 'Escape') {
          hideMentionPopover();
          return;
        }
      }
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        formEl.requestSubmit();
      }
    });

    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        state.unread = 0;
        updateTitle();
      }
    });

    logoutBtn.addEventListener('click', async () => {
      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      });
      window.location.href = '/login.html';
    });

    settingsLink.addEventListener('click', () => {
      window.location.href = '/settings.html';
    });

    resendBtn.addEventListener('click', handleResend);

    mentionList.addEventListener('mousedown', event => {
      event.preventDefault();
    });

    emojiBtn.addEventListener('click', async event => {
      event.preventDefault();
      event.stopPropagation();
      if (!state.user) return;
      if (!emojiPopover.hidden) {
        hideEmojiPopover();
        return;
      }
      hideStickerPopover();
      await ensureEmojiCatalog();
      renderEmojiPopover();
      showEmojiPopover();
    });

    emojiPopover.addEventListener('mousedown', event => event.stopPropagation());
    emojiPopover.addEventListener('click', event => event.stopPropagation());

    stickerBtn.addEventListener('click', async event => {
      event.preventDefault();
      event.stopPropagation();
      if (!state.user) return;
      if (!stickerPopover.hidden) {
        hideStickerPopover();
        return;
      }
      hideEmojiPopover();
      await ensureStickersLoaded();
      renderStickerGrid();
      showStickerPopover();
    });

    stickerPopover.addEventListener('mousedown', event => event.stopPropagation());
    stickerPopover.addEventListener('click', event => event.stopPropagation());

    stickerCancel.addEventListener('click', () => {
      closeStickerModal();
    });

    stickerModal.addEventListener('click', event => {
      if (event.target === stickerModal) {
        closeStickerModal();
      }
    });

    stickerForm.addEventListener('submit', async event => {
      event.preventDefault();
      if (!state.user) return;
      const formData = new FormData(stickerForm);
      const description = String(formData.get('description') || '').trim();
      const previewUrl = String(formData.get('previewUrl') || '').trim();
      const imageUrl = String(formData.get('imageUrl') || '').trim();

      if (!description || !previewUrl || !imageUrl) {
        setStickerFormMessage('请完整填写所有字段。', true);
        return;
      }

      try {
        setStickerFormLoading(true);
        const res = await fetch('/api/stickers', {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ description, previewUrl, imageUrl })
        });
        const data = await res.json().catch(() => ({}));
        if (!res.ok) {
          setStickerFormMessage(data.message || '保存失败，请稍后再试。', true);
          return;
        }
        state.customStickers = Array.isArray(data.stickers) ? data.stickers : state.customStickers;
        renderStickerGrid();
        closeStickerModal(true);
      } catch (error) {
        console.error(error);
        setStickerFormMessage('网络异常，请稍后再试。', true);
      } finally {
        setStickerFormLoading(false);
      }
    });

    fileUploadBtn.addEventListener('click', () => {
      if (!state.user || !state.user.isVerified) {
        alert('邮箱验证完成后才能上传文件。');
        return;
      }
      openFileUploadModal();
    });

    fileUploadCancel.addEventListener('click', closeFileUploadModal);
    fileUploadModal.addEventListener('click', event => {
      if (event.target === fileUploadModal) {
        closeFileUploadModal();
      }
    });

    fileUploadInput.addEventListener('change', () => {
      const file = fileUploadInput.files && fileUploadInput.files[0];
      if (!file) {
        fileUploadFilename.hidden = true;
        fileUploadFilename.textContent = '';
        return;
      }
      fileUploadFilename.hidden = false;
      fileUploadFilename.textContent = `${file.name}（${DownloadSettings.formatBytes(file.size)}）`;
    });

    fileUploadForm.addEventListener('submit', async event => {
      event.preventDefault();
      if (!state.user || !state.user.isVerified) {
        setFileUploadMessage('请先完成邮箱验证。', true);
        return;
      }
      const file = fileUploadInput.files && fileUploadInput.files[0];
      if (!file) {
        setFileUploadMessage('请选择要上传的文件。', true);
        return;
      }
      const formData = new FormData();
      formData.append('file', file);

      try {
        setFileUploadLoading(true);
        const res = await fetch('/api/files/upload', {
          method: 'POST',
          body: formData,
          credentials: 'include'
        });
        const data = await res.json().catch(() => ({}));
        if (!res.ok) {
          setFileUploadMessage(data.message || '上传失败，请稍后再试。', true);
          return;
        }
        closeFileUploadModal();
        showFileCodeModal(data.file && data.file.code ? data.file.code : '--------');
      } catch (error) {
        console.error(error);
        setFileUploadMessage('上传失败，请检查网络后重试。', true);
      } finally {
        setFileUploadLoading(false);
      }
    });

    fileCodeClose.addEventListener('click', () => {
      fileCodeModal.hidden = true;
    });

    fileCodeCopy.addEventListener('click', async () => {
      const code = fileCodeLabel.textContent.trim();
      try {
        await navigator.clipboard.writeText(code);
        fileCodeCopy.textContent = '已复制';
        setTimeout(() => {
          fileCodeCopy.text内容 = '复制编码';
        }, 1500);
      } catch (error) {
        console.error(error);
        alert('复制失败，请手动选择编码。');
      }
    });

    document.addEventListener('click', event => {
      const target = event.target;
      if (!emojiPopover.hidden && !emojiPopover.contains(target) && target !== emojiBtn) {
        hideEmojiPopover();
      }
      if (!stickerPopover.hidden && !stickerPopover.contains(target) && target !== stickerBtn) {
        hideStickerPopover();
      }
    });

    document.addEventListener('keydown', event => {
      if (event.key === 'Escape') {
        if (!fileCodeModal.hidden) {
          fileCodeModal.hidden = true;
          return;
        }
        if (!fileUploadModal.hidden) {
          closeFileUploadModal();
          return;
        }
        if (!stickerModal.hidden) {
          closeStickerModal();
        } else {
          hideEmojiPopover();
          hideStickerPopover();
          hideMentionPopover();
        }
      }
    });

    window.addEventListener('resize', repositionOpenPopovers);
    window.addEventListener('scroll', repositionOpenPopovers, true);

    document.addEventListener('click', event => {
      const button = event.target.closest('.file-card-download');
      if (!button) return;
      const code = button.dataset.fileCode;
      if (!code) return;
      handleFileDownload(button, code);
    });

    function handleHistoryScroll() {
      if (messagesEl.scrollTop > 24) return;
      if (historyState.loading || historyState.complete) return;
      if (!Number.isFinite(historyState.oldestMessageId)) return;
      historyState.loading = true;
      socket.emit('history-request', { beforeId: historyState.oldestMessageId });
    }

    function updateRosterFromPayload(message) {
      if (!message || !message.userId) return;
      if (!roster.find(user => user.id === message.userId)) {
        roster.push(dbUserToClient(message.userId, message.author, message.avatarUrl));
      }
    }

    function dbUserToClient(id, name, avatar) {
      return {
        id,
        displayName: name,
        avatarUrl: avatar
      };
    }

    function appendMessage(message, options = {}) {
      const messageId = Number(message && message.id);
      if (!Number.isFinite(messageId) || messageIds.has(messageId)) return;

      const element = createMessageElement(message);
      messageIds.add(messageId);
      appendListItem(element, options.skipScroll === true);
      hydrateFileCards(element);

      if (
        historyState.oldestMessageId == null ||
        messageId < historyState.oldestMessageId
      ) {
        historyState.oldestMessageId = messageId;
      }
    }

    function prependMessages(messages) {
      const fragment = document.createDocumentFragment();
      let added = 0;
      let minId = historyState.oldestMessageId;
      const distanceFromBottom = messagesEl.scrollHeight - messagesEl.scrollTop;

      messages.forEach(msg => {
        const id = Number(msg && msg.id);
        if (!Number.isFinite(id) || messageIds.has(id)) return;
        messageIds.add(id);
        const node = createMessageElement(msg);
        fragment.appendChild(node);
        hydrateFileCards(node);
        added += 1;
        if (minId == null || id < minId) {
          minId = id;
        }
      });

      if (!added) return;
      messagesEl.insertBefore(fragment, messagesEl.firstChild);
      requestAnimationFrame(() => {
        messagesEl.scrollTop = messagesEl.scrollHeight - distanceFromBottom;
      });
      historyState.oldestMessageId = minId;
    }

    function createMessageElement(message) {
      const li = document.createElement('li');
      li.className = 'message';
      li.dataset.messageId = String(message.id);

      if (state.user && message.userId === state.user.id) {
        li.classList.add('self');
      }
      if (
        Array.isArray(message.mentions) &&
        state.user &&
        message.mentions.includes(state.user.id)
      ) {
        li.classList.add('mention-hit');
      }

      const avatar = document.createElement('figure');
      avatar.className = 'avatar';
      const img = document.createElement('img');
      img.src = message.avatarUrl;
      img.alt = `${message.author} 的头像`;
      img.loading = 'lazy';
      img.onerror = () => {
        img.onerror = null;
        img.src = 'https://cravatar.cn/avatar?d=identicon';
      };
      avatar.appendChild(img);

      const body = document.createElement('div');
      body.className = 'body';

      const meta = document.createElement('div');
      meta.className = 'meta';

      const author = document.createElement('span');
      author.className = 'author';
      author.textContent = message.author;

      const time = document.createElement('time');
      time.className = 'timestamp';
      time.dateTime = message.time || '';
      time.textContent = formatTime(message.time);

      meta.appendChild(author);
      meta.appendChild(time);

      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      if (message.html) {
        bubble.innerHTML = message.html;
      } else {
        bubble.textContent = message.text;
      }

      body.appendChild(meta);
      body.appendChild(bubble);
      li.appendChild(avatar);
      li.appendChild(body);

      return li;
    }

    function appendSystemMessage(text) {
      const li = document.createElement('li');
      li.className = 'message system';
      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.textContent = text;
      li.appendChild(bubble);
      appendListItem(li);
      hydrateFileCards(li);
    }

    function appendListItem(element, skipAutoScroll = false) {
      const shouldStick = !skipAutoScroll && isNearBottom();
      messagesEl.appendChild(element);
      if (!skipAutoScroll && shouldStick) {
        requestAnimationFrame(forceScrollToBottom);
      }
    }

    function isNearBottom(threshold = 80) {
      return messagesEl.scrollHeight - messagesEl.scrollTop - messagesEl.clientHeight < threshold;
    }

    function forceScrollToBottom() {
      messagesEl.scrollTop = messagesEl.scrollHeight;
    }

    function autoResizeTextarea() {
      inputEl.style.height = 'auto';
      inputEl.style.height = Math.min(inputEl.scrollHeight, 180) + 'px';
    }

    function formatTime(value) {
      if (!value) {
        return '';
      }
      const date = new Date(value);
      if (Number.isNaN(date.getTime())) {
        return '';
      }
      return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
    }

    function applyUser() {
      if (!state.user) {
        emojiBtn.disabled = true;
        stickerBtn.disabled = true;
        fileUploadBtn.disabled = true;
        return;
      }
      emojiBtn.disabled = false;
      stickerBtn.disabled = false;
      fileUploadBtn.disabled = !state.user.isVerified;

      userNameEl.textContent = state.user.displayName;
      userEmailEl.textContent = state.user.email;
      headerEmailEl.textContent = state.user.email;
      userAvatarEl.src = state.user.avatarUrl || 'https://cravatar.cn/avatar?d=identicon';
      userAvatarEl.onerror = () => {
        userAvatarEl.onerror = null;
        userAvatarEl.src = 'https://cravatar.cn/avatar?d=identicon';
      };
      verificationBanner.hidden = Boolean(state.user.isVerified);
      updateSendState();
      updateResendState();
      ensureStickersLoaded();
    }

    function updateOnline(count) {
      state.online = count;
      onlineEl.textContent = `在线 ${count || 0} 人`;
    }

    function updateSendState() {
      const verified = Boolean(state.user && state.user.isVerified);
      inputEl.disabled = !verified;
      if (!verified) {
        sendBtn.disabled = true;
        return;
      }
      sendBtn.disabled = inputEl.value.trim().length === 0;
    }

    function updateTitle() {
      document.title = state.unread
        ? `（${state.unread} 条未读）漫游聊天室`
        : '漫游聊天室';
    }

    function handleMentionInput(force) {
      const caret = inputEl.selectionStart;
      const value = inputEl.value;
      const substring = value.slice(0, caret);
      const atIndex = substring.lastIndexOf('@');
      const isValidTrigger =
        atIndex !== -1 &&
        (atIndex === 0 || /\s/.test(substring.charAt(atIndex - 1))) &&
        (caret === atIndex + 1 || !/\s/.test(substring.charAt(atIndex + 1)));

      if (!force && mentionState.active && caret < mentionState.caret) {
        hideMentionPopover();
        return;
      }

      if (isValidTrigger) {
        const query = substring.slice(atIndex + 1, caret);
        if (query.includes(' ')) {
          hideMentionPopover();
          return;
        }
        mentionState = {
          active: true,
          query,
          caret: atIndex,
          selection: 0
        };
        renderMentionPopover();
      } else if (force && value.at(caret - 1) === '@') {
        mentionState = {
          active: true,
          query: '',
          caret: caret - 1,
          selection: 0
        };
        renderMentionPopover();
      } else {
        hideMentionPopover();
      }
    }

    function filteredRoster() {
      const query = mentionState.query.toLowerCase();
      return roster
        .filter(user => user.id !== state.user.id)
        .filter(user => user.displayName.toLowerCase().includes(query))
        .sort((a, b) => a.displayName.localeCompare(b.displayName));
    }

    function renderMentionPopover() {
      const items = filteredRoster();
      if (!items.length) {
        hideMentionPopover();
        return;
      }
      mentionList.innerHTML = '';
      items.forEach((user, index) => {
        const li = document.createElement('li');
        const button = document.createElement('button');
        button.type = 'button';
        button.textContent = user.displayName;
        button.dataset.index = String(index);
        if (mentionState.selection === index) {
          button.classList.add('is-active');
        }
        button.addEventListener('click', () => insertMention(user.displayName));
        li.appendChild(button);
        mentionList.appendChild(li);
      });
      showMentionPopover();
    }

    function showMentionPopover() {
      const caret = inputEl.selectionStart;
      const caretPos = getCaretClientPosition(inputEl, caret);

      mentionPopover.style.display = 'block';
      mentionPopover.style.visibility = 'hidden';

      requestAnimationFrame(() => {
        const popRect = mentionPopover.getBoundingClientRect();
        const offset = 6;

        let left = Math.round(caretPos.left + offset);
        let top = Math.round(caretPos.top - popRect.height - offset);

        if (top < 8) top = Math.round(caretPos.top + 24);

        const maxLeft = window.innerWidth - popRect.width - 8;
        const maxTop = window.innerHeight - popRect.height - 8;
        left = Math.min(Math.max(8, left), Math.max(8, maxLeft));
        top = Math.min(Math.max(8, top), Math.max(8, maxTop));

        mentionPopover.style.left = `${left}px`;
        mentionPopover.style.top = `${top}px`;
        mentionPopover.style.visibility = 'visible';
        mentionPopover.setAttribute('aria-hidden', 'false');
      });
    }

    function getCaretClientPosition(textarea, position) {
      const mirror = document.createElement('div');
      const style = window.getComputedStyle(textarea);
      const props = [
        'boxSizing','width','height',
        'borderTopWidth','borderRightWidth','borderBottomWidth','borderLeftWidth',
        'paddingTop','paddingRight','paddingBottom','paddingLeft',
        'fontStyle','fontVariant','fontWeight','fontStretch',
        'fontSize','fontFamily','lineHeight',
        'textAlign','textTransform','textIndent','letterSpacing','wordSpacing',
        'whiteSpace'
      ];

      props.forEach(prop => {
        mirror.style[prop] = style[prop];
      });

      mirror.style.position = 'absolute';
      mirror.style.visibility = 'hidden';
      mirror.style.whiteSpace = 'pre-wrap';
      mirror.style.wordWrap = 'break-word';

      const before = textarea.value.slice(0, position)
        .replace(/\n$/g, '\n\u200b');
      mirror.textContent = before;

      const marker = document.createElement('span');
      marker.textContent = textarea.value.slice(position) || '.';
      mirror.appendChild(marker);

      document.body.appendChild(mirror);

      const rect = textarea.getBoundingClientRect();
      const left = rect.left + marker.offsetLeft - textarea.scrollLeft;
      const top = rect.top + marker.offsetTop - textarea.scrollTop;

      document.body.removeChild(mirror);
      return { left, top };
    }

    function hideMentionPopover() {
      mentionState = { active: false, query: '', caret: 0, selection: null };
      mentionPopover.style.display = 'none';
      mentionPopover.setAttribute('aria-hidden', 'true');
    }

    function moveMentionSelection(delta) {
      const items = filteredRoster();
      if (!items.length) return;
      let next = mentionState.selection == null ? 0 : mentionState.selection + delta;
      if (next < 0) next = items.length - 1;
      if (next >= items.length) next = 0;
      mentionState.selection = next;
      renderMentionPopover();
    }

    function pickMentionFromQuery() {
      const items = filteredRoster();
      if (!items.length) return;
      insertMention(items[0].displayName);
    }

    function insertMention(name) {
      const caret = inputEl.selectionStart;
      const value = inputEl.value;
      const before = value.slice(0, mentionState.caret);
      const after = value.slice(caret);
      const insert = `@${name} `;
      inputEl.value = before + insert + after;
      const newCaret = before.length + insert.length;
      inputEl.focus();
      inputEl.setSelectionRange(newCaret, newCaret);
      recordSelection();
      hideMentionPopover();
      autoResizeTextarea();
      updateSendState();
    }

    function showMentionNotification({ from, text }) {
      const bodyText = text || '';
      if ('Notification' in window) {
        if (Notification.permission === 'granted') {
          new Notification(`${from} 提到了你`, {
            body: bodyText,
            tag: 'chat-mention',
            icon: '/favicon.ico'
          });
        } else if (Notification.permission !== 'denied') {
          Notification.requestPermission().then(result => {
            if (result === 'granted') {
              new Notification(`${from} 提到了你`, {
                body: bodyText,
                tag: 'chat-mention',
                icon: '/favicon.ico'
              });
            }
          });
        }
      } else {
        alert(`${from} 提到了你：\n${bodyText}`);
      }
    }

    function handleResend() {
      if (state.resendCooldown > 0) return;
      state.resendCooldown = 60;
      updateResendState();
      fetch('/api/auth/resend-verification', {
        method: 'POST',
        credentials: 'include'
      })
        .then(res => res.json())
        .then(data => {
          if (data && data.message) {
            appendSystemMessage(data.message);
          }
        })
        .catch(() => {
          appendSystemMessage('重发失败，请稍后再试。');
        });
      state.resendTimer = setInterval(() => {
        state.resendCooldown -= 1;
        if (state.resendCooldown <= 0) {
          clearInterval(state.resendTimer);
          state.resendCooldown = 0;
        }
        updateResendState();
      }, 1000);
    }

    function updateResendState() {
      if (!resendBtn) return;
      resendBtn.hidden = Boolean(state.user && state.user.isVerified);
      resendBtn.disabled = state.resendCooldown > 0;
      if (state.resendCooldown > 0) {
        resendBtn.textContent = `重新发送 (${state.resendCooldown}s)`;
      } else {
        resendBtn.textContent = '重新发送';
      }
    }

    function loadRecentEmojiUsage() {
      try {
        const raw = localStorage.getItem(RECENT_EMOJI_STORAGE);
        if (!raw) return {};
        const parsed = JSON.parse(raw);
        if (Array.isArray(parsed)) {
          const usage = {};
          let stamp = Date.now();
          parsed
            .filter(item => typeof item === 'string' && item)
            .forEach(key => {
              if (!usage[key]) usage[key] = stamp--;
            });
          return usage;
        }
        if (!parsed || typeof parsed !== 'object') return {};
        const usage = {};
        Object.keys(parsed).forEach(key => {
          const value = Number(parsed[key]);
          if (typeof key === 'string' && key && Number.isFinite(value)) {
            usage[key] = value;
          }
        });
        return usage;
      } catch {
        return {};
      }
    }

    function persistRecentEmojiUsage() {
      try {
        localStorage.setItem(RECENT_EMOJI_STORAGE, JSON.stringify(recentEmojiUsage));
      } catch (error) {
        console.warn('Failed to persist recent emojis', error);
      }
    }

    function getSortedRecentEmojiEntries() {
      return Object.entries(recentEmojiUsage)
        .filter(([key, stamp]) => emojiMap.has(key) && Number.isFinite(stamp))
        .sort((a, b) => b[1] - a[1])
        .slice(0, RECENT_EMOJI_LIMIT);
    }

    function pruneRecentEmojis() {
      if (!emojiMap || emojiMap.size === 0) return false;

      let changed = false;
      Object.keys(recentEmojiUsage).forEach(key => {
        const stamp = recentEmojiUsage[key];
        if (!emojiMap.has(key) || !Number.isFinite(stamp)) {
          delete recentEmojiUsage[key];
          changed = true;
        }
      });

      const allowed = new Set(getSortedRecentEmojiEntries().map(([key]) => key));
      Object.keys(recentEmojiUsage).forEach(key => {
        if (!allowed.has(key)) {
          delete recentEmojiUsage[key];
          changed = true;
        }
      });

      return changed;
    }

    function loadCachedEmojiCatalog() {
      try {
        const raw = localStorage.getItem(EMOJI_CACHE_KEY);
        if (!raw) return null;
        const cache = JSON.parse(raw);
        if (!cache || !Array.isArray(cache.catalog) || typeof cache.timestamp !== 'number') {
          return null;
        }
        if (Date.now() - cache.timestamp > EMOJI_CACHE_TTL) return null;
        return cache.catalog;
      } catch {
        return null;
      }
    }

    function persistEmojiCatalog(catalog) {
      try {
        const payload = JSON.stringify({ catalog, timestamp: Date.now() });
        localStorage.setItem(EMOJI_CACHE_KEY, payload);
      } catch (error) {
        console.warn('Failed to persist emoji cache', error);
      }
    }

    async function ensureEmojiCatalog() {
      if (emojiCatalog.length) return;

      const cached = loadCachedEmojiCatalog();
      if (cached && cached.length) {
        emojiCatalog = cached;
        emojiMap = new Map(emojiCatalog.map(item => [item.key, item]));
        if (pruneRecentEmojis()) persistRecentEmojiUsage();
        return;
      }

      try {
        const res = await fetch(EMOJI_CONFIG_URL, { cache: 'no-store' });
        if (!res.ok) throw new Error('failed to load emoji config');
        const data = await res.json();
        if (!Array.isArray(data)) throw new Error('invalid emoji config');
        emojiCatalog = data
          .map(item => ({
            key: String(item.key || '').trim(),
            label: String(item.label || '').trim(),
            staticUrl: String(item.static || '').trim(),
            animatedUrl: String(item.animated || '').trim()
          }))
          .filter(item => item.key && item.staticUrl && item.animatedUrl);
        emojiMap = new Map(emojiCatalog.map(item => [item.key, item]));
        persistEmojiCatalog(emojiCatalog);
        if (pruneRecentEmojis()) persistRecentEmojiUsage();
      } catch (error) {
        console.error('无法加载表情配置', error);
        emojiCatalog = [];
        emojiMap = new Map();
      }
    }

    function renderEmojiPopover() {
      renderRecentEmojis();
      renderAllEmojis();
    }

    function renderRecentEmojis() {
      const entries = getSortedRecentEmojiEntries();
      emojiRecentGrid.innerHTML = '';
      if (!entries.length) {
        emojiRecentSection.hidden = true;
        return;
      }
      const fragment = document.createDocumentFragment();
      entries.forEach(([key]) => {
        const emoji = emojiMap.get(key);
        if (!emoji) return;
        fragment.appendChild(createEmojiButton(emoji));
      });
      emojiRecentGrid.appendChild(fragment);
      emojiRecentSection.hidden = false;
    }

    function renderAllEmojis() {
      emojiAllGrid.innerHTML = '';
      if (!emojiCatalog.length) {
        const fallback = document.createElement('div');
        fallback.className = 'sticker-empty';
        fallback.textContent = '暂时没有内置表情。';
        emojiAllGrid.appendChild(fallback);
        return;
      }
      const fragment = document.createDocumentFragment();
      emojiCatalog.forEach(emoji => {
        const button = createEmojiButton(emoji);
        fragment.appendChild(button);
      });
      emojiAllGrid.appendChild(fragment);
    }

    function createEmojiButton(emoji) {
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'emoji-option';
      button.title = emoji.label || emoji.key;
      button.setAttribute('aria-label', emoji.label || emoji.key);
      const img = document.createElement('img');
      img.src = emoji.staticUrl;
      img.alt = emoji.label || emoji.key;
      img.loading = 'lazy';
      img.onerror = () => {
        img.onerror = null;
        img.src = emoji.animatedUrl;
      };
      button.appendChild(img);
      button.addEventListener('click', () => handleEmojiPick(emoji));
      return button;
    }

    function handleEmojiPick(emoji) {
      hideEmojiPopover();
      if (!state.user || !state.user.isVerified || inputEl.disabled) return;
      insertAtCursor(`![emoji](${emoji.animatedUrl}) `);
      addRecentEmoji(emoji.key);
    }

    function addRecentEmoji(key) {
      if (typeof key !== 'string' || !key) return;
      recentEmojiUsage[key] = Date.now();
      pruneRecentEmojis();
      persistRecentEmojiUsage();
      if (!emojiPopover.hidden) {
        renderRecentEmojis();
      }
    }

    function showEmojiPopover() {
      emojiPopover.hidden = false;
      emojiPopover.style.visibility = 'hidden';
      emojiPopover.style.display = 'block';
      emojiBtn.setAttribute('aria-expanded', 'true');
      requestAnimationFrame(() => {
        positionPopover(emojiPopover, emojiBtn);
        emojiPopover.style.visibility = 'visible';
      });
    }

    function hideEmojiPopover() {
      emojiPopover.hidden = true;
      emojiPopover.style.display = '';
      emojiPopover.style.visibility = '';
      emojiBtn.setAttribute('aria-expanded', 'false');
    }

    async function ensureStickersLoaded() {
      if (!state.user) return;
      if (Array.isArray(state.customStickers) && state.customStickers.length) return;
      try {
        const res = await fetch('/api/stickers', { credentials: 'include' });
        if (!res.ok) throw new Error('failed to load stickers');
        const data = await res.json();
        state.customStickers = Array.isArray(data.stickers) ? data.stickers : [];
        renderStickerGrid();
      } catch (error) {
        console.error('加载收藏表情失败', error);
        stickerEmpty.hidden = false;
        stickerEmpty.textContent = '加载收藏表情失败，请稍后再试。';
      }
    }

    function renderStickerGrid() {
      stickerGrid.innerHTML = '';
      const fragment = document.createDocumentFragment();

      const addBtn = document.createElement('button');
      addBtn.type = 'button';
      addBtn.className = 'sticker-thumb add';
      addBtn.setAttribute('aria-label', '添加收藏表情');
      addBtn.textContent = '+';
      addBtn.addEventListener('click', () => {
        hideStickerPopover();
        openStickerModal();
      });
      fragment.appendChild(addBtn);

      if (!state.customStickers.length) {
        stickerEmpty.hidden = false;
      } else {
        stickerEmpty.hidden = true;
        state.customStickers.forEach(sticker => {
          const btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'sticker-thumb';
          btn.title = sticker.description || '收藏表情';
          const img = document.createElement('img');
          img.src = sticker.previewUrl;
          img.alt = sticker.description || '收藏表情';
          img.loading = 'lazy';
          img.onerror = () => {
            img.onerror = null;
            img.src = sticker.imageUrl;
          };
          btn.appendChild(img);
          btn.addEventListener('click', () => {
            hideStickerPopover();
            sendStickerMessage(sticker.imageUrl);
          });
          fragment.appendChild(btn);
        });
      }

      stickerGrid.appendChild(fragment);
    }

    function showStickerPopover() {
      stickerPopover.hidden = false;
      stickerPopover.style.visibility = 'hidden';
      stickerPopover.style.display = 'block';
      stickerBtn.setAttribute('aria-expanded', 'true');
      requestAnimationFrame(() => {
        positionPopover(stickerPopover, stickerBtn);
        stickerPopover.style.visibility = 'visible';
      });
    }

    function hideStickerPopover() {
      stickerPopover.hidden = true;
      stickerPopover.style.display = '';
      stickerPopover.style.visibility = '';
      stickerBtn.setAttribute('aria-expanded', 'false');
    }

    function openStickerModal() {
      stickerForm.reset();
      setStickerFormMessage('', false);
      stickerModal.hidden = false;
      requestAnimationFrame(() => {
        const firstInput = stickerForm.querySelector('input[name="description"]');
        if (firstInput) firstInput.focus();
      });
    }

    function closeStickerModal(success) {
      stickerModal.hidden = true;
      if (success) {
        setStickerFormMessage('', false);
      }
    }

    function setStickerFormMessage(message, isError) {
      stickerFormMessage.textContent = message;
      stickerFormMessage.style.color = isError ? '#ef4444' : '#0f172a';
    }

    function setStickerFormLoading(active) {
      stickerSubmit.disabled = active;
      stickerCancel.disabled = active;
      stickerSubmit.textContent = active ? '保存中…' : '保存';
    }

    function sendStickerMessage(imageUrl) {
      if (!state.user || !state.user.isVerified) {
        appendSystemMessage('邮箱尚未验证，暂时无法发送消息。');
        return;
      }
      if (!imageUrl) return;
      socket.emit('chat-message', `![](${imageUrl})`);
    }

    function positionPopover(popover, anchor) {
      if (!anchor) return;
      const rect = anchor.getBoundingClientRect();
      const popRect = popover.getBoundingClientRect();
      const gap = 10;

      let top = rect.top - popRect.height - gap;
      if (top < 8) {
        top = rect.bottom + gap;
      }

      let left = rect.right - popRect.width;
      if (left < 8) {
        left = 8;
      }
      const maxLeft = window.innerWidth - popRect.width - 8;
      if (left > maxLeft) {
        left = maxLeft;
      }

      popover.style.top = `${Math.round(top)}px`;
      popover.style.left = `${Math.round(left)}px`;
    }

    function repositionOpenPopovers() {
      if (!emojiPopover.hidden) {
        positionPopover(emojiPopover, emojiBtn);
      }
      if (!stickerPopover.hidden) {
        positionPopover(stickerPopover, stickerBtn);
      }
    }

    function insertAtCursor(text) {
      if (inputEl.disabled) return;
      const value = inputEl.value;
      const start = lastSelection.start;
      const end = lastSelection.end;
      const safeStart = Number.isFinite(start) ? start : value.length;
      const safeEnd = Number.isFinite(end) ? end : value.length;
      const before = value.slice(0, safeStart);
      const after = value.slice(safeEnd);
      const next = before + text + after;
      inputEl.value = next;
      const caret = before.length + text.length;
      inputEl.focus();
      inputEl.setSelectionRange(caret, caret);
      recordSelection();
      autoResizeTextarea();
      updateSendState();
    }

    function recordSelection() {
      if (document.activeElement === inputEl) {
        const start = inputEl.selectionStart != null ? inputEl.selectionStart : inputEl.value.length;
        const end = inputEl.selectionEnd != null ? inputEl.selectionEnd : inputEl.value.length;
        lastSelection = { start, end };
      }
    }

    function openFileUploadModal() {
      fileUploadForm.reset();
      fileUploadFilename.hidden = true;
      fileUploadFilename.textContent = '';
      setFileUploadMessage('', false);
      fileUploadModal.hidden = false;
      requestAnimationFrame(() => {
        fileUploadInput.focus();
      });
    }

    function closeFileUploadModal() {
      fileUploadModal.hidden = true;
      fileUploadForm.reset();
      fileUploadFilename.hidden = true;
      fileUploadFilename.textContent = '';
      setFileUploadMessage('', false);
      setFileUploadLoading(false);
    }

    function setFileUploadMessage(message, isError) {
      fileUploadMessage.textContent = message;
      fileUploadMessage.style.color = isError ? '#ef4444' : '#0f172a';
    }

    function setFileUploadLoading(active) {
      fileUploadSubmit.disabled = active;
      fileUploadCancel.disabled = active;
      fileUploadSubmit.textContent = active ? '上传中…' : '上传';
    }

    function showFileCodeModal(code) {
      fileCodeLabel.textContent = code;
      fileCodeModal.hidden = false;
    }

    function convertFileTokensToCards(root) {
      if (!root) return;

      const anchors = root.querySelectorAll('a');
      anchors.forEach(anchor => {
        const label = (anchor.textContent || '').trim().toLowerCase();
        const href = (anchor.getAttribute('href') || '').trim();
        if (label !== 'file' || !href) return;

        const payload = normalizeFileToken(href);
        if (!payload) return;
        anchor.replaceWith(createFileCardElement(payload));
      });

      const images = root.querySelectorAll('img');
      images.forEach(img => {
        const alt = (img.getAttribute('alt') || '').trim().toLowerCase();
        const src = (img.getAttribute('src') || '').trim();
        if (alt !== 'file' || !src) return;

        const payload = normalizeFileToken(src);
        if (!payload) return;
        img.replaceWith(createFileCardElement(payload));
      });
    }

    function normalizeFileToken(value) {
      if (!value) return null;
      if (/^[A-Za-z0-9]{4,64}$/.test(value)) {
        return { code: value.toUpperCase() };
      }
      if (/^https?:\/\//i.test(value)) {
        return { url: value };
      }
      return null;
    }

    function createFileCardElement(payload) {
      const card = document.createElement('div');
      card.className = 'file-card';
      card.dataset.fileState = 'idle';

      if (payload.code) {
        card.dataset.fileCode = payload.code;
      } else if (payload.url) {
        card.dataset.fileUrl = payload.url;
      }

      const preview = document.createElement('div');
      preview.className = 'file-card-preview';
      preview.setAttribute('aria-hidden', 'true');

      const extLabel = (() => {
        const ext = (payload.extension || '').trim();
        if (ext) return ext.slice(0, 4).toUpperCase();

        const fromName = payload.fileName ? /\.([^.]+)$/.exec(payload.fileName) : null;
        if (fromName && fromName[1]) return fromName[1].slice(0, 4).toUpperCase();

        if (payload.url) {
          const tail = payload.url.split('?')[0].split('/').pop();
          if (tail) {
            const fromUrl = /\.([^.]+)$/.exec(tail);
            if (fromUrl && fromUrl[1]) return fromUrl[1].slice(0, 4).toUpperCase();
          }
        }
        return 'FILE';
      })();

      preview.textContent = extLabel;

      const meta = document.createElement('div');
      meta.className = 'file-card-meta';

      const name = document.createElement('div');
      name.className = 'file-card-name';
      name.textContent = payload.code
        ? `文件编码 ${payload.code}`
        : '外部链接';

      const info = document.createElement('div');
      info.className = 'file-card-info';
      info.textContent = payload.code
        ? '正在加载文件信息…'
        : '这是一个外部直链资源，可直接下载。';

      meta.appendChild(name);
      meta.appendChild(info);

      const actions = document.createElement('div');
      actions.className = 'file-card-actions';

      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'file-card-download';
      button.textContent = '下载';
      button.disabled = !!payload.code;

      if (payload.code) {
        button.dataset.fileCode = payload.code;
      } else if (payload.url) {
        button.dataset.fileUrl = payload.url;
      }

      actions.appendChild(button);

      card.appendChild(preview);
      card.appendChild(meta);
      card.appendChild(actions);

      return card;
    }

    function hydrateFileCards(root) {
      if (!root) return;
      convertFileTokensToCards(root);

      const cards = root.querySelectorAll('.file-card');
      if (!cards.length) return;

      const settings = DownloadSettings.get();

      cards.forEach(card => {
        const code = card.dataset.fileCode || null;
        const url = card.dataset.fileUrl || null;
        const button = card.querySelector('.file-card-download');
        const info = card.querySelector('.file-card-info');

        if (button && !button.dataset.listenerBound) {
          button.addEventListener('click', () => handleFileDownload(button, code));
          button.dataset.listenerBound = 'true';
        }

        if (url) {
          card.dataset.fileState = 'ready';
          if (button) {
            button.disabled = false;
            button.textContent = '下载';
            button.dataset.fileUrl = url;
          }
          if (info) {
            info.textContent = '可点击下载或复制该外部链接。';
          }
          return;
        }

        if (!code || card.dataset.fileState === 'ready') return;

        card.dataset.fileState = 'loading';
        if (button) {
          button.disabled = true;
          button.textContent = settings.enabled ? '准备中…' : '下载';
          delete button.dataset.fileUrl;
        }

        fetch(`/api/files/${code}`, { credentials: 'include' })
          .then(res => (res.ok ? res.json() : null))
          .then(meta => applyFileMetadata(card, meta))
          .catch(() => applyFileMetadata(card, null));
      });
    }


    async function fetchFileMetadata(code) {
      fileMetadataPending.set(code, true);
      try {
        const res = await fetch(`/api/files/${code}`, { credentials: 'include' });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        if (!data || !data.file) throw new Error('no file');
        fileMetadataCache.set(code, data.file);
        updateFileCardsByCode(code, data.file);
      } catch (error) {
        console.error('加载文件信息失败', code, error);
        fileMetadataCache.set(code, null);
        updateFileCardsByCode(code, null);
      } finally {
        fileMetadataPending.delete(code);
      }
    }

    function updateFileCardsByCode(code, meta) {
      document.querySelectorAll(`.file-card[data-file-code="${code}"]`).forEach(card => {
        applyFileMetadata(card, meta ? { success: true, file: meta } : null);
      });
    }

    function applyFileMetadata(card, payload) {
      if (!card) return;

      const preview = card.querySelector('.file-card-preview');
      const name = card.querySelector('.file-card-name');
      const info = card.querySelector('.file-card-info');
      const button = card.querySelector('.file-card-download');
      const code = card.dataset.fileCode;

      const fail = message => {
        card.dataset.fileState = 'error';
        if (button) {
          button.disabled = false;
          button.textContent = '浏览器下载';
          button.dataset.fileUrl = card.dataset.fileUrl || '';
          if (code) delete button.dataset.fileCode;
        }
        if (info) info.textContent = message || '无法获取文件信息，请稍后再试。';
        if (preview) preview.textContent = 'FILE';
      };

      if (!payload || payload.success !== true || !payload.file) {
        fail('无法获取文件信息，请稍后再试。');
        return;
      }

      const file = payload.file;
      card.dataset.fileState = 'ready';

      if (preview) {
        const extLabel = (() => {
          const ext = (file.extension || '').trim();
          if (ext) return ext.slice(0, 4).toUpperCase();
          const match = /\.([^.]+)$/.exec(file.fileName || '');
          if (match && match[1]) return match[1].slice(0, 4).toUpperCase();
          return 'FILE';
        })();
        preview.textContent = extLabel;
      }

      if (name) name.textContent = file.fileName || (code ? `文件编码 ${code}` : '外部链接');

      if (info) {
        info.textContent = file.size
          ? `文件大小 ${DownloadSettings.formatBytes(file.size)}`
          : '文件信息已加载。';
      }

      if (button) {
        button.disabled = false;
        button.textContent = '下载';
        if (code) button.dataset.fileCode = code;
        if (card.dataset.fileUrl) {
          button.dataset.fileUrl = card.dataset.fileUrl;
        } else {
          delete button.dataset.fileUrl;
        }
      }
    }


    function updateFileCardFallback(card, refs) {
      const { nameEl, infoEl, previewEl, downloadBtn } = refs;
      const code = card.dataset.fileCode || card.dataset.fileUrl || '未知';
      if (nameEl) nameEl.textContent = `文件编码 ${code}`;
      if (infoEl) infoEl.textContent = '文件不存在或已被删除。';
      if (previewEl) previewEl.textContent = 'ERR';
      if (downloadBtn) {
        downloadBtn.disabled = true;
        downloadBtn.textContent = '不可用';
      }
    }
    const urlMetadataCache = new Map();

    async function fetchWithFallback(url, options) {
      try {
        return await fetch(url, options);
      } catch (error) {
        if (options && options.method === 'HEAD') {
          return fetch(url, { ...options, method: 'GET' });
        }
        throw error;
      }
    }

    async function resolveUrlMetadata(url) {
      if (urlMetadataCache.has(url)) {
        const cached = urlMetadataCache.get(url);
        if (cached.state === 'done' || cached.state === 'error') return cached.meta;
        if (cached.promise) return cached.promise;
      }

      const cached = { meta: null, state: 'pending', promise: null };
      urlMetadataCache.set(url, cached);

      cached.promise = fetchWithFallback(url, { method: 'HEAD' })
        .then(res => {
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return extractMetadata(url, res);
        })
        .catch(async () => {
          const res = await fetchWithFallback(url, { method: 'GET' });
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return extractMetadata(url, res);
        })
        .then(meta => {
          cached.meta = meta;
          cached.state = 'done';
          return meta;
        })
        .catch(err => {
          cached.meta = { error: err.message || '无法获取文件信息' };
          cached.state = 'error';
          return cached.meta;
        });

      return cached.promise;
    }
    function safeDecodeFileName(input) {
      if (typeof input !== 'string' || !input.trim()) return input || '下载文件';
      try {
        return decodeURIComponent(input);
      } catch (_) {
        return input;
      }
    }
    function extractMetadata(url, response) {
      const headers = response.headers;
      const disposition = headers.get('content-disposition') || '';
      const length = headers.get('content-length');
      const type = headers.get('content-type') || '';

      const nameFromDisposition = (() => {
        const match = /filename\*=UTF-8''([^;]+)|filename="?([^";]+)"?/i.exec(disposition);
        if (!match) return null;
        const [, encoded, plain] = match;
        try {
          return encoded ? decodeURIComponent(encoded) : plain;
        } catch (_) {
          return plain;
        }
      })();

      const customHeaderName =
        headers.get('x-filename') ||
        headers.get('x-file-name') ||
        headers.get('x-original-filename');

      const fallbackName = url.split('/').pop() || 'download';
      const fileName = nameFromDisposition || customHeaderName || fallbackName;
      const size = length && !Number.isNaN(Number(length)) ? Number(length) : undefined;

      let supportsRange;
      const acceptRanges = headers.get('accept-ranges');
      if (acceptRanges && acceptRanges.toLowerCase().includes('bytes')) {
        supportsRange = true;
      } else if (acceptRanges && acceptRanges.toLowerCase() === 'none') {
        supportsRange = false;
      } else if (headers.get('content-range')) {
        supportsRange = true;
      }

      return {
        fileName,
        contentType: type || undefined,
        size,
        supportsRange
      };
    }

    function triggerBrowserDownload(url, fileName) {
      const link = document.createElement('a');
      link.href = url;
      link.rel = 'noopener';
      link.target = '_blank';
      if (fileName) link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    async function runDirectDownload(url, meta = {}) {
      const card = document.querySelector(`.file-card[data-file-url="${url}"]`);
      const infoEl = card?.querySelector('.file-card-info');

      let resolvedMeta = meta;
      if (!meta.fileName || !meta.contentType || !meta.size || meta.supportsRange === undefined) {
        infoEl && (infoEl.textContent = '正在解析链接信息…');
        resolvedMeta = await resolveUrlMetadata(url);
        if (resolvedMeta.error) {
          infoEl && (infoEl.textContent = resolvedMeta.error);
          return;
        }
        infoEl && (infoEl.textContent = '信息解析完成，准备下载…');
      }

      const settings = DownloadSettings.get();
      const highSpeedAvailable =
        settings.enabled &&
        typeof HighSpeedDownloader !== 'undefined' &&
        HighSpeedDownloader.isSupported() &&
        resolvedMeta.supportsRange !== false;

      if (highSpeedAvailable) {
        const downloader = new HighSpeedDownloader({
          url,
          size: resolvedMeta.size,
          fileName: resolvedMeta.fileName,
          contentType: resolvedMeta.contentType,
          concurrency: settings.concurrency,
          chunkSize: settings.chunkSize,
          onProgress(progress) {
            if (infoEl) infoEl.textContent = `下载进度 ${progress.percent}%`;
          }
        });

        try {
          await downloader.start();
          if (infoEl) {
            infoEl.textContent = resolvedMeta.size
              ? `下载完成 · ${DownloadSettings.formatBytes(resolvedMeta.size)}`
              : '下载完成';
          }
          return;
        } catch (error) {
          console.error('High speed download failed, fallback to browser download.', error);
          if (infoEl) infoEl.textContent = '高速下载失败，正在切换普通下载…';
          if (urlMetadataCache.has(url)) {
            const cached = urlMetadataCache.get(url);
            if (cached.meta) cached.meta.supportsRange = false;
          }
        }
      }

      triggerBrowserDownload(url, resolvedMeta.fileName);
      if (infoEl) {
        infoEl.textContent = resolvedMeta.size
          ? `已触发浏览器下载 · ${DownloadSettings.formatBytes(resolvedMeta.size)}`
          : '已触发浏览器下载。';
      }
    }


    async function handleFileDownload(button, code) {
      if (button.disabled) return;
      const url = button.dataset.fileUrl;
      if (url) {
        await runDirectDownload(url, {
          fileName: button.dataset.fileName,
          contentType: button.dataset.fileType,
          size: Number(button.dataset.fileSize) || 0
        });
        return;
      }
      const card = button.closest('.file-card');
      const infoEl = card ? card.querySelector('.file-card-info') : null;
      const originalText = button.textContent;
      button.disabled = true;
      button.textContent = '请求中…';

      try {
        const res = await fetch(`/api/files/${code}/presign`, { credentials: 'include' });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        if (!data || !data.url) throw new Error('sign failed');

        const meta = {
          url: data.url,
          size: data.size,
          fileName: data.fileName || button.dataset.fileName || `download-${code}`,
          contentType: data.contentType || button.dataset.fileType || 'application/octet-stream'
        };

        const settings = DownloadSettings.get();
        const canHighSpeed =
          settings.enabled &&
          typeof HighSpeedDownloader !== 'undefined' &&
          HighSpeedDownloader.isSupported();

        if (card) {
          card.dataset.fileState = 'downloading';
        }

        if (infoEl) {
          infoEl.textContent = canHighSpeed
            ? '高速下载已开启，请稍候…'
            : '准备下载…';
        }

        if (canHighSpeed) {
          const downloader = new HighSpeedDownloader({
            url: meta.url,
            size: meta.size,
            fileName: meta.fileName,
            contentType: meta.contentType,
            concurrency: settings.concurrency,
            chunkSize: settings.chunkSize,
            onProgress(progress) {
              if (infoEl) {
                infoEl.textContent = `高速下载 ${progress.percent}%（${progress.completed}/${progress.total}）`;
              }
            }
          });
          await downloader.start();
          if (infoEl) {
            infoEl.textContent = `下载完成 · ${DownloadSettings.formatBytes(meta.size)}`;
          }
        } else {
          triggerBrowserDownload(meta.url, meta.fileName);
          if (infoEl) {
            infoEl.textContent = `已触发浏览器下载 · ${DownloadSettings.formatBytes(meta.size)}`;
          }
        }
      } catch (error) {
        console.error('下载失败', error);
        if (infoEl) {
          infoEl.textContent = '下载失败，请稍后重试。';
        }
        alert('下载失败，请稍后再试。');
      } finally {
        if (card) {
          card.dataset.fileState = 'ready';
        }
        button.disabled = false;
        button.textContent = originalText;
      }
    }

    window.addEventListener('downloadsettingschange', () => {
      if (!state.user) return;
      const settings = DownloadSettings.get();
      fileUploadBtn.disabled = !state.user.isVerified;
      document.querySelectorAll('.file-card').forEach(card => {
        if (settings.enabled) {
          if (card.dataset.fileState === 'idle') {
            card.dataset.fileState = 'ready';
          }
        }
      });
    });

    autoResizeTextarea();
    updateSendState();
    hydrateFileCards(messagesEl);
  </script>
</body>
</html>


---
# public\login.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>登录 · 漫游聊天室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    (function () {
      try {
        var stored = localStorage.getItem('chat-theme');
        var theme = stored === 'dark' || stored === 'light'
          ? stored
          : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.dataset.theme = theme;
      } catch (e) {
        document.documentElement.dataset.theme = 'light';
      }
    })();
  </script>
  <style>
    :root {
      color-scheme: light dark;
      font-family: "Noto Sans SC","PingFang SC","Microsoft YaHei","Helvetica Neue",Arial,sans-serif;
      --bg: linear-gradient(180deg,#eef2ff,#f5f3ff);
      --bg-accent1: rgba(37,99,235,0.18);
      --bg-accent2: rgba(124,58,237,0.2);
      --card-bg: rgba(255,255,255,0.92);
      --card-shadow1: rgba(15,23,42,0.16);
      --card-shadow2: rgba(79,70,229,0.1);
      --text: #0f172a;
      --text-muted: #475569;
      --hero-bg: linear-gradient(160deg, rgba(37,99,235,0.94), rgba(124,58,237,0.88));
      --hero-text: rgba(255,255,255,0.85);
      --button-bg: linear-gradient(135deg,#2563eb,#7c3aed);
      --button-shadow1: rgba(79,70,229,0.32);
      --button-shadow2: rgba(37,99,235,0.18);
      --input-bg: rgba(255,255,255,0.86);
      --input-border: rgba(148,163,184,0.4);
    }
    :root[data-theme="dark"] {
      --bg: linear-gradient(180deg,#0f172a,#111827);
      --bg-accent1: rgba(56,189,248,0.12);
      --bg-accent2: rgba(139,92,246,0.12);
      --card-bg: rgba(15,23,42,0.85);
      --card-shadow1: rgba(8,145,178,0.24);
      --card-shadow2: rgba(59,130,246,0.18);
      --text: #e2e8f0;
      --text-muted: #94a3b8;
      --hero-bg: linear-gradient(160deg, rgba(37,99,235,0.55), rgba(124,58,237,0.55));
      --hero-text: rgba(226,232,240,0.78);
      --button-shadow1: rgba(59,130,246,0.42);
      --button-shadow2: rgba(30,64,175,0.35);
      --input-bg: rgba(30,41,59,0.75);
      --input-border: rgba(148,163,184,0.35);
    }
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: clamp(1.5rem, 4vw, 3rem);
      background:
        radial-gradient(120% 120% at 25% -10%, var(--bg-accent1), transparent 55%),
        radial-gradient(120% 120% at 80% 0%, var(--bg-accent2), transparent 60%),
        var(--bg);
      color: var(--text);
      transition: background 0.3s ease, color 0.3s ease;
    }
    .container {
      width: min(920px, 100%);
      display: grid;
      gap: clamp(2rem, 4vw, 3rem);
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      align-items: stretch;
    }
    .card {
      background: var(--card-bg);
      border-radius: 32px;
      box-shadow:
        0 32px 72px var(--card-shadow1),
        0 18px 36px var(--card-shadow2);
      backdrop-filter: blur(24px);
      overflow: hidden;
      transition: background 0.3s ease, box-shadow 0.3s ease;
    }
    .hero {
      padding: clamp(2rem, 4vw, 3.2rem);
      display: flex;
      flex-direction: column;
      justify-content: center;
      gap: 1.6rem;
      background: var(--hero-bg);
      color: #ffffff;
      position: relative;
    }
    .hero::after {
      content: "";
      position: absolute;
      inset: 20% -30% auto auto;
      width: clamp(220px, 42vw, 320px);
      height: clamp(220px, 42vw, 320px);
      background: radial-gradient(circle, rgba(255,255,255,0.28), transparent 65%);
      opacity: 0.8;
      pointer-events: none;
    }
    .hero h1 {
      font-size: clamp(2.1rem, 4vw, 2.6rem);
      font-weight: 700;
      letter-spacing: 0.04em;
      line-height: 1.2;
    }
    .hero p {
      font-size: clamp(1rem, 2vw, 1.1rem);
      line-height: 1.8;
      max-width: 420px;
      color: var(--hero-text);
    }
    .form-wrap {
      padding: clamp(2rem, 4vw, 3rem);
      display: flex;
      flex-direction: column;
      gap: 1.8rem;
    }
    .form-header {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }
    .form-header h2 {
      font-size: clamp(1.6rem, 3vw, 1.9rem);
      font-weight: 700;
      letter-spacing: 0.03em;
    }
    .form-header p {
      color: var(--text-muted);
      font-size: 0.97rem;
      line-height: 1.6;
    }
    form {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
    }
    label {
      display: flex;
      flex-direction: column;
      gap: 0.55rem;
      font-weight: 600;
      color: var(--text);
      font-size: 0.98rem;
    }
    input[type="email"],
    input[type="password"] {
      width: 100%;
      padding: 0.9rem 1.1rem;
      border-radius: 16px;
      border: 1px solid var(--input-border);
      background: var(--input-bg);
      font: inherit;
      color: var(--text);
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }
    input:focus {
      outline: none;
      border-color: rgba(79,70,229,0.9);
      box-shadow: 0 0 0 4px rgba(79,70,229,0.18);
      background: rgba(255,255,255,0.97);
    }
    :root[data-theme="dark"] input:focus {
      background: rgba(15,23,42,0.9);
    }
    .actions {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
    }
    button[type="submit"] {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.95rem 1.6rem;
      border-radius: 999px;
      border: none;
      background: var(--button-bg);
      color: #ffffff;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      box-shadow:
        0 18px 36px var(--button-shadow1),
        0 10px 22px var(--button-shadow2);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    button[type="submit"]:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow:
        0 22px 42px rgba(79,70,229,0.4),
        0 12px 28px rgba(37,99,235,0.24);
    }
    button[type="submit"]:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
    }
    .links {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 0.8rem;
      font-size: 0.95rem;
      color: var(--text-muted);
    }
    .links a {
      color: #2563eb;
      font-weight: 600;
      text-decoration: none;
    }
    .links a:hover {
      text-decoration: underline;
    }
    .message {
      display: none;
      padding: 0.85rem 1rem;
      border-radius: 16px;
      font-size: 0.95rem;
      line-height: 1.5;
    }
    .message.show {
      display: block;
    }
    .message.error {
      background: rgba(248,113,113,0.12);
      color: #b91c1c;
      border: 1px solid rgba(239,68,68,0.25);
    }
    .message.success {
      background: rgba(34,197,94,0.12);
      color: #047857;
      border: 1px solid rgba(16,185,129,0.2);
    }
    @media (max-width: 720px) {
      body {
        padding: 1.2rem;
      }
      .container {
        gap: 1.4rem;
      }
      .card {
        border-radius: 26px;
      }
      .hero {
        border-radius: 26px;
      }
      .links {
        flex-direction: column;
        align-items: flex-start;
      }
    }
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <section class="card hero">
      <h1>欢迎回来，继续漫游</h1>
      <p>
        登录后即可与验证通过的朋友实时畅聊，享受多端同步、个性头像与未读提醒的体验。
      </p>
      <p>
        尚未注册？右侧几步即可完成账号创建，完成邮箱验证后即可发言。
      </p>
    </section>

    <section class="card">
      <div class="form-wrap">
        <div class="form-header">
          <h2>登录账号</h2>
          <p>请输入注册邮箱和密码。邮箱未验证也可查看消息，但暂时无法发言。</p>
        </div>

        <div id="message" class="message" role="alert"></div>

        <form id="login-form" novalidate>
          <label>
            邮箱
            <input type="email" name="email" inputmode="email" autocomplete="email" required placeholder="you@example.com">
          </label>

          <label>
            密码
            <input type="password" name="password" autocomplete="current-password" required placeholder="请输入密码">
          </label>

          <div class="actions">
            <button type="submit" id="submit-btn">
              <span>登录</span>
            </button>
            <div class="links">
              <span>没有账号？<a href="/register.html">去注册</a></span>
              <a href="/forgot-password.html">忘记密码？</a>
            </div>
          </div>
        </form>
      </div>
    </section>
  </div>

  <script src="/theme.js"></script>
  <script>
    Theme.init();
  </script>
  <script>
    const form = document.getElementById('login-form');
    const messageEl = document.getElementById('message');
    const submitBtn = document.getElementById('submit-btn');

    async function checkSession() {
      try {
        const res = await fetch('/api/auth/session', { credentials: 'include' });
        const data = await res.json();
        if (data.authenticated) {
          window.location.replace('/');
        }
      } catch (error) {
        console.warn('Session check failed', error);
      }
    }

    checkSession();

    form.addEventListener('submit', async event => {
      event.preventDefault();
      hideMessage();

      const formData = new FormData(form);
      const email = formData.get('email').trim();
      const password = formData.get('password');

      if (!email || !password) {
        return showMessage('请输入邮箱和密码', 'error');
      }

      try {
        setSubmitting(true, '登录中…');
        const res = await fetch('/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ email, password })
        });

        const data = await res.json();

        if (!res.ok || !data.success) {
          const msg = data.message || '登录失败，请检查邮箱和密码。';
          showMessage(msg, 'error');
          setSubmitting(false);
          return;
        }

        showMessage('登录成功，正在跳转…', 'success');
        setSubmitting(true, '正在进入…');
        setTimeout(() => window.location.replace('/'), 600);
      } catch (error) {
        console.error(error);
        showMessage('网络异常，请稍后再试。', 'error');
        setSubmitting(false);
      }
    });

    function showMessage(text, type) {
      messageEl.textContent = text;
      messageEl.className = `message show ${type}`;
    }

    function hideMessage() {
      messageEl.textContent = '';
      messageEl.className = 'message';
    }

    function setSubmitting(active, label) {
      submitBtn.disabled = active;
      submitBtn.querySelector('span').textContent = label || '登录';
    }
  </script>
</body>
</html>


---
# public\presence.js

(() => {
  if (!window.io) return;
  if (window.__presenceSocket) return;

  const socket = io({
    autoConnect: false,
    withCredentials: true,
    auth: { mode: 'presence' }
  });

  window.__presenceSocket = socket;

  socket.on('connect_error', err => {
    console.warn('[presence] connect_error', err);
  });

  socket.on('auth-required', () => {
    socket.disconnect();
    delete window.__presenceSocket;
  });

  socket.on('mention', payload => {
    if (!payload) return;
    showMentionNotification(payload);
  });

  socket.on('disconnect', () => {
    delete window.__presenceSocket;
  });

  socket.connect();

  function showMentionNotification({ from, text }) {
    const bodyText = text || '';
    if (!('Notification' in window)) return;

    const message = {
      body: bodyText,
      tag: 'chat-mention',
      icon: '/favicon.ico'
    };

    if (Notification.permission === 'granted') {
      new Notification(`${from} 提到了你`, message);
      return;
    }

    if (Notification.permission === 'default') {
      Notification.requestPermission().then(result => {
        if (result === 'granted') {
          new Notification(`${from} 提到了你`, message);
        }
      });
    }
  }
})();


---
# public\register.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>注册 · 漫游聊天室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    (function () {
      try {
        var stored = localStorage.getItem('chat-theme');
        var theme = stored === 'dark' || stored === 'light'
          ? stored
          : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.dataset.theme = theme;
      } catch (e) {
        document.documentElement.dataset.theme = 'light';
      }
    })();
  </script>
  <style>
    :root {
      color-scheme: light dark;
      font-family: "Noto Sans SC","PingFang SC","Microsoft YaHei","Helvetica Neue",Arial,sans-serif;
      --bg: linear-gradient(180deg,#eef2ff,#f5f3ff);
      --bg-accent1: rgba(37,99,235,0.2);
      --bg-accent2: rgba(124,58,237,0.22);
      --card-bg: rgba(255,255,255,0.92);
      --card-shadow1: rgba(15,23,42,0.16);
      --card-shadow2: rgba(59,130,246,0.12);
      --text: #0f172a;
      --text-muted: #475569;
      --hero-bg: linear-gradient(150deg, rgba(37,99,235,0.94), rgba(124,58,237,0.88));
      --hero-text: rgba(255,255,255,0.86);
      --button-bg: linear-gradient(135deg,#2563eb,#7c3aed);
      --button-shadow1: rgba(79,70,229,0.32);
      --button-shadow2: rgba(37,99,235,0.2);
      --input-bg: rgba(255,255,255,0.86);
      --input-border: rgba(148,163,184,0.4);
      --badge-bg: rgba(15,23,42,0.18);
    }
    :root[data-theme="dark"] {
      --bg: linear-gradient(180deg,#0f172a,#111827);
      --bg-accent1: rgba(56,189,248,0.12);
      --bg-accent2: rgba(139,92,246,0.12);
      --card-bg: rgba(15,23,42,0.85);
      --card-shadow1: rgba(8,145,178,0.24);
      --card-shadow2: rgba(59,130,246,0.2);
      --text: #e2e8f0;
      --text-muted: #94a3b8;
      --hero-bg: linear-gradient(150deg, rgba(37,99,235,0.56), rgba(124,58,237,0.58));
      --hero-text: rgba(226,232,240,0.82);
      --button-shadow1: rgba(59,130,246,0.42);
      --button-shadow2: rgba(30,64,175,0.35);
      --input-bg: rgba(30,41,59,0.78);
      --input-border: rgba(148,163,184,0.32);
      --badge-bg: rgba(255,255,255,0.16);
    }
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: clamp(1.4rem, 4vw, 3rem);
      background:
        radial-gradient(130% 120% at 15% -10%, var(--bg-accent1), transparent 55%),
        radial-gradient(130% 120% at 75% 0%, var(--bg-accent2), transparent 60%),
        var(--bg);
      color: var(--text);
      transition: background 0.3s ease, color 0.3s ease;
    }
    .layout {
      width: min(1080px, 100%);
      display: grid;
      gap: clamp(2rem, 4vw, 3rem);
      grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
      align-items: stretch;
    }
    .card {
      background: var(--card-bg);
      border-radius: 32px;
      box-shadow:
        0 34px 76px var(--card-shadow1),
        0 18px 32px var(--card-shadow2);
      backdrop-filter: blur(22px);
      overflow: hidden;
      transition: background 0.3s ease, box-shadow 0.3s ease;
    }
    .card.hero {
      padding: clamp(2.2rem, 4vw, 3.4rem);
      display: flex;
      flex-direction: column;
      justify-content: center;
      gap: 1.8rem;
      background: var(--hero-bg);
      color: #ffffff;
      position: relative;
    }
    .card.hero::after {
      content: "";
      position: absolute;
      inset: 15% -25% auto auto;
      width: clamp(240px, 45vw, 360px);
      height: clamp(240px, 45vw, 360px);
      background: radial-gradient(circle, rgba(255,255,255,0.3), transparent 65%);
      opacity: 0.78;
      pointer-events: none;
    }
    .card.hero h1 {
      font-size: clamp(2.2rem, 4vw, 2.7rem);
      font-weight: 700;
      letter-spacing: 0.05em;
      line-height: 1.2;
    }
    .card.hero p {
      font-size: 1.05rem;
      line-height: 1.85;
      color: var(--hero-text);
      max-width: 440px;
    }
    .card.hero ul {
      list-style: none;
      display: grid;
      gap: 1.1rem;
    }
    .card.hero li {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      font-size: 1rem;
    }
    .card.hero li span {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 34px;
      height: 34px;
      border-radius: 12px;
      background: var(--badge-bg);
      font-weight: 600;
    }
    .form-wrap {
      padding: clamp(2.2rem, 4vw, 3.4rem);
      display: flex;
      flex-direction: column;
      gap: 1.8rem;
    }
    .form-header {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }
    .form-header h2 {
      font-size: clamp(1.8rem, 3vw, 2rem);
      font-weight: 700;
      letter-spacing: 0.04em;
    }
    .form-header p {
      color: var(--text-muted);
      font-size: 1rem;
      line-height: 1.7;
    }
    form {
      display: flex;
      flex-direction: column;
      gap: 1.4rem;
    }
    label {
      display: flex;
      flex-direction: column;
      gap: 0.55rem;
      font-weight: 600;
      color: var(--text);
      font-size: 1rem;
    }
    input[type="email"],
    input[type="text"],
    input[type="password"],
    input[type="url"] {
      width: 100%;
      padding: 0.95rem 1.15rem;
      border-radius: 18px;
      border: 1px solid var(--input-border);
      background: var(--input-bg);
      font: inherit;
      color: var(--text);
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }
    input:focus,
    input[type="file"]:focus-visible {
      outline: none;
      border-color: rgba(79,70,229,0.9);
      box-shadow: 0 0 0 4px rgba(79,70,229,0.18);
      background: rgba(255,255,255,0.97);
    }
    :root[data-theme="dark"] input:focus {
      background: rgba(15,23,42,0.92);
    }
    .two-col {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }
    .radio-group {
      display: grid;
      gap: 0.8rem;
    }
    .radio-option {
      display: flex;
      align-items: left;
      gap: 0.85rem;
      padding: 0.85rem 1.1rem;
      border: 1px solid rgba(148,163,184,0.3);
      border-radius: 18px;
      background: rgba(255,255,255,0.7);
      cursor: pointer;
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }
    :root[data-theme="dark"] .radio-option {
      background: rgba(30,41,59,0.72);
      border-color: rgba(148,163,184,0.25);
    }
    .radio-option input {
      accent-color: #6366f1;
      transform: scale(1.15);
    }
    .radio-option.active {
      border-color: rgba(79,70,229,0.9);
      background: rgba(255,255,255,0.95);
      box-shadow: 0 10px 24px rgba(79,70,229,0.16);
    }
    :root[data-theme="dark"] .radio-option.active {
      background: rgba(59,130,246,0.18);
      box-shadow: 0 10px 24px rgba(59,130,246,0.32);
    }
    .avatar-preview {
      display: flex;
      align-items: center;
      gap: 1.2rem;
      padding: 1rem 1.1rem;
      border-radius: 20px;
      background: rgba(15,23,42,0.05);
      border: 1px dashed rgba(79,70,229,0.22);
    }
    :root[data-theme="dark"] .avatar-preview {
      background: rgba(30,41,59,0.6);
      border-color: rgba(148,163,184,0.28);
    }
    .avatar-preview img {
      width: 72px;
      height: 72px;
      border-radius: 20px;
      object-fit: cover;
      box-shadow: 0 18px 32px rgba(15,23,42,0.18);
    }
    .avatar-preview span {
      color: var(--text-muted);
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .hidden {
      display: none !important;
    }
    .file-input {
      padding: 0.75rem;
      border-radius: 16px;
      border: 1px solid rgba(148,163,184,0.35);
      background: rgba(255,255,255,0.8);
      font-size: 0.95rem;
      color: var(--text-muted);
    }
    :root[data-theme="dark"] .file-input {
      background: rgba(30,41,59,0.65);
      border-color: rgba(148,163,184,0.32);
      color: #cbd5f5;
    }
    .actions {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
      margin-top: 0.6rem;
    }
    button[type="submit"] {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 1rem 1.8rem;
      border-radius: 999px;
      border: none;
      background: var(--button-bg);
      color: #ffffff;
      font-weight: 600;
      font-size: 1.02rem;
      cursor: pointer;
      box-shadow:
        0 20px 40px var(--button-shadow1),
        0 12px 26px var(--button-shadow2);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    button[type="submit"]:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow:
        0 24px 46px rgba(79,70,229,0.4),
        0 14px 30px rgba(37,99,235,0.24);
    }
    button[type="submit"]:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
    }
    .links {
      font-size: 0.96rem;
      color: var(--text-muted);
    }
    .links a {
      color: #2563eb;
      font-weight: 600;
      text-decoration: none;
    }
    .links a:hover {
      text-decoration: underline;
    }
    .message {
      display: none;
      padding: 0.9rem 1.1rem;
      border-radius: 18px;
      font-size: 0.97rem;
      line-height: 1.6;
    }
    .message.show {
      display: block;
    }
    .message.error {
      background: rgba(248,113,113,0.12);
      color: #b91c1c;
      border: 1px solid rgba(239,68,68,0.24);
    }
    .message.success {
      background: rgba(34,197,94,0.12);
      color: #047857;
      border: 1px solid rgba(16,185,129,0.2);
    }
    @media (max-width: 840px) {
      body {
        padding: 1.1rem;
      }
      .layout {
        gap: 1.5rem;
      }
      .card {
        border-radius: 26px;
      }
      .card.hero {
        border-radius: 26px;
      }
    }
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
  </style>
</head>
<body>
  <div class="layout">
    <section class="card hero">
      <h1>注册漫游聊天室</h1>
      <p>三步加入：填写邮箱、设置昵称与密码、选择头像。验证邮箱后即可发言。</p>
      <ul>
        <li><span>1</span> 支持 Cravatar（兼容 Gravatar）、外链或直接上传头像</li>
        <li><span>2</span> 注册后自动发送验证邮件，请在 24 小时内完成</li>
        <li><span>3</span> 未验证前可浏览消息，验证后解锁发言</li>
      </ul>
    </section>

    <section class="card">
      <div class="form-wrap">
        <div class="form-header">
          <h2>创建新账号</h2>
          <p>请填写以下信息。我们会向你的邮箱发送验证链接，请注意查收。</p>
        </div>

        <div id="message" class="message" role="alert"></div>

        <form id="register-form" enctype="multipart/form-data" novalidate>
          <label>
            邮箱
            <input type="email" name="email" required placeholder="name@example.com" autocomplete="email">
          </label>

          <label>
            昵称
            <input type="text" name="displayName" required maxlength="32" placeholder="给自己起个名字">
          </label>

          <div class="two-col">
            <label>
              密码
              <input type="password" name="password" required minlength="8" autocomplete="new-password" placeholder="至少 8 个字符">
            </label>
            <label>
              确认密码
              <input type="password" name="passwordConfirm" required minlength="8" autocomplete="new-password" placeholder="再输入一次密码">
            </label>
          </div>

          <div>
            <label>头像选择</label>
            <div class="radio-group" id="avatar-options">
              <label class="radio-option active">
                <input type="radio" name="avatarSource" value="gravatar" checked>
                <div>
                  <strong>使用 Cravatar</strong>
                  <div>兼容 Gravatar，国内节点更快。邮箱没有头像时会生成 identicon。</div>
                </div>
              </label>

              <label class="radio-option">
                <input type="radio" name="avatarSource" value="url">
                <div>
                  <strong>自定义图片链接</strong>
                  <div>填写一张公开的 http(s) 图片地址作为头像。</div>
                </div>
              </label>

              <label class="radio-option">
                <input type="radio" name="avatarSource" value="upload">
                <div>
                  <strong>上传到服务器</strong>
                  <div>支持 PNG / JPG / GIF / WebP，最大 10 MB。</div>
                </div>
              </label>
            </div>
          </div>

          <label id="avatar-url-field" class="hidden">
            头像图片链接
            <input type="url" name="avatarUrl" placeholder="https://example.com/avatar.png">
          </label>

          <label id="avatar-file-field" class="hidden">
            上传头像
            <input class="file-input" type="file" name="avatarFile" accept="image/png,image/jpeg,image/jpg,image/gif,image/webp">
          </label>

          <div class="avatar-preview" id="avatar-preview">
            <img id="preview-image" src="https://cravatar.cn/avatar?d=identicon&s=160" alt="头像预览">
            <span id="preview-text">当前预览：Cravatar 自动生成（兼容 Gravatar，国内加载更快）。</span>
          </div>

          <div class="actions">
            <button type="submit" id="submit-btn">
              <span>完成注册并发送验证邮件</span>
            </button>
            <div class="links">
              已有账号？<a href="/login.html">直接登录</a>
            </div>
          </div>
        </form>
      </div>
    </section>
  </div>

  <script src="/theme.js"></script>
  <script>
    Theme.init();
  </script>
  <script>
    const form = document.getElementById('register-form');
    const messageEl = document.getElementById('message');
    const submitBtn = document.getElementById('submit-btn');

    const radioOptions = Array.from(document.querySelectorAll('#avatar-options .radio-option'));
    const avatarUrlField = document.getElementById('avatar-url-field');
    const avatarFileField = document.getElementById('avatar-file-field');
    const previewImage = document.getElementById('preview-image');
    const previewText = document.getElementById('preview-text');
    const emailInput = form.email;

    function md5(str) {
      function add32(a, b) { return (a + b) & 0xffffffff; }
      function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
      }
      function ff(a, b, c, d, x, s, t) { return cmn((b & c) | (~b & d), a, b, x, s, t); }
      function gg(a, b, c, d, x, s, t) { return cmn((b & d) | (c & ~d), a, b, x, s, t); }
      function hh(a, b, c, d, x, s, t) { return cmn(b ^ c ^ d, a, b, x, s, t); }
      function ii(a, b, c, d, x, s, t) { return cmn(c ^ (b | ~d), a, b, x, s, t); }
      function md5blk(s) {
        const blocks = new Array(16);
        for (let i = 0; i < 16; i++) {
          blocks[i] = s.charCodeAt(i * 4) +
            (s.charCodeAt(i * 4 + 1) << 8) +
            (s.charCodeAt(i * 4 + 2) << 16) +
            (s.charCodeAt(i * 4 + 3) << 24);
        }
        return blocks;
      }
      function calcMD5(x, k) {
        let [a, b, c, d] = x;
        a = ff(a, b, c, d, k[0], 7, -680876936);
        d = ff(d, a, b, c, k[1], 12, -389564586);
        c = ff(c, d, a, b, k[2], 17, 606105819);
        b = ff(b, c, d, a, k[3], 22, -1044525330);
        a = ff(a, b, c, d, k[4], 7, -176418897);
        d = ff(d, a, b, c, k[5], 12, 1200080426);
        c = ff(c, d, a, b, k[6], 17, -1473231341);
        b = ff(b, c, d, a, k[7], 22, -45705983);
        a = ff(a, b, c, d, k[8], 7, 1770035416);
        d = ff(d, a, b, c, k[9], 12, -1958414417);
        c = ff(c, d, a, b, k[10], 17, -42063);
        b = ff(b, c, d, a, k[11], 22, -1990404162);
        a = ff(a, b, c, d, k[12], 7, 1804603682);
        d = ff(d, a, b, c, k[13], 12, -40341101);
        c = ff(c, d, a, b, k[14], 17, -1502002290);
        b = ff(b, c, d, a, k[15], 22, 1236535329);
        a = gg(a, b, c, d, k[1], 5, -165796510);
        d = gg(d, a, b, c, k[6], 9, -1069501632);
        c = gg(c, d, a, b, k[11], 14, 643717713);
        b = gg(b, c, d, a, k[0], 20, -373897302);
        a = gg(a, b, c, d, k[5], 5, -701558691);
        d = gg(d, a, b, c, k[10], 9, 38016083);
        c = gg(c, d, a, b, k[15], 14, -660478335);
        b = gg(b, c, d, a, k[4], 20, -405537848);
        a = gg(a, b, c, d, k[9], 5, 568446438);
        d = gg(d, a, b, c, k[14], 9, -1019803690);
        c = gg(c, d, a, b, k[3], 14, -187363961);
        b = gg(b, c, d, a, k[8], 20, 1163531501);
        a = gg(a, b, c, d, k[13], 5, -1444681467);
        d = gg(d, a, b, c, k[2], 9, -51403784);
        c = gg(c, d, a, b, k[7], 14, 1735328473);
        b = gg(b, c, d, a, k[12], 20, -1926607734);
        a = hh(a, b, c, d, k[5], 4, -378558);
        d = hh(d, a, b, c, k[8], 11, -2022574463);
        c = hh(c, d, a, b, k[11], 16, 1839030562);
        b = hh(b, c, d, a, k[14], 23, -35309556);
        a = hh(a, b, c, d, k[1], 4, -1530992060);
        d = hh(d, a, b, c, k[4], 11, 1272893353);
        c = hh(c, d, a, b, k[7], 16, -155497632);
        b = hh(b, c, d, a, k[10], 23, -1094730640);
        a = hh(a, b, c, d, k[13], 4, 681279174);
        d = hh(d, a, b, c, k[0], 11, -358537222);
        c = hh(c, d, a, b, k[3], 16, -722521979);
        b = hh(b, c, d, a, k[6], 23, 76029189);
        a = hh(a, b, c, d, k[9], 4, -640364487);
        d = hh(d, a, b, c, k[12], 11, -421815835);
        c = hh(c, d, a, b, k[15], 16, 530742520);
        b = hh(b, c, d, a, k[2], 23, -995338651);
        a = ii(a, b, c, d, k[0], 6, -198630844);
        d = ii(d, a, b, c, k[7], 10, 1126891415);
        c = ii(c, d, a, b, k[14], 15, -1416354905);
        b = ii(b, c, d, a, k[5], 21, -57434055);
        a = ii(a, b, c, d, k[12], 6, 1700485571);
        d = ii(d, a, b, c, k[3], 10, -1894986606);
        c = ii(c, d, a, b, k[10], 15, -1051523);
        b = ii(b, c, d, a, k[1], 21, -2054922799);
        a = ii(a, b, c, d, k[8], 6, 1873313359);
        d = ii(d, a, b, c, k[15], 10, -30611744);
        c = ii(c, d, a, b, k[6], 15, -1560198380);
        b = ii(b, c, d, a, k[13], 21, 1309151649);
        a = ii(a, b, c, d, k[4], 6, -145523070);
        d = ii(d, a, b, c, k[11], 10, -1120210379);
        c = ii(c, d, a, b, k[2], 15, 718787259);
        b = ii(b, c, d, a, k[9], 21, -343485551);
        x[0] = add32(a, x[0]);
        x[1] = add32(b, x[1]);
        x[2] = add32(c, x[2]);
        x[3] = add32(d, x[3]);
      }
      function md51(s) {
        let txt = unescape(encodeURIComponent(s));
        const n = txt.length;
        const state = [1732584193, -271733879, -1732584194, 271733878];
        let i;
        for (i = 64; i <= n; i += 64) calcMD5(state, md5blk(txt.substring(i - 64, i)));
        txt = txt.substring(i - 64);
        const tail = new Array(16).fill(0);
        for (i = 0; i < txt.length; i++) tail[i >> 2] |= txt.charCodeAt(i) << ((i % 4) << 3);
        tail[txt.length >> 2] |= 0x80 << ((txt.length % 4) << 3);
        if (txt.length > 55) {
          calcMD5(state, tail);
          tail.fill(0);
        }
        tail[14] = n * 8;
        calcMD5(state, tail);
        return state;
      }
      function hex(x) {
        const h = [];
        for (let i = 0; i < x.length * 4; i++) {
          h.push(((x[i >> 2] >> ((i % 4) << 3)) & 0xff).toString(16).padStart(2, '0'));
        }
        return h.join('');
      }
      return hex(md51(str));
    }

    function normalizedEmail() {
      return (emailInput.value || '').trim().toLowerCase();
    }

    function cravatarUrl() {
      const email = normalizedEmail();
      if (!email) {
        return 'https://cravatar.cn/avatar?d=identicon&s=160';
      }
      return `https://cravatar.cn/avatar/${md5(email)}?d=identicon&s=160`;
    }

    function updateCravatarPreview() {
      if (document.querySelector('input[name="avatarSource"]:checked').value !== 'gravatar') {
        return;
      }
      previewImage.src = cravatarUrl();
      previewText.textContent = normalizedEmail()
        ? '当前预览：Cravatar 根据邮箱生成。'
        : '当前预览：Cravatar 自动生成（兼容 Gravatar，国内节点加速）。';
    }

    async function checkSession() {
      try {
        const res = await fetch('/api/auth/session', { credentials: 'include' });
        const data = await res.json();
        if (data.authenticated) {
          window.location.replace('/');
        }
      } catch (error) {
        console.warn('Session check failed', error);
      }
    }

    checkSession();

    radioOptions.forEach(option => {
      option.addEventListener('change', handleAvatarChange);
      option.addEventListener('click', () => {
        option.querySelector('input').checked = true;
        handleAvatarChange();
      });
    });

    function handleAvatarChange() {
      radioOptions.forEach(option => option.classList.remove('active'));
      const activeInput = document.querySelector('input[name="avatarSource"]:checked');
      const activeOption = activeInput.closest('.radio-option');
      activeOption.classList.add('active');

      const source = activeInput.value;
      avatarUrlField.classList.toggle('hidden', source !== 'url');
      avatarFileField.classList.toggle('hidden', source !== 'upload');

      if (source === 'gravatar') {
        updateCravatarPreview();
      } else if (source === 'url') {
        const url = form.avatarUrl.value.trim();
        if (url) {
          previewImage.src = url;
          previewText.textContent = '当前预览：自定义链接头像。';
        } else {
          previewImage.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
          previewText.textContent = '请填写头像链接后预览。';
        }
      } else {
        previewImage.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
        previewText.textContent = '上传一张图片作为头像（支持 PNG / JPG / GIF / WebP）。';
      }
    }

    emailInput.addEventListener('input', updateCravatarPreview);

    form.avatarUrl.addEventListener('input', () => {
      if (document.querySelector('input[name="avatarSource"]:checked').value === 'url') {
        const url = form.avatarUrl.value.trim();
        if (url) {
          previewImage.src = url;
          previewText.textContent = '当前预览：自定义链接头像。';
        } else {
          previewImage.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
          previewText.textContent = '请填写头像链接后预览。';
        }
      }
    });

    form.avatarFile.addEventListener('change', () => {
      const file = form.avatarFile.files[0];
      if (!file) {
        previewImage.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
        previewText.textContent = '上传一张图片作为头像（支持 PNG / JPG / GIF / WebP）。';
        return;
      }
      const url = URL.createObjectURL(file);
      previewImage.src = url;
      previewText.textContent = `已选择：${file.name}（${Math.round(file.size / 1024)} KB）`;
    });

    form.addEventListener('submit', async event => {
      event.preventDefault();
      hideMessage();

      if (!form.reportValidity()) {
        return;
      }

      const password = form.password.value;
      const passwordConfirm = form.passwordConfirm.value;

      if (password !== passwordConfirm) {
        return showMessage('两次输入的密码不一致，请重新确认。', 'error');
      }

      const source = form.avatarSource.value;
      if (source === 'url' && !form.avatarUrl.value.trim()) {
        return showMessage('请选择头像来源或填写图片链接。', 'error');
      }
      if (source === 'upload' && form.avatarFile.files.length === 0) {
        return showMessage('请选择要上传的头像图片。', 'error');
      }

      try {
        setSubmitting(true, '正在注册…');
        const formData = new FormData(form);
        const res = await fetch('/api/auth/register', {
          method: 'POST',
          credentials: 'include',
          body: formData
        });
        const data = await res.json();

        if (!res.ok || !data.success) {
          const msg = data.message || '注册失败，请稍后再试。';
          showMessage(msg, 'error');
          setSubmitting(false);
          return;
        }

        showMessage('注册成功！验证邮件已发送，请在 24 小时内完成验证。', 'success');
        setSubmitting(true, '即将跳转…');
        setTimeout(() => window.location.replace('/login.html'), 1500);
      } catch (error) {
        console.error(error);
        showMessage('服务器开小差了，请稍后再试。', 'error');
        setSubmitting(false);
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      if (window.location.hash === '#resend') {
        showMessage('如果没有收到验证邮件，请检查垃圾邮件或稍后重试注册。', 'success');
      }
    });

    function showMessage(text, type) {
      messageEl.textContent = text;
      messageEl.className = `message show ${type}`;
    }

    function hideMessage() {
      messageEl.textContent = '';
      messageEl.className = 'message';
    }

    function setSubmitting(active, label) {
      submitBtn.disabled = active;
      submitBtn.querySelector('span').textContent = label || '完成注册并发送验证邮件';
    }

    handleAvatarChange();
    updateCravatarPreview();
  </script>
</body>
</html>


---
# public\settings.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>个人设置 · 漫游聊天室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    (function () {
      try {
        var stored = localStorage.getItem('chat-theme');
        var theme = stored === 'dark' || stored === 'light'
          ? stored
          : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.dataset.theme = theme;
      } catch (e) {
        document.documentElement.dataset.theme = 'light';
      }
    })();
  </script>
  <style>
    :root {
      color-scheme: light dark;
      font-family: "Noto Sans SC","PingFang SC","Microsoft YaHei","Helvetica Neue",Arial,sans-serif;
      --bg: linear-gradient(180deg,#eef2ff,#f5f3ff);
      --bg-accent1: rgba(37,99,235,0.2);
      --bg-accent2: rgba(124,58,237,0.22);
      --card-bg: rgba(255,255,255,0.92);
      --card-shadow1: rgba(15,23,42,0.16);
      --card-shadow2: rgba(59,130,246,0.12);
      --text: #0f172a;
      --text-muted: #475569;
      --text-muted-strong: #1f2937;
      --side-bg: linear-gradient(150deg, rgba(37,99,235,0.94), rgba(124,58,237,0.88));
      --side-text: rgba(255,255,255,0.88);
      --badge-bg: rgba(15,23,42,0.22);
      --badge-success: rgba(16,185,129,0.28);
      --badge-warn: rgba(251,191,36,0.35);
      --input-bg: rgba(255,255,255,0.88);
      --input-border: rgba(148,163,184,0.4);
      --radio-bg: rgba(255,255,255,0.74);
      --radio-border: rgba(148,163,184,0.3);
      --radio-active-bg: rgba(255,255,255,0.96);
      --radio-active-shadow: rgba(79,70,229,0.15);
      --preview-bg: rgba(15,23,42,0.05);
      --preview-border: rgba(79,70,229,0.22);
      --button-bg: linear-gradient(135deg,#2563eb,#7c3aed);
      --button-secondary-bg: rgba(15,23,42,0.08);
      --download-card-bg: rgba(37,99,235,0.08);
      --download-card-border: rgba(148,163,184,0.28);
      --download-card-accent: rgba(37,99,235,0.12);
    }
    :root[data-theme="dark"] {
      --bg: linear-gradient(180deg,#0f172a,#111827);
      --bg-accent1: rgba(56,189,248,0.12);
      --bg-accent2: rgba(139,92,246,0.12);
      --card-bg: rgba(15,23,42,0.85);
      --card-shadow1: rgba(8,145,178,0.24);
      --card-shadow2: rgba(59,130,246,0.18);
      --text: #e2e8f0;
      --text-muted: #94a3b8;
      --text-muted-strong: #cbd5f5;
      --side-bg: linear-gradient(150deg, rgba(37,99,235,0.56), rgba(124,58,237,0.58));
      --side-text: rgba(226,232,240,0.88);
      --badge-bg: rgba(255,255,255,0.18);
      --badge-success: rgba(34,197,94,0.25);
      --badge-warn: rgba(250,204,21,0.35);
      --input-bg: rgba(30,41,59,0.78);
      --input-border: rgba(148,163,184,0.35);
      --radio-bg: rgba(30,41,59,0.74);
      --radio-border: rgba(148,163,184,0.28);
      --radio-active-bg: rgba(59,130,246,0.22);
      --radio-active-shadow: rgba(59,130,246,0.3);
      --preview-bg: rgba(30,41,59,0.6);
      --preview-border: rgba(148,163,184,0.28);
      --button-secondary-bg: rgba(148,163,184,0.2);
      --download-card-bg: rgba(59,130,246,0.14);
      --download-card-border: rgba(96,165,250,0.3);
      --download-card-accent: rgba(96,165,250,0.18);
    }
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: clamp(1.2rem, 3vw, 2.6rem);
      background:
        radial-gradient(130% 120% at 18% -10%, var(--bg-accent1), transparent 55%),
        radial-gradient(130% 120% at 80% 0%, var(--bg-accent2), transparent 60%),
        var(--bg);
      color: var(--text);
      transition: background 0.3s ease, color 0.3s ease;
    }
    .layout {
      width: min(1320px, 100%);
      display: grid;
      gap: clamp(1.8rem, 3vw, 2.6rem);
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      align-items: stretch;
    }
    .card {
      background: var(--card-bg);
      border-radius: 32px;
      box-shadow:
        0 34px 76px var(--card-shadow1),
        0 18px 36px var(--card-shadow2);
      backdrop-filter: blur(26px);
      overflow: hidden;
      transition: background 0.3s ease, box-shadow 0.3s ease;
    }
    .card.side {
      padding: clamp(2.2rem, 4vw, 3.2rem);
      display: flex;
      flex-direction: column;
      gap: 2rem;
      background: var(--side-bg);
      color: #ffffff;
      position: relative;
    }
    .card.side::after {
      content: "";
      position: absolute;
      inset: 20% -25% auto auto;
      width: clamp(240px, 45vw, 360px);
      height: clamp(240px, 45vw, 360px);
      background: radial-gradient(circle, rgba(255,255,255,0.3), transparent 65%);
      opacity: 0.78;
      pointer-events: none;
    }
    .side-header h1 {
      font-size: clamp(2rem, 4vw, 2.4rem);
      font-weight: 700;
      letter-spacing: 0.05em;
    }
    .side-header p {
      margin-top: 0.8rem;
      font-size: 1.04rem;
      line-height: 1.85;
      color: var(--side-text);
    }
    .profile-card {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
      padding: 1.6rem;
      border-radius: 26px;
      background: rgba(15,23,42,0.18);
      backdrop-filter: blur(14px);
    }
    .profile-card header {
      display: flex;
      align-items: center;
      gap: 1.2rem;
    }
    .profile-card img {
      width: 80px;
      height: 80px;
      border-radius: 24px;
      object-fit: cover;
      box-shadow: 0 18px 34px rgba(15,23,42,0.3);
    }
    .profile-card h2 { font-size: 1.35rem; font-weight: 700; letter-spacing: 0.04em; }
    .profile-card p { font-size: 0.95rem; color: rgba(255,255,255,0.82); }
    .badge {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      padding: 0.35rem 0.75rem;
      border-radius: 999px;
      font-size: 0.85rem;
      font-weight: 600;
      background: var(--badge-bg);
      color: #ffffff;
    }
    .badge.success { background: var(--badge-success); }
    .badge.warn { background: var(--badge-warn); }
    .card.main,
    .card.downloads {
      padding: clamp(2.1rem, 3.4vw, 3.1rem);
      display: flex;
      flex-direction: column;
      gap: 1.8rem;
    }
    .card.downloads { gap: 1.4rem; }
    .main-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .main-header h2 {
      font-size: clamp(1.8rem, 3vw, 1.95rem);
      font-weight: 700;
      letter-spacing: 0.04em;
    }
    .main-header button {
      border: none;
      border-radius: 999px;
      padding: 0.65rem 1.4rem;
      background: rgba(15,23,42,0.08);
      color: var(--text-muted-strong);
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s ease;
    }
    .main-header button:hover { background: rgba(15,23,42,0.14); }
    :root[data-theme="dark"] .main-header button {
      background: rgba(148,163,184,0.22);
      color: #e2e8f0;
    }
    .message {
      display: none;
      padding: 0.9rem 1.1rem;
      border-radius: 18px;
      font-size: 0.96rem;
      line-height: 1.6;
    }
    .message.show { display: block; }
    .message.error {
      background: rgba(248,113,113,0.12);
      color: #b91c1c;
      border: 1px solid rgba(239,68,68,0.24);
    }
    .message.success {
      background: rgba(34,197,94,0.12);
      color: #047857;
      border: 1px solid rgba(16,185,129,0.2);
    }
    .form-section { display: grid; gap: 1.6rem; }
    label {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
      font-weight: 600;
      color: var(--text-muted-strong);
      font-size: 0.98rem;
    }
    input[type="text"], input[type="url"], input[type="email"],
    input[type="password"], input[type="number"] {
      padding: 0.95rem 1.15rem;
      border-radius: 18px;
      border: 1px solid var(--input-border);
      background: var(--input-bg);
      font: inherit;
      color: var(--text);
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }
    input:focus,
    input[type="file"]:focus-visible {
      outline: none;
      border-color: rgba(79,70,229,0.88);
      box-shadow: 0 0 0 4px rgba(79,70,229,0.18);
      background: rgba(255,255,255,0.97);
    }
    :root[data-theme="dark"] input:focus { background: rgba(15,23,42,0.9); }
    .readonly {
      background: rgba(15,23,42,0.04);
      border-style: dashed;
      color: var(--text-muted);
    }
    :root[data-theme="dark"] .readonly { background: rgba(30,41,59,0.5); }
    .grid-two {
      display: grid;
      gap: 1.1rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }
    .radio-group { display: grid; gap: 0.8rem; }
    .radio-option {
      display: flex;
      align-items: left;
      gap: 0.85rem;
      padding: 0.85rem 1.1rem;
      border-radius: 18px;
      border: 1px solid var(--radio-border);
      background: var(--radio-bg);
      cursor: pointer;
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }
    .radio-option input { accent-color: #6366f1; transform: scale(1.1); }
    .radio-option.active {
      border-color: rgba(79,70,229,0.9);
      background: var(--radio-active-bg);
      box-shadow: 0 10px 24px var(--radio-active-shadow);
    }
    .file-input {
      padding: 0.75rem;
      border-radius: 16px;
      border: 1px solid rgba(148,163,184,0.35);
      background: rgba(255,255,255,0.82);
      font-size: 0.95rem;
      color: var(--text-muted);
    }
    :root[data-theme="dark"] .file-input {
      background: rgba(30,41,59,0.6);
      border-color: rgba(148,163,184,0.32);
      color: #cbd5f5;
    }
    .hidden { display: none !important; }
    .preview {
      display: flex;
      align-items: center;
      gap: 1.2rem;
      padding: 1rem 1.1rem;
      border-radius: 20px;
      background: var(--preview-bg);
      border: 1px dashed var(--preview-border);
    }
    .preview img {
      width: 72px;
      height: 72px;
      border-radius: 20px;
      object-fit: cover;
      box-shadow: 0 18px 32px rgba(15,23,42,0.18);
    }
    .preview span {
      color: var(--text-muted);
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .form-subtitle {
      font-size: 1.05rem;
      font-weight: 700;
      margin-bottom: 0.4rem;
      color: var(--text);
    }
    .actions {
      display: flex;
      gap: 0.9rem;
      flex-wrap: wrap;
      margin-top: 0.6rem;
    }
    .actions button {
      border: none;
      border-radius: 999px;
      padding: 0.95rem 1.6rem;
      background: var(--button-bg);
      color: #ffffff;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      box-shadow:
        0 18px 34px rgba(79,70,229,0.3),
        0 12px 24px rgba(37,99,235,0.2);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .actions button:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow:
        0 22px 40px rgba(79,70,229,0.38),
        0 14px 28px rgba(37,99,235,0.24);
    }
    .actions button.secondary {
      background: var(--button-secondary-bg);
      color: var(--text-muted-strong);
      box-shadow: none;
    }
    .actions button:disabled { opacity: 0.6; cursor: not-allowed; box-shadow: none; }
    .inline-control {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      font-weight: 600;
      color: var(--text-muted-strong);
    }
    .inline-control input[type="checkbox"] {
      width: 44px;
      height: 24px;
      border-radius: 999px;
      border: 1px solid rgba(148,163,184,0.3);
      appearance: none;
      background: rgba(148,163,184,0.25);
      position: relative;
      transition: background 0.2s ease;
    }
    .inline-control input[type="checkbox"]::before {
      content: "";
      position: absolute;
      top: 3px;
      left: 3px;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: #ffffff;
      transition: transform 0.2s ease;
    }
    .inline-control input[type="checkbox"]:checked {
      background: linear-gradient(135deg,#2563eb,#7c3aed);
    }
    .inline-control input[type="checkbox"]:checked::before {
      transform: translateX(20px);
    }
    :root[data-theme="dark"] .inline-control input[type="checkbox"] {
      background: rgba(148,163,184,0.35);
      border-color: rgba(148,163,184,0.35);
    }
    .downloads h2 {
      font-size: clamp(1.6rem, 3vw, 1.9rem);
      font-weight: 700;
      color: var(--text);
    }
    .downloads > p {
      color: var(--text-muted);
      font-size: 0.92rem;
      line-height: 1.6;
    }
    .download-grid {
      display: grid;
      gap: 1.2rem;
      grid-template-columns: 1fr;
    }
    .download-card {
      padding: 1rem 1.3rem;
      border-radius: 20px;
      border: 1px solid var(--download-card-border);
      background: var(--download-card-bg);
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
    }
    .download-card h4 { font-size: 1rem; font-weight: 700; color: var(--text); }
    .download-card p { font-size: 0.9rem; color: var(--text-muted); line-height: 1.6; }
    .download-card form,
    .download-card .download-controls { display: grid; gap: 0.8rem; }
    .download-card button {
      justify-self: flex-start;
      padding: 0.75rem 1.4rem;
      border-radius: 999px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #fff;
      box-shadow: 0 12px 24px rgba(79,70,229,0.24);
      transition: transform 0.15s ease, box-shadow 0.15s ease;
    }
    .download-card button:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow: 0 16px 30px rgba(79,70,229,0.32);
    }
    .download-card button:disabled { opacity: 0.6; cursor: not-allowed; box-shadow: none; }
    .download-hint { font-size: 0.85rem; color: var(--text-muted); }
    .download-list { display: grid; gap: 0.9rem; }
    .download-row {
      display: grid;
      grid-template-columns: minmax(0,1fr) auto;
      gap: 0.9rem;
      align-items: center;
      padding: 0.85rem 1rem;
      border-radius: 18px;
      background: rgba(37,99,235,0.08);
      border: 1px solid rgba(148,163,184,0.2);
    }
    .download-row strong { display: block; font-size: 0.95rem; color: var(--text); word-break: break-all; }
    .download-row span { font-size: 0.85rem; color: var(--text-muted); }
    .download-row button {
      padding: 0.65rem 1.2rem;
      border-radius: 999px;
      border: none;
      background: linear-gradient(135deg,#2563eb,#7c3aed);
      color: #fff;
      font-weight: 600;
      cursor: pointer;
      box-shadow: 0 10px 20px rgba(79,70,229,0.22);
    }
    .download-empty {
      text-align: center;
      padding: 1.2rem;
      color: var(--text-muted);
      font-size: 0.92rem;
      background: rgba(148,163,184,0.12);
      border-radius: 18px;
    }
    @media (max-width: 860px) {
      body { padding: 1.1rem; }
      .layout { gap: 1.4rem; }
      .card, .card.side { border-radius: 26px; }
    }
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
  </style>
</head>
<body>
  <div class="layout">
    <aside class="card side">
      <div class="side-header">
        <h1>个人设置</h1>
        <p>修改昵称、头像来源或主题。邮箱未验证时可重发验证邮件，完成后即可发言。</p>
      </div>
      <div class="profile-card">
        <header>
          <img id="profile-avatar" src="https://cravatar.cn/avatar?d=identicon&s=160" alt="当前头像">
          <div>
            <h2 id="profile-name">加载中…</h2>
            <p id="profile-email">请稍候</p>
          </div>
        </header>
        <div id="verification-badge" class="badge">验证状态加载中…</div>
      </div>
      <button class="badge secondary" id="back-link" style="align-self:flex-start; border:none; background:rgba(255,255,255,0.1); cursor:pointer;">
        ← 返回聊天室
      </button>
    </aside>

    <main class="card main">
      <div class="main-header">
        <div>
          <h2>资料与偏好</h2>
          <p style="margin-top:0.4rem; color:var(--text-muted); line-height:1.6;">
            修改会立即保存，重新进入聊天室即可看到最新资料。
          </p>
        </div>
        <button id="logout-btn">退出登录</button>
      </div>

      <div id="message" class="message" role="alert"></div>

      <form id="settings-form" class="form-section" enctype="multipart/form-data" novalidate>
        <label>
          注册邮箱
          <input type="email" id="email-display" class="readonly" readonly>
        </label>

        <div class="grid-two">
          <label>
            昵称
            <input type="text" name="displayName" id="display-name" maxlength="32" required placeholder="请输入新的昵称">
          </label>

          <label>
            邮箱验证状态
            <div style="display:flex; gap:0.6rem; align-items:center; flex-wrap:wrap;">
              <input type="text" id="verification-status" class="readonly" readonly style="flex:1;">
              <button type="button" id="verification-resend" class="badge secondary" style="display:none; border:none; cursor:pointer;">
                重新发送验证邮件
              </button>
            </div>
          </label>
        </div>

        <div class="inline-control">
          <input type="checkbox" id="theme-toggle">
          <label for="theme-toggle" style="margin:0;">启用深色模式</label>
        </div>

        <div>
          <label>头像来源</label>
          <div class="radio-group" id="avatar-options">
            <label class="radio-option">
              <input type="radio" name="avatarSource" value="gravatar">
              <div>
                <strong>Cravatar</strong>
                <div>兼容 Gravatar，国内节点加速。</div>
              </div>
            </label>
            <label class="radio-option">
              <input type="radio" name="avatarSource" value="url">
              <div>
                <strong>图片链接</strong>
                <div>引用一张公开的 http(s) 图片作为头像。</div>
              </div>
            </label>
            <label class="radio-option">
              <input type="radio" name="avatarSource" value="upload">
              <div>
                <strong>上传文件</strong>
                <div>图片保存在服务器，支持 PNG / JPG / GIF / WebP。</div>
              </div>
            </label>
          </div>
        </div>

        <label id="avatar-url-field" class="hidden">
          头像图片链接
          <input type="url" name="avatarUrl" id="avatar-url" placeholder="https://example.com/avatar.png">
        </label>

        <label id="avatar-file-field" class="hidden">
          上传头像
          <input class="file-input" type="file" name="avatarFile" id="avatar-file" accept="image/png,image/jpeg,image/jpg,image/gif,image/webp">
        </label>

        <div class="preview">
          <img id="preview-image" src="https://cravatar.cn/avatar?d=identicon&s=160" alt="头像预览">
          <span id="preview-text">头像预览将根据当前选择即时更新。</span>
        </div>

        <div class="actions">
          <button type="submit" id="submit-btn">保存修改</button>
          <button type="button" class="secondary" id="back-btn">返回聊天室</button>
        </div>
      </form>

      <section class="form-section" style="margin-top:1.4rem;">
        <h3 class="form-subtitle">修改密码</h3>
        <form id="password-form" class="form-section" novalidate>
          <label>
            旧密码
            <input type="password" name="oldPassword" id="old-password" autocomplete="current-password" required placeholder="请输入旧密码">
          </label>
          <div class="grid-two">
            <label>
              新密码
              <input type="password" name="newPassword" id="new-password" autocomplete="new-password" required placeholder="至少 8 个字符">
            </label>
            <label>
              确认新密码
              <input type="password" name="confirmPassword" id="confirm-password" autocomplete="new-password" required placeholder="再输入一次新密码">
            </label>
          </div>
          <div class="actions">
            <button type="submit" id="password-submit">更新密码</button>
          </div>
        </form>
      </section>
    </main>

    <section class="card downloads">
      <h2>高速下载面板</h2>
      <p>配置下载策略、按编码下载聊天文件，或使用多线程下载任意 URL。</p>

      <div class="download-grid">
        <div class="download-card">
          <h4>下载设置</h4>
          <p>开启高速模式后，下载聊天文件会使用多线程分块方式，可自定义并发数量。</p>
          <div class="download-controls">
            <label class="inline-control">
              <input type="checkbox" id="dl-enable-toggle">
              <span>启用高速下载</span>
            </label>
            <label>
              并行线程数
              <input type="number" id="dl-concurrency" min="1" max="8" value="4">
              <span class="download-hint">推荐 3~6 线程，过高可能导致服务器限速。</span>
            </label>
            <label>
              分块大小（KB）
              <input type="number" id="dl-chunk" min="128" max="8192" step="128" value="2048">
              <span class="download-hint">默认 2048 KB，可根据网络情况调整。</span>
            </label>
          </div>
        </div>

        <div class="download-card">
          <h4>按文件编码下载</h4>
          <p>输入在聊天室收到的 8 位文件编码，直接使用高速下载器获取文件。</p>
          <form id="code-download-form" novalidate>
            <label>
              文件编码
              <input type="text" id="code-download-input" maxlength="64" placeholder="例如：ABCD1234" required>
            </label>
            <button type="submit" id="code-download-submit">下载文件</button>
            <div id="code-download-message" class="download-hint"></div>
          </form>
        </div>

        <div class="download-card">
          <h4>下载任意 URL</h4>
          <p>输入直链 URL，可使用同样的多线程下载逻辑（需服务器支持 Range 请求）。</p>
          <form id="url-download-form" novalidate>
            <label>
              文件地址
              <input type="url" id="url-download-input" placeholder="https://example.com/file.zip" required>
            </label>
            <label>
              自定义文件名
              <input type="text" id="url-download-name" placeholder="可选，例如 file.zip">
            </label>
            <button type="submit" id="url-download-submit">开始下载</button>
            <div id="url-download-message" class="download-hint"></div>
          </form>
        </div>
      </div>

      <section style="margin-top:1.4rem;">
        <h4 style="font-size:1rem; font-weight:700; color:var(--text);">我上传的文件</h4>
        <p class="download-hint">下方列出你在聊天室上传的所有文件，可随时重新下载。</p>
        <div id="upload-list" class="download-list"></div>
        <div id="upload-empty" class="download-empty" hidden>尚未上传过文件。</div>
      </section>
    </section>
  </div>

  <script src="/theme.js"></script>
  <script src="/download-manager.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/presence.js"></script>
  <script>
    Theme.init();
  </script>
  <script>
    const profileAvatar = document.getElementById('profile-avatar');
    const profileName = document.getElementById('profile-name');
    const profileEmail = document.getElementById('profile-email');
    const verificationBadge = document.getElementById('verification-badge');
    const emailDisplay = document.getElementById('email-display');
    const verificationStatus = document.getElementById('verification-status');
    const verificationResend = document.getElementById('verification-resend');
    const displayNameInput = document.getElementById('display-name');
    const avatarUrlField = document.getElementById('avatar-url-field');
    const avatarFileField = document.getElementById('avatar-file-field');
    const avatarUrlInput = document.getElementById('avatar-url');
    const avatarFileInput = document.getElementById('avatar-file');
    const previewImage = document.getElementById('preview-image');
    const previewText = document.getElementById('preview-text');
    const messageEl = document.getElementById('message');
    const submitBtn = document.getElementById('submit-btn');
    const backBtn = document.getElementById('back-btn');
    const backLink = document.getElementById('back-link');
    const logoutBtn = document.getElementById('logout-btn');
    const form = document.getElementById('settings-form');
    const radioOptions = Array.from(document.querySelectorAll('#avatar-options .radio-option'));
    const themeToggle = document.getElementById('theme-toggle');

    const passwordForm = document.getElementById('password-form');
    const passwordSubmit = document.getElementById('password-submit');
    const passwordMessage = document.createElement('div');
    passwordMessage.className = 'message';
    passwordForm.insertBefore(passwordMessage, passwordForm.firstChild);

    const dlEnableToggle = document.getElementById('dl-enable-toggle');
    const dlConcurrency = document.getElementById('dl-concurrency');
    const dlChunk = document.getElementById('dl-chunk');
    const codeDownloadForm = document.getElementById('code-download-form');
    const codeDownloadInput = document.getElementById('code-download-input');
    const codeDownloadSubmit = document.getElementById('code-download-submit');
    const codeDownloadMessage = document.getElementById('code-download-message');
    const urlDownloadForm = document.getElementById('url-download-form');
    const urlDownloadInput = document.getElementById('url-download-input');
    const urlDownloadName = document.getElementById('url-download-name');
    const urlDownloadSubmit = document.getElementById('url-download-submit');
    const urlDownloadMessage = document.getElementById('url-download-message');
    const uploadList = document.getElementById('upload-list');
    const uploadEmpty = document.getElementById('upload-empty');

    const urlMetadataCache = new Map();

    let currentUser = null;
    let resendCooldown = 0;
    let resendTimer = null;

    backBtn.addEventListener('click', () => window.location.replace('/'));
    backLink.addEventListener('click', () => window.location.replace('/'));
    logoutBtn.addEventListener('click', async () => {
      await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });
      window.location.replace('/login.html');
    });

    themeToggle.addEventListener('change', () => {
      Theme.set(themeToggle.checked ? 'dark' : 'light');
    });
    window.addEventListener('themechange', event => {
      const next = event.detail;
      themeToggle.checked = next === 'dark';
    });

    async function fetchWithFallback(url, options) {
      try {
        return await fetch(url, options);
      } catch (error) {
        if (options && options.method === 'HEAD') {
          return fetch(url, { ...options, method: 'GET' });
        }
        throw error;
      }
    }

    async function resolveUrlMetadata(url) {
      if (!url) return { error: '无效的链接' };
      if (urlMetadataCache.has(url)) {
        const cached = urlMetadataCache.get(url);
        if (cached.state === 'done' || cached.state === 'error') {
          return cached.meta;
        }
        if (cached.promise) return cached.promise;
      }

      const cached = { meta: null, state: 'pending', promise: null };
      urlMetadataCache.set(url, cached);

      cached.promise = fetchWithFallback(url, { method: 'HEAD' })
        .then(res => {
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return extractMetadata(url, res);
        })
        .catch(async () => {
          const res = await fetchWithFallback(url, { method: 'GET' });
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return extractMetadata(url, res);
        })
        .then(meta => {
          cached.meta = { ...meta, url };
          cached.state = 'done';
          return cached.meta;
        })
        .catch(err => {
          cached.meta = { error: err.message || '无法获取文件信息', url };
          cached.state = 'error';
          return cached.meta;
        });

      return cached.promise;
    }

    function extractMetadata(url, response) {
      const headers = response.headers;
      const disposition = headers.get('content-disposition') || '';
      const length = headers.get('content-length');
      const type = headers.get('content-type') || '';

      const nameFromDisposition = (() => {
        const match = /filename\*=UTF-8''([^;]+)|filename="?([^";]+)"?/i.exec(disposition);
        if (!match) return null;
        const [, encoded, plain] = match;
        try {
          return encoded ? decodeURIComponent(encoded) : plain;
        } catch (_) {
          return plain;
        }
      })();

      const customHeaderName =
        headers.get('x-filename') ||
        headers.get('x-file-name') ||
        headers.get('x-original-filename');

      const fallbackName = deriveFileNameFromUrl(url);
      const fileName = nameFromDisposition || customHeaderName || fallbackName;
      const size = length && !Number.isNaN(Number(length)) ? Number(length) : undefined;

      let supportsRange;
      const acceptRanges = headers.get('accept-ranges');
      if (acceptRanges && acceptRanges.toLowerCase().includes('bytes')) {
        supportsRange = true;
      } else if (acceptRanges && acceptRanges.toLowerCase() === 'none') {
        supportsRange = false;
      } else if (headers.get('content-range')) {
        supportsRange = true;
      }

      return {
        fileName,
        contentType: type || undefined,
        size,
        supportsRange
      };
    }

    function deriveFileNameFromUrl(url) {
      try {
        const parsed = new URL(url);
        const candidate = parsed.pathname.split('/').pop() || 'download';
        return decodeURIComponent(candidate);
      } catch {
        try {
          const tail = url.split('/').pop() || 'download';
          return decodeURIComponent(tail);
        } catch {
          return 'download';
        }
      }
    }

    function triggerBrowserDownload(url, fileName) {
      const link = document.createElement('a');
      link.href = url;
      link.rel = 'noopener';
      link.target = '_blank';
      if (fileName) link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    async function runDownload(meta, updateMessage) {
      if (!meta || !meta.url) throw new Error('下载链接无效。');
      const setMessage = typeof updateMessage === 'function' ? updateMessage : () => {};
      let resolvedMeta = { ...meta, url: meta.url };

      setMessage('正在准备下载…');

      const needsResolve =
        meta.forceResolve ||
        !resolvedMeta.fileName ||
        resolvedMeta.size === undefined ||
        resolvedMeta.size === null ||
        resolvedMeta.size <= 0;

      if (needsResolve) {
        setMessage('正在解析文件信息…');
        let remoteMeta;
        try {
          remoteMeta = await resolveUrlMetadata(resolvedMeta.url);
          if (remoteMeta.error) throw new Error(remoteMeta.error);
        } catch (error) {
          console.error('解析链接信息失败，将直接触发浏览器下载。', error);
          const fallbackName = resolvedMeta.fileName || deriveFileNameFromUrl(resolvedMeta.url);
          triggerBrowserDownload(resolvedMeta.url, fallbackName);
          setMessage('无法解析文件信息，已触发浏览器下载。');
          return { ...resolvedMeta, fileName: fallbackName, supportsRange: false };
        }
        resolvedMeta = {
          ...resolvedMeta,
          ...remoteMeta,
          url: resolvedMeta.url
        };
        setMessage('信息解析完成，准备下载…');
      }

      const settings = DownloadSettings.get();
      const canUseHighSpeed =
        settings.enabled &&
        typeof HighSpeedDownloader !== 'undefined' &&
        HighSpeedDownloader.isSupported() &&
        resolvedMeta.supportsRange !== false;

      if (canUseHighSpeed) {
        const downloader = new HighSpeedDownloader({
          url: resolvedMeta.url,
          size: resolvedMeta.size,
          fileName: resolvedMeta.fileName,
          contentType: resolvedMeta.contentType,
          concurrency: settings.concurrency,
          chunkSize: settings.chunkSize,
          onProgress(progress) {
            setMessage(`下载进度 ${progress.percent}%`);
          }
        });

        try {
          await downloader.start();
          setMessage(
            resolvedMeta.size
              ? `下载完成 · ${DownloadSettings.formatBytes(resolvedMeta.size)}`
              : '下载完成'
          );
          return resolvedMeta;
        } catch (error) {
          console.error('高速下载失败，将回退到浏览器下载。', error);
          setMessage('高速下载失败，正在切换普通下载…');
          const cacheEntry = urlMetadataCache.get(resolvedMeta.url);
          if (cacheEntry && cacheEntry.meta && !cacheEntry.meta.error) {
            cacheEntry.meta.supportsRange = false;
          }
        }
      }

      triggerBrowserDownload(resolvedMeta.url, resolvedMeta.fileName);
      setMessage(
        resolvedMeta.size
          ? `已触发浏览器下载 · ${DownloadSettings.formatBytes(resolvedMeta.size)}`
          : '已触发浏览器下载。'
      );
      return resolvedMeta;
    }

    async function loadProfile() {
      try {
        const res = await fetch('/api/auth/session', { credentials: 'include' });
        const data = await res.json();
        if (!data.authenticated) {
          window.location.replace('/login.html');
          return;
        }
        currentUser = data.user;
        applyProfile();
        loadDownloadSettings();
        loadUploadedFiles();
      } catch (error) {
        console.error(error);
        showMessage('无法加载用户信息，请稍后再试。', 'error');
      }
    }

    function applyProfile() {
      const user = currentUser;
      profileAvatar.src = user.avatarUrl || 'https://cravatar.cn/avatar?d=identicon&s=160';
      profileAvatar.onerror = () => {
        profileAvatar.onerror = null;
        profileAvatar.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
      };
      profileName.textContent = user.displayName;
      profileEmail.textContent = user.email;
      emailDisplay.value = user.email;
      displayNameInput.value = user.displayName;
      verificationStatus.value = user.isVerified ? '已验证，可以发言' : '未验证，只能浏览消息';
      verificationBadge.textContent = user.isVerified ? '邮箱已验证' : '邮箱未验证';
      verificationBadge.className = user.isVerified ? 'badge success' : 'badge warn';
      verificationResend.style.display = user.isVerified ? 'none' : 'inline-flex';
      if (!user.isVerified) {
        updateResendLabel();
      }

      themeToggle.checked = Theme.get() === 'dark';
      const source = user.avatarSource || 'gravatar';
      const currentOption = document.querySelector(`input[name="avatarSource"][value="${source}"]`) || document.querySelector('input[name="avatarSource"][value="gravatar"]');
      currentOption.checked = true;
      handleAvatarChange();

      if (source === 'url') {
        avatarUrlInput.value = user.avatarUrl || '';
      } else {
        avatarUrlInput.value = '';
      }

      if (source === 'upload') {
        previewText.textContent = '当前使用：已上传头像，如需更换请重新上传文件。';
      }

      previewImage.src = user.avatarUrl || 'https://cravatar.cn/avatar?d=identicon&s=160';
      previewImage.onerror = () => {
        previewImage.onerror = null;
        previewImage.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
      };
    }

    radioOptions.forEach(option => {
      option.addEventListener('change', handleAvatarChange);
      option.addEventListener('click', () => {
        option.querySelector('input').checked = true;
        handleAvatarChange();
      });
    });

    function handleAvatarChange() {
      radioOptions.forEach(option => option.classList.remove('active'));
      const activeInput = document.querySelector('input[name="avatarSource"]:checked');
      const activeOption = activeInput.closest('.radio-option');
      activeOption.classList.add('active');

      const source = activeInput.value;
      avatarUrlField.classList.toggle('hidden', source !== 'url');
      avatarFileField.classList.toggle('hidden', source !== 'upload');

      if (source === 'gravatar') {
        previewImage.src = currentUser.avatarUrl || 'https://cravatar.cn/avatar?d=identicon&s=160';
        previewText.textContent = '头像预览：Cravatar（兼容 Gravatar，国内节点加速）';
      } else if (source === 'url') {
        const url = avatarUrlInput.value.trim() || currentUser.avatarUrl;
        previewImage.src = url || 'https://cravatar.cn/avatar?d=identicon&s=160';
        previewText.textContent = url ? '头像预览：自定义链接。' : '填写图片链接后即可预览。';
      } else {
        previewImage.src = currentUser.avatarUrl || 'https://cravatar.cn/avatar?d=identicon&s=160';
        previewText.textContent = '上传新图片将覆盖当前头像，最大 10 MB。';
      }
    }

    avatarUrlInput.addEventListener('input', () => {
      if (document.querySelector('input[name="avatarSource"]:checked').value === 'url') {
        const url = avatarUrlInput.value.trim();
        if (url) {
          previewImage.src = url;
          previewText.textContent = '头像预览：自定义链接。';
        } else {
          previewImage.src = 'https://cravatar.cn/avatar?d=identicon&s=160';
          previewText.textContent = '填写图片链接后即可预览。';
        }
      }
    });

    avatarFileInput.addEventListener('change', () => {
      const file = avatarFileInput.files[0];
      if (!file) {
        previewImage.src = currentUser.avatarUrl || 'https://cravatar.cn/avatar?d=identicon&s=160';
        previewText.textContent = '上传新图片将覆盖当前头像，最大 10 MB。';
        return;
      }
      const url = URL.createObjectURL(file);
      previewImage.src = url;
      previewText.textContent = `新头像：${file.name}（${Math.round(file.size / 1024)} KB）`;
    });

    form.addEventListener('submit', async event => {
      event.preventDefault();
      hideMessage();

      if (!form.reportValidity()) return;

      const source = form.avatarSource.value;
      if (source === 'url' && !avatarUrlInput.value.trim()) {
        showMessage('请输入头像链接。', 'error');
        return;
      }
      if (source === 'upload' && avatarFileInput.files.length === 0 && currentUser.avatarSource !== 'upload') {
        showMessage('请选择要上传的头像图片。', 'error');
        return;
      }

      const formData = new FormData(form);
      try {
        setSubmitting(true, '保存中…');
        const res = await fetch('/api/users/me', {
          method: 'POST',
          credentials: 'include',
          body: formData
        });
        const data = await res.json();

        if (!res.ok || !data.success) {
          const msg = data.message || '保存失败，请稍后再试。';
          showMessage(msg, 'error');
          setSubmitting(false);
          return;
        }

        currentUser = data.user;
        applyProfile();
        showMessage('资料已更新。重新进入聊天室即可看到最新头像与昵称。', 'success');
        setSubmitting(false);
      } catch (error) {
        console.error(error);
        showMessage('服务器开小差了，请稍后再试。', 'error');
        setSubmitting(false);
      }
    });

    const passwordFormApi = '/api/users/me/password';
    passwordForm.addEventListener('submit', async event => {
      event.preventDefault();
      hidePasswordMessage();

      const oldPassword = document.getElementById('old-password').value.trim();
      const newPassword = document.getElementById('new-password').value.trim();
      const confirmPassword = document.getElementById('confirm-password').value.trim();

      if (!oldPassword || !newPassword || !confirmPassword) {
        showPasswordMessage('请完整填写所有字段。', 'error');
        return;
      }
      if (newPassword.length < 8) {
        showPasswordMessage('新密码至少需要 8 个字符。', 'error');
        return;
      }
      if (newPassword !== confirmPassword) {
        showPasswordMessage('两次输入的新密码不一致。', 'error');
        return;
      }

      try {
        setPasswordSubmitting(true);
        const res = await fetch(passwordFormApi, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ oldPassword, newPassword, confirmPassword })
        });
        const data = await res.json();

        if (!res.ok || !data.success) {
          showPasswordMessage(data.message || '修改失败，请稍后再试。', 'error');
          setPasswordSubmitting(false);
          return;
        }

        showPasswordMessage('密码已更新，请使用新密码重新登录。', 'success');
        setPasswordSubmitting(false);
        setTimeout(() => window.location.replace('/login.html'), 1200);
      } catch (error) {
        console.error(error);
        showPasswordMessage('服务器开小差了，请稍后再试。', 'error');
        setPasswordSubmitting(false);
      }
    });

    verificationResend.addEventListener('click', () => {
      if (resendCooldown > 0) return;
      resendCooldown = 60;
      updateResendLabel();
      fetch('/api/auth/resend-verification', {
        method: 'POST',
        credentials: 'include'
      })
        .then(res => res.json())
        .then(data => {
          if (data && data.message) showMessage(data.message, 'success');
        })
        .catch(() => showMessage('重发失败，请稍后再试。', 'error'));

      resendTimer = setInterval(() => {
        resendCooldown -= 1;
        if (resendCooldown <= 0) {
          clearInterval(resendTimer);
          resendCooldown = 0;
        }
        updateResendLabel();
      }, 1000);
    });

    function updateResendLabel() {
      if (!verificationResend || currentUser.isVerified) return;
      verificationResend.disabled = resendCooldown > 0;
      verificationResend.textContent =
        resendCooldown > 0 ? `重新发送 (${resendCooldown}s)` : '重新发送验证邮件';
    }

    function showMessage(text, type) {
      messageEl.textContent = text;
      messageEl.className = `message show ${type}`;
    }
    function hideMessage() {
      messageEl.textContent = '';
      messageEl.className = 'message';
    }
    function setSubmitting(active, label) {
      submitBtn.disabled = active;
      submitBtn.textContent = label || '保存修改';
    }
    function showPasswordMessage(text, type) {
      passwordMessage.textContent = text;
      passwordMessage.className = `message show ${type}`;
    }
    function hidePasswordMessage() {
      passwordMessage.textContent = '';
      passwordMessage.className = 'message';
    }
    function setPasswordSubmitting(active) {
      passwordSubmit.disabled = active;
      passwordSubmit.textContent = active ? '更新中…' : '更新密码';
    }

    function loadDownloadSettings() {
      const settings = DownloadSettings.get();
      dlEnableToggle.checked = settings.enabled;
      dlConcurrency.value = settings.concurrency;
      dlChunk.value = Math.round((settings.chunkSize || 2 * 1024 * 1024) / 1024);
      dlConcurrency.disabled = !settings.enabled;
      dlChunk.disabled = !settings.enabled;
    }
    function persistDownloadSettings(partial) {
      const current = DownloadSettings.get();
      const next = { ...current, ...partial };
      DownloadSettings.set(next);
      dlEnableToggle.checked = next.enabled;
      dlConcurrency.disabled = !next.enabled;
      dlChunk.disabled = !next.enabled;
    }
    dlEnableToggle.addEventListener('change', () => {
      persistDownloadSettings({ enabled: dlEnableToggle.checked });
    });
    dlConcurrency.addEventListener('change', () => {
      const value = Math.min(Math.max(Number(dlConcurrency.value) || 4, 1), 8);
      dlConcurrency.value = value;
      persistDownloadSettings({ concurrency: value });
    });
    dlChunk.addEventListener('change', () => {
      let value = Number(dlChunk.value) || 2048;
      value = Math.min(Math.max(value, 128), 8192);
      dlChunk.value = value;
      persistDownloadSettings({ chunkSize: value * 1024 });
    });

    codeDownloadForm.addEventListener('submit', async event => {
      event.preventDefault();
      codeDownloadMessage.textContent = '';
      const raw = codeDownloadInput.value.trim().toUpperCase();
      if (!raw) {
        codeDownloadMessage.textContent = '请输入有效的文件编码。';
        return;
      }
      codeDownloadSubmit.disabled = true;
      codeDownloadSubmit.textContent = '请求中…';
      try {
        const meta = await requestPresign(raw);
        await runDownload(meta, msg => {
          codeDownloadMessage.textContent = msg;
        });
      } catch (error) {
        console.error(error);
        codeDownloadMessage.textContent = '下载失败，请稍后再试。';
        alert(error.message || '下载失败，请稍后再试。');
      } finally {
        codeDownloadSubmit.disabled = false;
        codeDownloadSubmit.textContent = '下载文件';
      }
    });

    urlDownloadForm.addEventListener('submit', async event => {
      event.preventDefault();
      urlDownloadMessage.textContent = '';
      const url = urlDownloadInput.value.trim();
      if (!url) {
        urlDownloadMessage.textContent = '请输入有效的 URL。';
        return;
      }
      const fileName = (urlDownloadName.value.trim() || '').replace(/[\\/:*?"<>|]/g, '_') || undefined;
      urlDownloadSubmit.disabled = true;
      urlDownloadSubmit.textContent = '下载中…';
      try {
        await runDownload(
          { url, fileName, forceResolve: true },
          msg => {
            urlDownloadMessage.textContent = msg;
          }
        );
      } catch (error) {
        console.error(error);
        urlDownloadMessage.textContent = '下载失败，请检查链接是否支持跨域访问。';
        alert(error.message || '下载失败，请稍后再试。');
      } finally {
        urlDownloadSubmit.disabled = false;
        urlDownloadSubmit.textContent = '开始下载';
      }
    });

    async function loadUploadedFiles() {
      try {
        const res = await fetch('/api/files/me', { credentials: 'include' });
        if (!res.ok) throw new Error('failed');
        const data = await res.json();
        renderUploadedFiles(Array.isArray(data.files) ? data.files : []);
      } catch (error) {
        console.error('无法加载上传记录', error);
        uploadList.innerHTML = '';
        uploadEmpty.hidden = false;
        uploadEmpty.textContent = '无法获取上传记录，请稍后再试。';
      }
    }

    function renderUploadedFiles(files) {
      uploadList.innerHTML = '';
      if (!files.length) {
        uploadEmpty.hidden = false;
        uploadEmpty.textContent = '尚未上传过文件。';
        return;
      }
      uploadEmpty.hidden = true;
      const fragment = document.createDocumentFragment();
      files.forEach(file => {
        const row = document.createElement('div');
        row.className = 'download-row';

        const meta = document.createElement('div');
        const name = document.createElement('strong');
        name.textContent = file.fileName;
        const info = document.createElement('span');
        const time = new Date(file.createdAt);
        const timeText = Number.isNaN(time.getTime()) ? '' : time.toLocaleString();
        info.textContent = `${file.code} · ${DownloadSettings.formatBytes(file.size)} · ${timeText}`;
        meta.appendChild(name);
        meta.appendChild(info);

        const btn = document.createElement('button');
        btn.type = 'button';
        btn.textContent = '下载';
        btn.dataset.fileCode = file.code;
        btn.dataset.fileName = file.fileName;
        btn.dataset.fileSize = file.size;
        btn.dataset.fileType = file.contentType;
        btn.addEventListener('click', () => handleUserFileDownload(btn, file.code));

        row.appendChild(meta);
        row.appendChild(btn);
        fragment.appendChild(row);
      });
      uploadList.appendChild(fragment);
    }

    async function handleUserFileDownload(button, code) {
      if (button.disabled) return;
      button.disabled = true;
      const original = button.textContent;
      button.textContent = '请求中…';
      try {
        const meta = await requestPresign(code);
        await runDownload(meta, msg => {
          button.textContent = msg;
        });
      } catch (error) {
        console.error(error);
        alert(error.message || '下载失败，请稍后再试。');
      } finally {
        button.disabled = false;
        button.textContent = original;
      }
    }

    async function requestPresign(code) {
      const res = await fetch(`/api/files/${code}/presign`, { credentials: 'include' });
      if (!res.ok) throw new Error('获取下载链接失败，请确认编码是否正确。');
      const data = await res.json();
      if (!data || !data.url) throw new Error('服务器暂时无法提供下载链接。');
      return {
        url: data.url,
        size: data.size || 0,
        fileName: data.fileName || `download-${code}`,
        contentType: data.contentType || 'application/octet-stream'
      };
    }

    loadProfile();
  </script>
</body>
</html>


---
# public\theme.js

(() => {
  const storageKey = 'chat-theme';
  const root = document.documentElement;

  function getPreferred() {
    const stored = localStorage.getItem(storageKey);
    if (stored === 'light' || stored === 'dark') return stored;
    const media = window.matchMedia('(prefers-color-scheme: dark)');
    return media.matches ? 'dark' : 'light';
  }

  function apply(theme) {
    root.dataset.theme = theme;
  }

  function set(theme) {
    if (theme !== 'light' && theme !== 'dark') return;
    localStorage.setItem(storageKey, theme);
    apply(theme);
    window.dispatchEvent(new CustomEvent('themechange', { detail: theme }));
  }

  function init() {
    apply(getPreferred());
    const media = window.matchMedia('(prefers-color-scheme: dark)');
    const handler = () => {
      const stored = localStorage.getItem(storageKey);
      if (!stored) {
        apply(media.matches ? 'dark' : 'light');
      }
    };
    if (media.addEventListener) {
      media.addEventListener('change', handler);
    } else {
      media.addListener(handler);
    }
  }

  window.Theme = {
    init,
    get: getPreferred,
    set
  };
})();
